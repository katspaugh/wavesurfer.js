[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/drawer.js",
    "content": "import * as util from './util';\r\n/**\r\n * Parent class for renderers\r\n *\r\n * @extends {Observer}\r\n */\r\nexport default class Drawer extends util.Observer {\r\n    /**\r\n     * @param {HTMLElement} container The container node of the wavesurfer instance\r\n     * @param {WavesurferParams} params The wavesurfer initialisation options\r\n     */\r\n    constructor(container, params) {\r\n        super();\r\n        /** @private */\r\n        this.container = container;\r\n        /**\r\n         * @type {WavesurferParams}\r\n         * @private\r\n         */\r\n        this.params = params;\r\n        /**\r\n         * The width of the renderer\r\n         * @type {number}\r\n         */\r\n        this.width = 0;\r\n        /**\r\n         * The height of the renderer\r\n         * @type {number}\r\n         */\r\n        this.height = params.height * this.params.pixelRatio;\r\n        /** @private */\r\n        this.lastPos = 0;\r\n        /**\r\n         * The `<wave>` element which is added to the container\r\n         * @type {HTMLElement}\r\n         */\r\n        this.wrapper = null;\r\n    }\r\n\r\n    /**\r\n     * Alias of `util.style`\r\n     *\r\n     * @param {HTMLElement} el The element that the styles will be applied to\r\n     * @param {Object} styles The map of propName: attribute, both are used as-is\r\n     * @return {HTMLElement} el\r\n     */\r\n    style(el, styles) {\r\n        return util.style(el, styles);\r\n    }\r\n\r\n    /**\r\n     * Create the wrapper `<wave>` element, style it and set up the events for\r\n     * interaction\r\n     */\r\n    createWrapper() {\r\n        this.wrapper = this.container.appendChild(\r\n            document.createElement('wave')\r\n        );\r\n\r\n        this.style(this.wrapper, {\r\n            display: 'block',\r\n            position: 'relative',\r\n            userSelect: 'none',\r\n            webkitUserSelect: 'none',\r\n            height: this.params.height + 'px'\r\n        });\r\n\r\n        if (this.params.fillParent || this.params.scrollParent) {\r\n            this.style(this.wrapper, {\r\n                width: '100%',\r\n                overflowX: this.params.hideScrollbar ? 'hidden' : 'auto',\r\n                overflowY: 'hidden'\r\n            });\r\n        }\r\n\r\n        this.setupWrapperEvents();\r\n    }\r\n\r\n    /**\r\n     * Handle click event\r\n     *\r\n     * @param {Event} e Click event\r\n     * @param {?boolean} noPrevent Set to true to not call `e.preventDefault()`\r\n     * @return {number} Playback position from 0 to 1\r\n     */\r\n    handleEvent(e, noPrevent) {\r\n        !noPrevent && e.preventDefault();\r\n\r\n        const clientX = e.targetTouches\r\n            ? e.targetTouches[0].clientX\r\n            : e.clientX;\r\n        const bbox = this.wrapper.getBoundingClientRect();\r\n\r\n        const nominalWidth = this.width;\r\n        const parentWidth = this.getWidth();\r\n\r\n        let progress;\r\n\r\n        if (!this.params.fillParent && nominalWidth < parentWidth) {\r\n            progress =\r\n                (clientX - bbox.left) *\r\n                    (this.params.pixelRatio / nominalWidth) || 0;\r\n\r\n            if (progress > 1) {\r\n                progress = 1;\r\n            }\r\n        } else {\r\n            progress =\r\n                (clientX - bbox.left + this.wrapper.scrollLeft) /\r\n                    this.wrapper.scrollWidth || 0;\r\n        }\r\n\r\n        return progress;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    setupWrapperEvents() {\r\n        this.wrapper.addEventListener('click', e => {\r\n            const scrollbarHeight =\r\n                this.wrapper.offsetHeight - this.wrapper.clientHeight;\r\n            if (scrollbarHeight != 0) {\r\n                // scrollbar is visible.  Check if click was on it\r\n                const bbox = this.wrapper.getBoundingClientRect();\r\n                if (e.clientY >= bbox.bottom - scrollbarHeight) {\r\n                    // ignore mousedown as it was on the scrollbar\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (this.params.interact) {\r\n                this.fireEvent('click', e, this.handleEvent(e));\r\n            }\r\n        });\r\n\r\n        this.wrapper.addEventListener('scroll', e =>\r\n            this.fireEvent('scroll', e)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Draw peaks on the canvas\r\n     *\r\n     * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel\r\n     * rendering\r\n     * @param {number} length The width of the area that should be drawn\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     */\r\n    drawPeaks(peaks, length, start, end) {\r\n        if (!this.setWidth(length)) {\r\n            this.clearWave();\r\n        }\r\n\r\n        this.params.barWidth\r\n            ? this.drawBars(peaks, 0, start, end)\r\n            : this.drawWave(peaks, 0, start, end);\r\n    }\r\n\r\n    /**\r\n     * Scroll to the beginning\r\n     */\r\n    resetScroll() {\r\n        if (this.wrapper !== null) {\r\n            this.wrapper.scrollLeft = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Recenter the viewport at a certain percent of the waveform\r\n     *\r\n     * @param {number} percent Value from 0 to 1 on the waveform\r\n     */\r\n    recenter(percent) {\r\n        const position = this.wrapper.scrollWidth * percent;\r\n        this.recenterOnPosition(position, true);\r\n    }\r\n\r\n    /**\r\n     * Recenter the viewport on a position, either scroll there immediately or\r\n     * in steps of 5 pixels\r\n     *\r\n     * @param {number} position X-offset in pixels\r\n     * @param {boolean} immediate Set to true to immediately scroll somewhere\r\n     */\r\n    recenterOnPosition(position, immediate) {\r\n        const scrollLeft = this.wrapper.scrollLeft;\r\n        const half = ~~(this.wrapper.clientWidth / 2);\r\n        const maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\r\n        let target = position - half;\r\n        let offset = target - scrollLeft;\r\n\r\n        if (maxScroll == 0) {\r\n            // no need to continue if scrollbar is not there\r\n            return;\r\n        }\r\n\r\n        // if the cursor is currently visible...\r\n        if (!immediate && -half <= offset && offset < half) {\r\n            // we'll limit the \"re-center\" rate.\r\n            const rate = 5;\r\n            offset = Math.max(-rate, Math.min(rate, offset));\r\n            target = scrollLeft + offset;\r\n        }\r\n\r\n        // limit target to valid range (0 to maxScroll)\r\n        target = Math.max(0, Math.min(maxScroll, target));\r\n        // no use attempting to scroll if we're not moving\r\n        if (target != scrollLeft) {\r\n            this.wrapper.scrollLeft = target;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the current scroll position in pixels\r\n     *\r\n     * @return {number}\r\n     */\r\n    getScrollX() {\r\n        const pixelRatio = this.params.pixelRatio;\r\n        let x = Math.round(this.wrapper.scrollLeft * pixelRatio);\r\n\r\n        // In cases of elastic scroll (safari with mouse wheel) you can\r\n        // scroll beyond the limits of the container\r\n        // Calculate and floor the scrollable extent to make sure an out\r\n        // of bounds value is not returned\r\n        // Ticket #1312\r\n        if (this.params.scrollParent) {\r\n            const maxScroll = ~~(\r\n                this.wrapper.scrollWidth * pixelRatio -\r\n                this.getWidth()\r\n            );\r\n            x = Math.min(maxScroll, Math.max(0, x));\r\n        }\r\n\r\n        return x;\r\n    }\r\n\r\n    /**\r\n     * Get the width of the container\r\n     *\r\n     * @return {number}\r\n     */\r\n    getWidth() {\r\n        return Math.round(this.container.clientWidth * this.params.pixelRatio);\r\n    }\r\n\r\n    /**\r\n     * Set the width of the container\r\n     *\r\n     * @param {number} width\r\n     */\r\n    setWidth(width) {\r\n        if (this.width == width) {\r\n            return false;\r\n        }\r\n\r\n        this.width = width;\r\n\r\n        if (this.params.fillParent || this.params.scrollParent) {\r\n            this.style(this.wrapper, {\r\n                width: ''\r\n            });\r\n        } else {\r\n            this.style(this.wrapper, {\r\n                width: ~~(this.width / this.params.pixelRatio) + 'px'\r\n            });\r\n        }\r\n\r\n        this.updateSize();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set the height of the container\r\n     *\r\n     * @param {number} height\r\n     */\r\n    setHeight(height) {\r\n        if (height == this.height) {\r\n            return false;\r\n        }\r\n        this.height = height;\r\n\r\n        this.style(this.wrapper, {\r\n            height: ~~(this.height / this.params.pixelRatio) + 'px'\r\n        });\r\n\r\n        this.updateSize();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Called by wavesurfer when progress should be renderered\r\n     *\r\n     * @param {number} progress From 0 to 1\r\n     */\r\n    progress(progress) {\r\n        const minPxDelta = 1 / this.params.pixelRatio;\r\n        const pos = Math.round(progress * this.width) * minPxDelta;\r\n\r\n        if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\r\n            this.lastPos = pos;\r\n\r\n            if (this.params.scrollParent && this.params.autoCenter) {\r\n                const newPos = ~~(this.wrapper.scrollWidth * progress);\r\n                this.recenterOnPosition(newPos);\r\n            }\r\n\r\n            this.updateProgress(pos);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This is called when wavesurfer is destroyed\r\n     */\r\n    destroy() {\r\n        this.unAll();\r\n        if (this.wrapper) {\r\n            if (this.wrapper.parentNode == this.container) {\r\n                this.container.removeChild(this.wrapper);\r\n            }\r\n            this.wrapper = null;\r\n        }\r\n    }\r\n\r\n    /* Renderer-specific methods */\r\n\r\n    /**\r\n     * Called after cursor related params have changed.\r\n     *\r\n     * @abstract\r\n     */\r\n    updateCursor() {}\r\n\r\n    /**\r\n     * Called when the size of the container changes so the renderer can adjust\r\n     *\r\n     * @abstract\r\n     */\r\n    updateSize() {}\r\n\r\n    /**\r\n     * Draw a waveform with bars\r\n     *\r\n     * @abstract\r\n     * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel\r\n     * rendering\r\n     * @param {number} channelIndex The index of the current channel. Normally\r\n     * should be 0\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     */\r\n    drawBars(peaks, channelIndex, start, end) {}\r\n\r\n    /**\r\n     * Draw a waveform\r\n     *\r\n     * @abstract\r\n     * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel\r\n     * rendering\r\n     * @param {number} channelIndex The index of the current channel. Normally\r\n     * should be 0\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     */\r\n    drawWave(peaks, channelIndex, start, end) {}\r\n\r\n    /**\r\n     * Clear the waveform\r\n     *\r\n     * @abstract\r\n     */\r\n    clearWave() {}\r\n\r\n    /**\r\n     * Render the new progress\r\n     *\r\n     * @abstract\r\n     * @param {number} position X-Offset of progress position in pixels\r\n     */\r\n    updateProgress(position) {}\r\n}\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/drawer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Drawer",
    "memberof": "src/drawer.js",
    "static": true,
    "longname": "src/drawer.js~Drawer",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/drawer.js",
    "importStyle": "Drawer",
    "description": "Parent class for renderers",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "Observer"
    ]
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": "The container node of the wavesurfer instance"
      },
      {
        "nullable": null,
        "types": [
          "WavesurferParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The wavesurfer initialisation options"
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "container",
    "memberof": "src/drawer.js~Drawer",
    "static": false,
    "longname": "src/drawer.js~Drawer#container",
    "access": "private",
    "description": null,
    "lineNumber": 15,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "params",
    "memberof": "src/drawer.js~Drawer",
    "static": false,
    "longname": "src/drawer.js~Drawer#params",
    "access": "private",
    "description": "",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "WavesurferParams"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "width",
    "memberof": "src/drawer.js~Drawer",
    "static": false,
    "longname": "src/drawer.js~Drawer#width",
    "access": "public",
    "description": "The width of the renderer",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "height",
    "memberof": "src/drawer.js~Drawer",
    "static": false,
    "longname": "src/drawer.js~Drawer#height",
    "access": "public",
    "description": "The height of the renderer",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "lastPos",
    "memberof": "src/drawer.js~Drawer",
    "static": false,
    "longname": "src/drawer.js~Drawer#lastPos",
    "access": "private",
    "description": null,
    "lineNumber": 32,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "wrapper",
    "memberof": "src/drawer.js~Drawer",
    "static": false,
    "longname": "src/drawer.js~Drawer#wrapper",
    "access": "public",
    "description": "The `<wave>` element which is added to the container",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "style",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#style",
    "access": "public",
    "description": "Alias of `util.style`",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "el",
        "description": "The element that the styles will be applied to"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "styles",
        "description": "The map of propName: attribute, both are used as-is"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": "el"
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "createWrapper",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#createWrapper",
    "access": "public",
    "description": "Create the wrapper `<wave>` element, style it and set up the events for\ninteraction",
    "lineNumber": 55,
    "params": [],
    "return": null
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "handleEvent",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#handleEvent",
    "access": "public",
    "description": "Handle click event",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "Click event"
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noPrevent",
        "description": "Set to true to not call `e.preventDefault()`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Playback position from 0 to 1"
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "setupWrapperEvents",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#setupWrapperEvents",
    "access": "private",
    "description": "",
    "lineNumber": 119,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "drawPeaks",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#drawPeaks",
    "access": "public",
    "description": "Draw peaks on the canvas",
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]",
          "number[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Can also be an array of arrays for split channel\nrendering"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "The width of the area that should be drawn"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The x-offset of the beginning of the area that\nshould be rendered"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "The x-offset of the end of the area that should be\nrendered"
      }
    ],
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "resetScroll",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#resetScroll",
    "access": "public",
    "description": "Scroll to the beginning",
    "lineNumber": 166,
    "params": [],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "recenter",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#recenter",
    "access": "public",
    "description": "Recenter the viewport at a certain percent of the waveform",
    "lineNumber": 177,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "percent",
        "description": "Value from 0 to 1 on the waveform"
      }
    ],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "recenterOnPosition",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#recenterOnPosition",
    "access": "public",
    "description": "Recenter the viewport on a position, either scroll there immediately or\nin steps of 5 pixels",
    "lineNumber": 189,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "X-offset in pixels"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "immediate",
        "description": "Set to true to immediately scroll somewhere"
      }
    ],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "getScrollX",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#getScrollX",
    "access": "public",
    "description": "Get the current scroll position in pixels",
    "lineNumber": 222,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "getWidth",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#getWidth",
    "access": "public",
    "description": "Get the width of the container",
    "lineNumber": 247,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "setWidth",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#setWidth",
    "access": "public",
    "description": "Set the width of the container",
    "lineNumber": 256,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "setHeight",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#setHeight",
    "access": "public",
    "description": "Set the height of the container",
    "lineNumber": 282,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "progress",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#progress",
    "access": "public",
    "description": "Called by wavesurfer when progress should be renderered",
    "lineNumber": 301,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "progress",
        "description": "From 0 to 1"
      }
    ],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#destroy",
    "access": "public",
    "description": "This is called when wavesurfer is destroyed",
    "lineNumber": 320,
    "params": [],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "updateCursor",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#updateCursor",
    "access": "public",
    "description": "Called after cursor related params have changed.",
    "lineNumber": 337,
    "abstract": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "updateSize",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#updateSize",
    "access": "public",
    "description": "Called when the size of the container changes so the renderer can adjust",
    "lineNumber": 344,
    "abstract": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "drawBars",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#drawBars",
    "access": "public",
    "description": "Draw a waveform with bars",
    "lineNumber": 359,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]",
          "number[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Can also be an array of arrays for split channel\nrendering"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "channelIndex",
        "description": "The index of the current channel. Normally\nshould be 0"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The x-offset of the beginning of the area that\nshould be rendered"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "The x-offset of the end of the area that should be\nrendered"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "drawWave",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#drawWave",
    "access": "public",
    "description": "Draw a waveform",
    "lineNumber": 374,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]",
          "number[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Can also be an array of arrays for split channel\nrendering"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "channelIndex",
        "description": "The index of the current channel. Normally\nshould be 0"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The x-offset of the beginning of the area that\nshould be rendered"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "The x-offset of the end of the area that should be\nrendered"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "clearWave",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#clearWave",
    "access": "public",
    "description": "Clear the waveform",
    "lineNumber": 381,
    "abstract": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "updateProgress",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#updateProgress",
    "access": "public",
    "description": "Render the new progress",
    "lineNumber": 389,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "X-Offset of progress position in pixels"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "src/drawer.multicanvas.js",
    "content": "import Drawer from './drawer';\r\nimport * as util from './util';\r\n\r\n/**\r\n * @typedef {Object} CanvasEntry\r\n * @private\r\n * @property {HTMLElement} wave The wave node\r\n * @property {CanvasRenderingContext2D} waveCtx The canvas rendering context\r\n * @property {?HTMLElement} progress The progress wave node\r\n * @property {?CanvasRenderingContext2D} progressCtx The progress wave canvas\r\n * rendering context\r\n * @property {?number} start Start of the area the canvas should render, between 0 and 1\r\n * @property {?number} end End of the area the canvas should render, between 0 and 1\r\n */\r\n\r\n/**\r\n * MultiCanvas renderer for wavesurfer. Is currently the default and sole built\r\n * in renderer.\r\n */\r\nexport default class MultiCanvas extends Drawer {\r\n    /**\r\n     * @param {HTMLElement} container The container node of the wavesurfer instance\r\n     * @param {WavesurferParams} params The wavesurfer initialisation options\r\n     */\r\n    constructor(container, params) {\r\n        super(container, params);\r\n        /**\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this.maxCanvasWidth = params.maxCanvasWidth;\r\n        /**\r\n         * @private\r\n         * @type {number}\r\n         */\r\n        this.maxCanvasElementWidth = Math.round(\r\n            params.maxCanvasWidth / params.pixelRatio\r\n        );\r\n\r\n        /**\r\n         * Whether or not the progress wave is renderered. If the `waveColor`\r\n         * and `progressColor` are the same colour it is not.\r\n         * @type {boolean}\r\n         */\r\n        this.hasProgressCanvas = params.waveColor != params.progressColor;\r\n        /**\r\n         * @private\r\n         * @type {number}\r\n         */\r\n        this.halfPixel = 0.5 / params.pixelRatio;\r\n        /**\r\n         * @private\r\n         * @type {Array}\r\n         */\r\n        this.canvases = [];\r\n        /** @private */\r\n        this.progressWave = null;\r\n    }\r\n\r\n    /**\r\n     * Initialise the drawer\r\n     */\r\n    init() {\r\n        this.createWrapper();\r\n        this.createElements();\r\n    }\r\n\r\n    /**\r\n     * Create the canvas elements and style them\r\n     *\r\n     * @private\r\n     */\r\n    createElements() {\r\n        this.progressWave = this.wrapper.appendChild(\r\n            this.style(document.createElement('wave'), {\r\n                position: 'absolute',\r\n                zIndex: 3,\r\n                left: 0,\r\n                top: 0,\r\n                bottom: 0,\r\n                overflow: 'hidden',\r\n                width: '0',\r\n                display: 'none',\r\n                boxSizing: 'border-box',\r\n                borderRightStyle: 'solid',\r\n                pointerEvents: 'none'\r\n            })\r\n        );\r\n\r\n        this.addCanvas();\r\n        this.updateCursor();\r\n    }\r\n\r\n    /**\r\n     * Update cursor style from params.\r\n     */\r\n    updateCursor() {\r\n        this.style(this.progressWave, {\r\n            borderRightWidth: this.params.cursorWidth + 'px',\r\n            borderRightColor: this.params.cursorColor\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adjust to the updated size by adding or removing canvases\r\n     */\r\n    updateSize() {\r\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\r\n        const requiredCanvases = Math.ceil(\r\n            totalWidth / this.maxCanvasElementWidth\r\n        );\r\n\r\n        while (this.canvases.length < requiredCanvases) {\r\n            this.addCanvas();\r\n        }\r\n\r\n        while (this.canvases.length > requiredCanvases) {\r\n            this.removeCanvas();\r\n        }\r\n\r\n        this.canvases.forEach((entry, i) => {\r\n            // Add some overlap to prevent vertical white stripes, keep the width even for simplicity.\r\n            let canvasWidth =\r\n                this.maxCanvasWidth + 2 * Math.ceil(this.params.pixelRatio / 2);\r\n\r\n            if (i == this.canvases.length - 1) {\r\n                canvasWidth =\r\n                    this.width -\r\n                    this.maxCanvasWidth * (this.canvases.length - 1);\r\n            }\r\n\r\n            this.updateDimensions(entry, canvasWidth, this.height);\r\n            this.clearWaveForEntry(entry);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add a canvas to the canvas list\r\n     *\r\n     * @private\r\n     */\r\n    addCanvas() {\r\n        const entry = {};\r\n        const leftOffset = this.maxCanvasElementWidth * this.canvases.length;\r\n\r\n        entry.wave = this.wrapper.appendChild(\r\n            this.style(document.createElement('canvas'), {\r\n                position: 'absolute',\r\n                zIndex: 2,\r\n                left: leftOffset + 'px',\r\n                top: 0,\r\n                bottom: 0,\r\n                height: '100%',\r\n                pointerEvents: 'none'\r\n            })\r\n        );\r\n        entry.waveCtx = entry.wave.getContext('2d');\r\n\r\n        if (this.hasProgressCanvas) {\r\n            entry.progress = this.progressWave.appendChild(\r\n                this.style(document.createElement('canvas'), {\r\n                    position: 'absolute',\r\n                    left: leftOffset + 'px',\r\n                    top: 0,\r\n                    bottom: 0,\r\n                    height: '100%'\r\n                })\r\n            );\r\n            entry.progressCtx = entry.progress.getContext('2d');\r\n        }\r\n\r\n        this.canvases.push(entry);\r\n    }\r\n\r\n    /**\r\n     * Pop one canvas from the list\r\n     *\r\n     * @private\r\n     */\r\n    removeCanvas() {\r\n        const lastEntry = this.canvases.pop();\r\n        lastEntry.wave.parentElement.removeChild(lastEntry.wave);\r\n        if (this.hasProgressCanvas) {\r\n            lastEntry.progress.parentElement.removeChild(lastEntry.progress);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the dimensions of a canvas element\r\n     *\r\n     * @private\r\n     * @param {CanvasEntry} entry\r\n     * @param {number} width The new width of the element\r\n     * @param {number} height The new height of the element\r\n     */\r\n    updateDimensions(entry, width, height) {\r\n        const elementWidth = Math.round(width / this.params.pixelRatio);\r\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\r\n\r\n        // Where the canvas starts and ends in the waveform, represented as a decimal between 0 and 1.\r\n        entry.start = entry.waveCtx.canvas.offsetLeft / totalWidth || 0;\r\n        entry.end = entry.start + elementWidth / totalWidth;\r\n\r\n        entry.waveCtx.canvas.width = width;\r\n        entry.waveCtx.canvas.height = height;\r\n        this.style(entry.waveCtx.canvas, { width: elementWidth + 'px' });\r\n\r\n        this.style(this.progressWave, { display: 'block' });\r\n\r\n        if (this.hasProgressCanvas) {\r\n            entry.progressCtx.canvas.width = width;\r\n            entry.progressCtx.canvas.height = height;\r\n            this.style(entry.progressCtx.canvas, {\r\n                width: elementWidth + 'px'\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear the whole waveform\r\n     */\r\n    clearWave() {\r\n        this.canvases.forEach(entry => this.clearWaveForEntry(entry));\r\n    }\r\n\r\n    /**\r\n     * Clear one canvas\r\n     *\r\n     * @private\r\n     * @param {CanvasEntry} entry\r\n     */\r\n    clearWaveForEntry(entry) {\r\n        entry.waveCtx.clearRect(\r\n            0,\r\n            0,\r\n            entry.waveCtx.canvas.width,\r\n            entry.waveCtx.canvas.height\r\n        );\r\n        if (this.hasProgressCanvas) {\r\n            entry.progressCtx.clearRect(\r\n                0,\r\n                0,\r\n                entry.progressCtx.canvas.width,\r\n                entry.progressCtx.canvas.height\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw a waveform with bars\r\n     *\r\n     * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel\r\n     * rendering\r\n     * @param {number} channelIndex The index of the current channel. Normally\r\n     * should be 0. Must be an integer.\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     */\r\n    drawBars(peaks, channelIndex, start, end) {\r\n        return this.prepareDraw(\r\n            peaks,\r\n            channelIndex,\r\n            start,\r\n            end,\r\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks }) => {\r\n                // if drawBars was called within ws.empty we don't pass a start and\r\n                // don't want anything to happen\r\n                if (start === undefined) {\r\n                    return;\r\n                }\r\n                // Skip every other value if there are negatives.\r\n                const peakIndexScale = hasMinVals ? 2 : 1;\r\n                const length = peaks.length / peakIndexScale;\r\n                const bar = this.params.barWidth * this.params.pixelRatio;\r\n                const gap =\r\n                    this.params.barGap === null\r\n                        ? Math.max(this.params.pixelRatio, ~~(bar / 2))\r\n                        : Math.max(\r\n                              this.params.pixelRatio,\r\n                              this.params.barGap * this.params.pixelRatio\r\n                          );\r\n                const step = bar + gap;\r\n\r\n                const scale = length / this.width;\r\n                const first = start;\r\n                const last = end;\r\n                let i;\r\n\r\n                for (i = first; i < last; i += step) {\r\n                    const peak =\r\n                        peaks[Math.floor(i * scale * peakIndexScale)] || 0;\r\n                    const h = Math.round((peak / absmax) * halfH);\r\n                    this.fillRect(\r\n                        i + this.halfPixel,\r\n                        halfH - h + offsetY,\r\n                        bar + this.halfPixel,\r\n                        h * 2\r\n                    );\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Draw a waveform\r\n     *\r\n     * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel\r\n     * rendering\r\n     * @param {number} channelIndex The index of the current channel. Normally\r\n     * should be 0\r\n     * @param {number?} start The x-offset of the beginning of the area that\r\n     * should be rendered (If this isn't set only a flat line is rendered)\r\n     * @param {number?} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     */\r\n    drawWave(peaks, channelIndex, start, end) {\r\n        return this.prepareDraw(\r\n            peaks,\r\n            channelIndex,\r\n            start,\r\n            end,\r\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks }) => {\r\n                if (!hasMinVals) {\r\n                    const reflectedPeaks = [];\r\n                    const len = peaks.length;\r\n                    let i;\r\n                    for (i = 0; i < len; i++) {\r\n                        reflectedPeaks[2 * i] = peaks[i];\r\n                        reflectedPeaks[2 * i + 1] = -peaks[i];\r\n                    }\r\n                    peaks = reflectedPeaks;\r\n                }\r\n\r\n                // if drawWave was called within ws.empty we don't pass a start and\r\n                // end and simply want a flat line\r\n                if (start !== undefined) {\r\n                    this.drawLine(peaks, absmax, halfH, offsetY, start, end);\r\n                }\r\n\r\n                // Always draw a median line\r\n                this.fillRect(\r\n                    0,\r\n                    halfH + offsetY - this.halfPixel,\r\n                    this.width,\r\n                    this.halfPixel\r\n                );\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Tell the canvas entries to render their portion of the waveform\r\n     *\r\n     * @private\r\n     * @param {number[]} peaks Peak data\r\n     * @param {number} absmax Maximum peak value (absolute)\r\n     * @param {number} halfH Half the height of the waveform\r\n     * @param {number} offsetY Offset to the top\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that\r\n     * should be rendered\r\n     */\r\n    drawLine(peaks, absmax, halfH, offsetY, start, end) {\r\n        this.canvases.forEach(entry => {\r\n            this.setFillStyles(entry);\r\n            this.drawLineToContext(\r\n                entry,\r\n                entry.waveCtx,\r\n                peaks,\r\n                absmax,\r\n                halfH,\r\n                offsetY,\r\n                start,\r\n                end\r\n            );\r\n            this.drawLineToContext(\r\n                entry,\r\n                entry.progressCtx,\r\n                peaks,\r\n                absmax,\r\n                halfH,\r\n                offsetY,\r\n                start,\r\n                end\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Render the actual waveform line on a canvas\r\n     *\r\n     * @private\r\n     * @param {CanvasEntry} entry\r\n     * @param {Canvas2DContextAttributes} ctx Essentially `entry.[wave|progress]Ctx`\r\n     * @param {number[]} peaks\r\n     * @param {number} absmax Maximum peak value (absolute)\r\n     * @param {number} halfH Half the height of the waveform\r\n     * @param {number} offsetY Offset to the top\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that\r\n     * should be rendered\r\n     */\r\n    drawLineToContext(entry, ctx, peaks, absmax, halfH, offsetY, start, end) {\r\n        if (!ctx) {\r\n            return;\r\n        }\r\n\r\n        const length = peaks.length / 2;\r\n        const scale =\r\n            this.params.fillParent && this.width != length\r\n                ? this.width / length\r\n                : 1;\r\n\r\n        const first = Math.round(length * entry.start);\r\n        // Use one more peak value to make sure we join peaks at ends -- unless,\r\n        // of course, this is the last canvas.\r\n        const last = Math.round(length * entry.end) + 1;\r\n        if (first > end || last < start) {\r\n            return;\r\n        }\r\n        const canvasStart = Math.min(first, start);\r\n        const canvasEnd = Math.max(last, end);\r\n        let i;\r\n        let j;\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(\r\n            (canvasStart - first) * scale + this.halfPixel,\r\n            halfH + offsetY\r\n        );\r\n\r\n        for (i = canvasStart; i < canvasEnd; i++) {\r\n            const peak = peaks[2 * i] || 0;\r\n            const h = Math.round((peak / absmax) * halfH);\r\n            ctx.lineTo(\r\n                (i - first) * scale + this.halfPixel,\r\n                halfH - h + offsetY\r\n            );\r\n        }\r\n\r\n        // Draw the bottom edge going backwards, to make a single\r\n        // closed hull to fill.\r\n        for (j = canvasEnd - 1; j >= canvasStart; j--) {\r\n            const peak = peaks[2 * j + 1] || 0;\r\n            const h = Math.round((peak / absmax) * halfH);\r\n            ctx.lineTo(\r\n                (j - first) * scale + this.halfPixel,\r\n                halfH - h + offsetY\r\n            );\r\n        }\r\n\r\n        ctx.closePath();\r\n        ctx.fill();\r\n    }\r\n\r\n    /**\r\n     * Draw a rectangle on the waveform\r\n     *\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} width\r\n     * @param {number} height\r\n     */\r\n    fillRect(x, y, width, height) {\r\n        const startCanvas = Math.floor(x / this.maxCanvasWidth);\r\n        const endCanvas = Math.min(\r\n            Math.ceil((x + width) / this.maxCanvasWidth) + 1,\r\n            this.canvases.length\r\n        );\r\n        let i;\r\n        for (i = startCanvas; i < endCanvas; i++) {\r\n            const entry = this.canvases[i];\r\n            const leftOffset = i * this.maxCanvasWidth;\r\n\r\n            const intersection = {\r\n                x1: Math.max(x, i * this.maxCanvasWidth),\r\n                y1: y,\r\n                x2: Math.min(\r\n                    x + width,\r\n                    i * this.maxCanvasWidth + entry.waveCtx.canvas.width\r\n                ),\r\n                y2: y + height\r\n            };\r\n\r\n            if (intersection.x1 < intersection.x2) {\r\n                this.setFillStyles(entry);\r\n\r\n                this.fillRectToContext(\r\n                    entry.waveCtx,\r\n                    intersection.x1 - leftOffset,\r\n                    intersection.y1,\r\n                    intersection.x2 - intersection.x1,\r\n                    intersection.y2 - intersection.y1\r\n                );\r\n\r\n                this.fillRectToContext(\r\n                    entry.progressCtx,\r\n                    intersection.x1 - leftOffset,\r\n                    intersection.y1,\r\n                    intersection.x2 - intersection.x1,\r\n                    intersection.y2 - intersection.y1\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs preparation tasks and calculations which are shared by drawBars and drawWave\r\n     *\r\n     * @private\r\n     * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel\r\n     * rendering\r\n     * @param {number} channelIndex The index of the current channel. Normally\r\n     * should be 0\r\n     * @param {number?} start The x-offset of the beginning of the area that\r\n     * should be rendered (If this isn't set only a flat line is rendered)\r\n     * @param {number?} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     * @param {function} fn The render function to call\r\n     */\r\n    prepareDraw(peaks, channelIndex, start, end, fn) {\r\n        return util.frame(() => {\r\n            // Split channels and call this function with the channelIndex set\r\n            if (peaks[0] instanceof Array) {\r\n                const channels = peaks;\r\n                if (this.params.splitChannels) {\r\n                    this.setHeight(\r\n                        channels.length *\r\n                            this.params.height *\r\n                            this.params.pixelRatio\r\n                    );\r\n                    return channels.forEach((channelPeaks, i) =>\r\n                        this.prepareDraw(channelPeaks, i, start, end, fn)\r\n                    );\r\n                }\r\n                peaks = channels[0];\r\n            }\r\n            // calculate maximum modulation value, either from the barHeight\r\n            // parameter or if normalize=true from the largest value in the peak\r\n            // set\r\n            let absmax = 1 / this.params.barHeight;\r\n            if (this.params.normalize) {\r\n                const max = util.max(peaks);\r\n                const min = util.min(peaks);\r\n                absmax = -min > max ? -min : max;\r\n            }\r\n\r\n            // Bar wave draws the bottom only as a reflection of the top,\r\n            // so we don't need negative values\r\n            const hasMinVals = [].some.call(peaks, val => val < 0);\r\n            const height = this.params.height * this.params.pixelRatio;\r\n            const offsetY = height * channelIndex || 0;\r\n            const halfH = height / 2;\r\n\r\n            return fn({\r\n                absmax: absmax,\r\n                hasMinVals: hasMinVals,\r\n                height: height,\r\n                offsetY: offsetY,\r\n                halfH: halfH,\r\n                peaks: peaks\r\n            });\r\n        })();\r\n    }\r\n\r\n    /**\r\n     * Draw the actual rectangle on a canvas\r\n     *\r\n     * @private\r\n     * @param {Canvas2DContextAttributes} ctx\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} width\r\n     * @param {number} height\r\n     */\r\n    fillRectToContext(ctx, x, y, width, height) {\r\n        if (!ctx) {\r\n            return;\r\n        }\r\n        ctx.fillRect(x, y, width, height);\r\n    }\r\n\r\n    /**\r\n     * Set the fill styles for a certain entry (wave and progress)\r\n     *\r\n     * @private\r\n     * @param {CanvasEntry} entry\r\n     */\r\n    setFillStyles(entry) {\r\n        entry.waveCtx.fillStyle = this.params.waveColor;\r\n        if (this.hasProgressCanvas) {\r\n            entry.progressCtx.fillStyle = this.params.progressColor;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return image data of the waveform\r\n     *\r\n     * @param {string} type='image/png' An optional value of a format type.\r\n     * @param {number} quality=0.92 An optional value between 0 and 1.\r\n     * @return {string|string[]} images A data URL or an array of data URLs\r\n     */\r\n    getImage(type, quality) {\r\n        const images = this.canvases.map(entry =>\r\n            entry.wave.toDataURL(type, quality)\r\n        );\r\n        return images.length > 1 ? images : images[0];\r\n    }\r\n\r\n    /**\r\n     * Render the new progress\r\n     *\r\n     * @param {number} position X-Offset of progress position in pixels\r\n     */\r\n    updateProgress(position) {\r\n        this.style(this.progressWave, { width: position + 'px' });\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/drawer.multicanvas.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "typedef",
    "name": "CanvasEntry",
    "memberof": "src/drawer.multicanvas.js",
    "static": true,
    "longname": "src/drawer.multicanvas.js~CanvasEntry",
    "access": "private",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "wave",
        "description": "The wave node"
      },
      {
        "nullable": null,
        "types": [
          "CanvasRenderingContext2D"
        ],
        "spread": false,
        "optional": false,
        "name": "waveCtx",
        "description": "The canvas rendering context"
      },
      {
        "nullable": true,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "progress",
        "description": "The progress wave node"
      },
      {
        "nullable": true,
        "types": [
          "CanvasRenderingContext2D"
        ],
        "spread": false,
        "optional": false,
        "name": "progressCtx",
        "description": "The progress wave canvas\nrendering context"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Start of the area the canvas should render, between 0 and 1"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "End of the area the canvas should render, between 0 and 1"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CanvasEntry"
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "class",
    "name": "MultiCanvas",
    "memberof": "src/drawer.multicanvas.js",
    "static": true,
    "longname": "src/drawer.multicanvas.js~MultiCanvas",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/drawer.multicanvas.js",
    "importStyle": "MultiCanvas",
    "description": "MultiCanvas renderer for wavesurfer. Is currently the default and sole built\nin renderer.",
    "lineNumber": 20,
    "interface": false,
    "extends": [
      "src/drawer.js~Drawer"
    ]
  },
  {
    "__docId__": 85,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": "The container node of the wavesurfer instance"
      },
      {
        "nullable": null,
        "types": [
          "WavesurferParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The wavesurfer initialisation options"
      }
    ]
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "maxCanvasWidth",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#maxCanvasWidth",
    "access": "private",
    "description": "",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "maxCanvasElementWidth",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#maxCanvasElementWidth",
    "access": "private",
    "description": "",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "hasProgressCanvas",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#hasProgressCanvas",
    "access": "public",
    "description": "Whether or not the progress wave is renderered. If the `waveColor`\nand `progressColor` are the same colour it is not.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "halfPixel",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#halfPixel",
    "access": "private",
    "description": "",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "member",
    "name": "canvases",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#canvases",
    "access": "private",
    "description": "",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "progressWave",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#progressWave",
    "access": "private",
    "description": null,
    "lineNumber": 57,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "init",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#init",
    "access": "public",
    "description": "Initialise the drawer",
    "lineNumber": 63,
    "params": [],
    "return": null
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "createElements",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#createElements",
    "access": "private",
    "description": "Create the canvas elements and style them",
    "lineNumber": 73,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "updateCursor",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#updateCursor",
    "access": "public",
    "description": "Update cursor style from params.",
    "lineNumber": 97,
    "params": [],
    "return": null
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "updateSize",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#updateSize",
    "access": "public",
    "description": "Adjust to the updated size by adding or removing canvases",
    "lineNumber": 107,
    "params": [],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "addCanvas",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#addCanvas",
    "access": "private",
    "description": "Add a canvas to the canvas list",
    "lineNumber": 142,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "removeCanvas",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#removeCanvas",
    "access": "private",
    "description": "Pop one canvas from the list",
    "lineNumber": 180,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "updateDimensions",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#updateDimensions",
    "access": "private",
    "description": "Update the dimensions of a canvas element",
    "lineNumber": 196,
    "params": [
      {
        "nullable": null,
        "types": [
          "CanvasEntry"
        ],
        "spread": false,
        "optional": false,
        "name": "entry",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "The new width of the element"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "The new height of the element"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "clearWave",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#clearWave",
    "access": "public",
    "description": "Clear the whole waveform",
    "lineNumber": 222,
    "params": [],
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "clearWaveForEntry",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#clearWaveForEntry",
    "access": "private",
    "description": "Clear one canvas",
    "lineNumber": 232,
    "params": [
      {
        "nullable": null,
        "types": [
          "CanvasEntry"
        ],
        "spread": false,
        "optional": false,
        "name": "entry",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "drawBars",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#drawBars",
    "access": "public",
    "description": "Draw a waveform with bars",
    "lineNumber": 261,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]",
          "number[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Can also be an array of arrays for split channel\nrendering"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "channelIndex",
        "description": "The index of the current channel. Normally\nshould be 0. Must be an integer."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The x-offset of the beginning of the area that\nshould be rendered"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "The x-offset of the end of the area that should be\nrendered"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "drawWave",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#drawWave",
    "access": "public",
    "description": "Draw a waveform",
    "lineNumber": 318,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]",
          "number[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Can also be an array of arrays for split channel\nrendering"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "channelIndex",
        "description": "The index of the current channel. Normally\nshould be 0"
      },
      {
        "nullable": null,
        "types": [
          "number?"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The x-offset of the beginning of the area that\nshould be rendered (If this isn't set only a flat line is rendered)"
      },
      {
        "nullable": null,
        "types": [
          "number?"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "The x-offset of the end of the area that should be\nrendered"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "drawLine",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#drawLine",
    "access": "private",
    "description": "Tell the canvas entries to render their portion of the waveform",
    "lineNumber": 366,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Peak data"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "absmax",
        "description": "Maximum peak value (absolute)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "halfH",
        "description": "Half the height of the waveform"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "offsetY",
        "description": "Offset to the top"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The x-offset of the beginning of the area that\nshould be rendered"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "The x-offset of the end of the area that\nshould be rendered"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "drawLineToContext",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#drawLineToContext",
    "access": "private",
    "description": "Render the actual waveform line on a canvas",
    "lineNumber": 407,
    "params": [
      {
        "nullable": null,
        "types": [
          "CanvasEntry"
        ],
        "spread": false,
        "optional": false,
        "name": "entry",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Canvas2DContextAttributes"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "Essentially `entry.[wave|progress]Ctx`"
      },
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "absmax",
        "description": "Maximum peak value (absolute)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "halfH",
        "description": "Half the height of the waveform"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "offsetY",
        "description": "Offset to the top"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The x-offset of the beginning of the area that\nshould be rendered"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "The x-offset of the end of the area that\nshould be rendered"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "fillRect",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#fillRect",
    "access": "public",
    "description": "Draw a rectangle on the waveform",
    "lineNumber": 468,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "prepareDraw",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#prepareDraw",
    "access": "private",
    "description": "Performs preparation tasks and calculations which are shared by drawBars and drawWave",
    "lineNumber": 525,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]",
          "number[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Can also be an array of arrays for split channel\nrendering"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "channelIndex",
        "description": "The index of the current channel. Normally\nshould be 0"
      },
      {
        "nullable": null,
        "types": [
          "number?"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The x-offset of the beginning of the area that\nshould be rendered (If this isn't set only a flat line is rendered)"
      },
      {
        "nullable": null,
        "types": [
          "number?"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "The x-offset of the end of the area that should be\nrendered"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The render function to call"
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "fillRectToContext",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#fillRectToContext",
    "access": "private",
    "description": "Draw the actual rectangle on a canvas",
    "lineNumber": 580,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContextAttributes"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "setFillStyles",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#setFillStyles",
    "access": "private",
    "description": "Set the fill styles for a certain entry (wave and progress)",
    "lineNumber": 593,
    "params": [
      {
        "nullable": null,
        "types": [
          "CanvasEntry"
        ],
        "spread": false,
        "optional": false,
        "name": "entry",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "getImage",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#getImage",
    "access": "public",
    "description": "Return image data of the waveform",
    "lineNumber": 607,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'image/png'",
        "defaultRaw": "'image/png'",
        "name": "type",
        "description": "An optional value of a format type."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "0.92",
        "defaultRaw": 0.92,
        "name": "quality",
        "description": "An optional value between 0 and 1."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "string[]"
      ],
      "spread": false,
      "description": "images A data URL or an array of data URLs"
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "updateProgress",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#updateProgress",
    "access": "public",
    "description": "Render the new progress",
    "lineNumber": 619,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "X-Offset of progress position in pixels"
      }
    ],
    "return": null
  },
  {
    "__docId__": 112,
    "kind": "file",
    "name": "src/html-init.js",
    "content": "import loadScript from 'load-script';\r\n\r\n/**\r\n * @typedef {Object} InitParams\r\n * @property {WavesurferParams} [defaults={backend: 'MediaElement,\r\n * mediaControls: true}] The default wavesurfer initialisation parameters\r\n * @property {string|NodeList} containers='wavesurfer' Selector or NodeList of\r\n * elements to attach instances to\r\n * @property {string}\r\n * pluginCdnTemplate='//localhost:8080/dist/plugin/wavesurfer.[name].js' URL\r\n * template for the dynamic loading of plugins\r\n * @property {function} loadPlugin If set overwrites the default ajax function,\r\n * can be used to inject plugins differently.\r\n */\r\n/**\r\n * The HTML initialisation API is not part of the main library bundle file and\r\n * must be additionally included.\r\n *\r\n * The API attaches wavesurfer instances to all `<wavesurfer>` (can be\r\n * customised), parsing their `data-` attributes to construct an options object\r\n * for initialisation. Among other things it can dynamically load plugin code.\r\n *\r\n * The automatic initialisation can be prevented by setting the\r\n * `window.WS_StopAutoInit` flag to true. The `html-init[.min].js` file exports\r\n * the `Init` class, which can be called manually.\r\n *\r\n * Site-wide defaults can be added by setting `window.WS_InitOptions`.\r\n *\r\n * @example\r\n * <!-- with minimap and timeline plugin -->\r\n * <wavesurfer\r\n *   data-url=\"../media/demo.wav\"\r\n *   data-plugins=\"minimap,timeline\"\r\n *   data-minimap-height=\"30\"\r\n *   data-minimap-wave-color=\"#ddd\"\r\n *   data-minimap-progress-color=\"#999\"\r\n *   data-timeline-font-size=\"13px\"\r\n *   data-timeline-container=\"#timeline\"\r\n * >\r\n * </wavesurfer>\r\n * <div id=\"timeline\"></div>\r\n *\r\n * <!-- with regions plugin -->\r\n * <wavesurfer\r\n *   data-url=\"../media/demo.wav\"\r\n *   data-plugins=\"regions\"\r\n *   data-regions-regions='[{\"start\": 1,\"end\": 3,\"color\": \"hsla(400, 100%, 30%, 0.5)\"}]'\r\n * >\r\n * </wavesurfer>\r\n */\r\nclass Init {\r\n    /**\r\n     * Instantiate Init class and initialise elements\r\n     *\r\n     * This is done automatically if `window` is defined and\r\n     * `window.WS_StopAutoInit` is not set to true\r\n     *\r\n     * @param {WaveSurfer} WaveSurfer The WaveSurfer library object\r\n     * @param {InitParams} params initialisation options\r\n     */\r\n    constructor(WaveSurfer, params = {}) {\r\n        if (!WaveSurfer) {\r\n            throw new Error('WaveSurfer is not available!');\r\n        }\r\n\r\n        /**\r\n         * cache WaveSurfer\r\n         * @private\r\n         */\r\n        this.WaveSurfer = WaveSurfer;\r\n\r\n        /**\r\n         * build parameters, cache them in _params so minified builds are smaller\r\n         * @private\r\n         */\r\n        const _params = (this.params = WaveSurfer.util.extend(\r\n            {},\r\n            {\r\n                // wavesurfer parameter defaults so by default the audio player is\r\n                // usable with native media element controls\r\n                defaults: {\r\n                    backend: 'MediaElement',\r\n                    mediaControls: true\r\n                },\r\n                // containers to instantiate on, can be selector string or NodeList\r\n                containers: 'wavesurfer',\r\n                // @TODO insert plugin CDN URIs\r\n                pluginCdnTemplate:\r\n                    '//localhost:8080/dist/plugin/wavesurfer.[name].js',\r\n                // loadPlugin function can be overriden to inject plugin definition\r\n                // objects, this default function uses load-script to load a plugin\r\n                // and pass it to a callback\r\n                loadPlugin(name, cb) {\r\n                    const src = _params.pluginCdnTemplate.replace(\r\n                        '[name]',\r\n                        name\r\n                    );\r\n                    loadScript(src, { async: false }, (err, plugin) => {\r\n                        if (err) {\r\n                            return console.error(\r\n                                `WaveSurfer plugin ${name} not found at ${src}`\r\n                            );\r\n                        }\r\n                        cb(window.WaveSurfer[name]);\r\n                    });\r\n                }\r\n            },\r\n            params\r\n        ));\r\n        /**\r\n         * The nodes that should have instances attached to them\r\n         * @type {NodeList}\r\n         */\r\n        this.containers =\r\n            typeof _params.containers == 'string'\r\n                ? document.querySelectorAll(_params.containers)\r\n                : _params.containers;\r\n        /** @private */\r\n        this.pluginCache = {};\r\n        /**\r\n         * An array of wavesurfer instances\r\n         * @type {Object[]}\r\n         */\r\n        this.instances = [];\r\n\r\n        this.initAllEls();\r\n    }\r\n\r\n    /**\r\n     * Initialise all container elements\r\n     */\r\n    initAllEls() {\r\n        // iterate over all the container elements\r\n        Array.prototype.forEach.call(this.containers, el => {\r\n            // load the plugins as an array of plugin names\r\n            const plugins = el.dataset.plugins\r\n                ? el.dataset.plugins.split(',')\r\n                : [];\r\n\r\n            // no plugins to be loaded, just render\r\n            if (!plugins.length) {\r\n                return this.initEl(el);\r\n            }\r\n            // … or: iterate over all the plugins\r\n            plugins.forEach((name, i) => {\r\n                // plugin is not cached already, load it\r\n                if (!this.pluginCache[name]) {\r\n                    this.params.loadPlugin(name, lib => {\r\n                        this.pluginCache[name] = lib;\r\n                        // plugins were all loaded, render the element\r\n                        if (i + 1 === plugins.length) {\r\n                            this.initEl(el, plugins);\r\n                        }\r\n                    });\r\n                } else if (i === plugins.length) {\r\n                    // plugin was cached and this plugin was the last\r\n                    this.initEl(el, plugins);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initialise a single container element and add to `this.instances`\r\n     *\r\n     * @param  {HTMLElement} el The container to instantiate wavesurfer to\r\n     * @param  {PluginDefinition[]} plugins An Array of plugin names to initialise with\r\n     * @return {Object} Wavesurfer instance\r\n     */\r\n    initEl(el, plugins = []) {\r\n        const jsonRegex = /^[[|{]/;\r\n        // initialise plugins with the correct options\r\n        const initialisedPlugins = plugins.map(plugin => {\r\n            const options = {};\r\n            // the regex to find this plugin attributes\r\n            const attrNameRegex = new RegExp('^' + plugin);\r\n            let attrName;\r\n            // iterate over all the data attributes and find ones for this\r\n            // plugin\r\n            for (attrName in el.dataset) {\r\n                const regexResult = attrNameRegex.exec(attrName);\r\n                if (regexResult) {\r\n                    const attr = el.dataset[attrName];\r\n                    // if the string begins with a [ or a { parse it as JSON\r\n                    const prop = jsonRegex.test(attr) ? JSON.parse(attr) : attr;\r\n                    // this removes the plugin prefix and changes the first letter\r\n                    // of the resulting string to lower case to follow the naming\r\n                    // convention of ws params\r\n                    const unprefixedOptionName =\r\n                        attrName\r\n                            .slice(plugin.length, plugin.length + 1)\r\n                            .toLowerCase() + attrName.slice(plugin.length + 1);\r\n                    options[unprefixedOptionName] = prop;\r\n                }\r\n            }\r\n            return this.pluginCache[plugin].create(options);\r\n        });\r\n        // build parameter object for this container\r\n        const params = this.WaveSurfer.util.extend(\r\n            { container: el },\r\n            this.params.defaults,\r\n            el.dataset,\r\n            { plugins: initialisedPlugins }\r\n        );\r\n\r\n        // @TODO make nicer\r\n        el.style.display = 'block';\r\n\r\n        // initialise wavesurfer, load audio (with peaks if provided)\r\n        const instance = this.WaveSurfer.create(params);\r\n        const peaks = params.peaks ? JSON.parse(params.peaks) : undefined;\r\n        instance.load(params.url, peaks);\r\n\r\n        // push this instance into the instances cache\r\n        this.instances.push(instance);\r\n        return instance;\r\n    }\r\n}\r\n\r\n// if window object exists and window.WS_StopAutoInit is not true\r\nif (typeof window === 'object' && !window.WS_StopAutoInit) {\r\n    // call init when document is ready, apply any custom default settings\r\n    // in window.WS_InitOptions\r\n    if (document.readyState === 'complete') {\r\n        window.WaveSurferInit = new Init(\r\n            window.WaveSurfer,\r\n            window.WS_InitOptions\r\n        );\r\n    } else {\r\n        window.addEventListener('load', () => {\r\n            window.WaveSurferInit = new Init(\r\n                window.WaveSurfer,\r\n                window.WS_InitOptions\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\n// export init for manual usage\r\nexport default Init;\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/html-init.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 113,
    "kind": "typedef",
    "name": "InitParams",
    "memberof": "src/html-init.js",
    "static": true,
    "longname": "src/html-init.js~InitParams",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "WavesurferParams"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{backend: 'MediaElement,\nmediaControls: true}",
        "defaultRaw": "{backend: 'MediaElement,\nmediaControls: true}",
        "name": "defaults",
        "description": "The default wavesurfer initialisation parameters"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "NodeList"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'wavesurfer'",
        "defaultRaw": "'wavesurfer'",
        "name": "containers",
        "description": "Selector or NodeList of\nelements to attach instances to"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'//localhost:8080/dist/plugin/wavesurfer.[name].js'",
        "defaultRaw": "'//localhost:8080/dist/plugin/wavesurfer.[name].js'",
        "name": "pluginCdnTemplate",
        "description": "URL\ntemplate for the dynamic loading of plugins"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "loadPlugin",
        "description": "If set overwrites the default ajax function,\ncan be used to inject plugins differently."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "InitParams"
    }
  },
  {
    "__docId__": 114,
    "kind": "class",
    "name": "Init",
    "memberof": "src/html-init.js",
    "static": true,
    "longname": "src/html-init.js~Init",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/html-init.js",
    "importStyle": "Init",
    "description": "The HTML initialisation API is not part of the main library bundle file and\nmust be additionally included.\n\nThe API attaches wavesurfer instances to all `<wavesurfer>` (can be\ncustomised), parsing their `data-` attributes to construct an options object\nfor initialisation. Among other things it can dynamically load plugin code.\n\nThe automatic initialisation can be prevented by setting the\n`window.WS_StopAutoInit` flag to true. The `html-init[.min].js` file exports\nthe `Init` class, which can be called manually.\n\nSite-wide defaults can be added by setting `window.WS_InitOptions`.",
    "examples": [
      "<!-- with minimap and timeline plugin -->\n<wavesurfer\n  data-url=\"../media/demo.wav\"\n  data-plugins=\"minimap,timeline\"\n  data-minimap-height=\"30\"\n  data-minimap-wave-color=\"#ddd\"\n  data-minimap-progress-color=\"#999\"\n  data-timeline-font-size=\"13px\"\n  data-timeline-container=\"#timeline\"\n>\n</wavesurfer>\n<div id=\"timeline\"></div>\n\n<!-- with regions plugin -->\n<wavesurfer\n  data-url=\"../media/demo.wav\"\n  data-plugins=\"regions\"\n  data-regions-regions='[{\"start\": 1,\"end\": 3,\"color\": \"hsla(400, 100%, 30%, 0.5)\"}]'\n>\n</wavesurfer>"
    ],
    "lineNumber": 51,
    "interface": false
  },
  {
    "__docId__": 115,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/html-init.js~Init",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/html-init.js~Init#constructor",
    "access": "public",
    "description": "Instantiate Init class and initialise elements\n\nThis is done automatically if `window` is defined and\n`window.WS_StopAutoInit` is not set to true",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "WaveSurfer"
        ],
        "spread": false,
        "optional": false,
        "name": "WaveSurfer",
        "description": "The WaveSurfer library object"
      },
      {
        "nullable": null,
        "types": [
          "InitParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "initialisation options"
      }
    ]
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "WaveSurfer",
    "memberof": "src/html-init.js~Init",
    "static": false,
    "longname": "src/html-init.js~Init#WaveSurfer",
    "access": "private",
    "description": "cache WaveSurfer",
    "lineNumber": 70,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "containers",
    "memberof": "src/html-init.js~Init",
    "static": false,
    "longname": "src/html-init.js~Init#containers",
    "access": "public",
    "description": "The nodes that should have instances attached to them",
    "lineNumber": 114,
    "type": {
      "nullable": null,
      "types": [
        "NodeList"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "pluginCache",
    "memberof": "src/html-init.js~Init",
    "static": false,
    "longname": "src/html-init.js~Init#pluginCache",
    "access": "private",
    "description": null,
    "lineNumber": 119,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "instances",
    "memberof": "src/html-init.js~Init",
    "static": false,
    "longname": "src/html-init.js~Init#instances",
    "access": "public",
    "description": "An array of wavesurfer instances",
    "lineNumber": 124,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "initAllEls",
    "memberof": "src/html-init.js~Init",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/html-init.js~Init#initAllEls",
    "access": "public",
    "description": "Initialise all container elements",
    "lineNumber": 132,
    "params": [],
    "return": null
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "initEl",
    "memberof": "src/html-init.js~Init",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/html-init.js~Init#initEl",
    "access": "public",
    "description": "Initialise a single container element and add to `this.instances`",
    "lineNumber": 170,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "el",
        "description": "The container to instantiate wavesurfer to"
      },
      {
        "nullable": null,
        "types": [
          "PluginDefinition[]"
        ],
        "spread": false,
        "optional": false,
        "name": "plugins",
        "description": "An Array of plugin names to initialise with"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Wavesurfer instance"
    }
  },
  {
    "__docId__": 122,
    "kind": "file",
    "name": "src/mediaelement.js",
    "content": "import WebAudio from './webaudio';\r\nimport * as util from './util';\r\n\r\n/**\r\n * MediaElement backend\r\n */\r\nexport default class MediaElement extends WebAudio {\r\n    /**\r\n     * Construct the backend\r\n     *\r\n     * @param {WavesurferParams} params\r\n     */\r\n    constructor(params) {\r\n        super(params);\r\n        /** @private */\r\n        this.params = params;\r\n\r\n        // Dummy media to catch errors\r\n        /** @private */\r\n        this.media = {\r\n            currentTime: 0,\r\n            duration: 0,\r\n            paused: true,\r\n            playbackRate: 1,\r\n            play() {},\r\n            pause() {},\r\n            volume: 0\r\n        };\r\n\r\n        /** @private */\r\n        this.mediaType = params.mediaType.toLowerCase();\r\n        /** @private */\r\n        this.elementPosition = params.elementPosition;\r\n        /** @private */\r\n        this.peaks = null;\r\n        /** @private */\r\n        this.playbackRate = 1;\r\n        /** @private */\r\n        this.volume = 1;\r\n        /** @private */\r\n        this.buffer = null;\r\n        /** @private */\r\n        this.onPlayEnd = null;\r\n    }\r\n\r\n    /**\r\n     * Initialise the backend, called in `wavesurfer.createBackend()`\r\n     */\r\n    init() {\r\n        this.setPlaybackRate(this.params.audioRate);\r\n        this.createTimer();\r\n    }\r\n\r\n    /**\r\n     * Create a timer to provide a more precise `audioprocess` event.\r\n     *\r\n     * @private\r\n     */\r\n    createTimer() {\r\n        const onAudioProcess = () => {\r\n            if (this.isPaused()) {\r\n                return;\r\n            }\r\n            this.fireEvent('audioprocess', this.getCurrentTime());\r\n\r\n            // Call again in the next frame\r\n            const requestAnimationFrame =\r\n                window.requestAnimationFrame ||\r\n                window.webkitRequestAnimationFrame;\r\n            requestAnimationFrame(onAudioProcess);\r\n        };\r\n\r\n        this.on('play', onAudioProcess);\r\n\r\n        // Update the progress one more time to prevent it from being stuck in case of lower framerates\r\n        this.on('pause', () => {\r\n            this.fireEvent('audioprocess', this.getCurrentTime());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create media element with url as its source,\r\n     * and append to container element.\r\n     *\r\n     * @param {string} url Path to media file\r\n     * @param {HTMLElement} container HTML element\r\n     * @param {number[]|number[][]} peaks Array of peak data\r\n     * @param {string} preload HTML 5 preload attribute value\r\n     */\r\n    load(url, container, peaks, preload) {\r\n        const media = document.createElement(this.mediaType);\r\n        media.controls = this.params.mediaControls;\r\n        media.autoplay = this.params.autoplay || false;\r\n        media.preload = preload == null ? 'auto' : preload;\r\n        media.src = url;\r\n        media.style.width = '100%';\r\n\r\n        const prevMedia = container.querySelector(this.mediaType);\r\n        if (prevMedia) {\r\n            container.removeChild(prevMedia);\r\n        }\r\n        container.appendChild(media);\r\n\r\n        this._load(media, peaks);\r\n    }\r\n\r\n    /**\r\n     * Load existing media element.\r\n     *\r\n     * @param {HTMLMediaElement} elt HTML5 Audio or Video element\r\n     * @param {number[]|number[][]} peaks Array of peak data\r\n     */\r\n    loadElt(elt, peaks) {\r\n        elt.controls = this.params.mediaControls;\r\n        elt.autoplay = this.params.autoplay || false;\r\n\r\n        this._load(elt, peaks);\r\n    }\r\n\r\n    /**\r\n     * Private method called by both load (from url)\r\n     * and loadElt (existing media element).\r\n     *\r\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\r\n     * @param {number[]|number[][]} peaks Array of peak data\r\n     * @private\r\n     */\r\n    _load(media, peaks) {\r\n        // load must be called manually on iOS, otherwise peaks won't draw\r\n        // until a user interaction triggers load --> 'ready' event\r\n        if (typeof media.load == 'function') {\r\n            // Resets the media element and restarts the media resource. Any\r\n            // pending events are discarded. How much media data is fetched is\r\n            // still affected by the preload attribute.\r\n            media.load();\r\n        }\r\n\r\n        media.addEventListener('error', () => {\r\n            this.fireEvent('error', 'Error loading media element');\r\n        });\r\n\r\n        media.addEventListener('canplay', () => {\r\n            this.fireEvent('canplay');\r\n        });\r\n\r\n        media.addEventListener('ended', () => {\r\n            this.fireEvent('finish');\r\n        });\r\n\r\n        // Listen to and relay play and pause events to enable\r\n        // playback control from the external media element\r\n        media.addEventListener('play', () => {\r\n            this.fireEvent('play');\r\n        });\r\n\r\n        media.addEventListener('pause', () => {\r\n            this.fireEvent('pause');\r\n        });\r\n\r\n        this.media = media;\r\n        this.peaks = peaks;\r\n        this.onPlayEnd = null;\r\n        this.buffer = null;\r\n        this.setPlaybackRate(this.playbackRate);\r\n        this.setVolume(this.volume);\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    isPaused() {\r\n        return !this.media || this.media.paused;\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.getDuration()`\r\n     *\r\n     * @return {number}\r\n     */\r\n    getDuration() {\r\n        if (this.explicitDuration) {\r\n            return this.explicitDuration;\r\n        }\r\n        let duration = (this.buffer || this.media).duration;\r\n        if (duration >= Infinity) {\r\n            // streaming audio\r\n            duration = this.media.seekable.end(0);\r\n        }\r\n        return duration;\r\n    }\r\n\r\n    /**\r\n     * Returns the current time in seconds relative to the audioclip's\r\n     * duration.\r\n     *\r\n     * @return {number}\r\n     */\r\n    getCurrentTime() {\r\n        return this.media && this.media.currentTime;\r\n    }\r\n\r\n    /**\r\n     * Get the position from 0 to 1\r\n     *\r\n     * @return {number}\r\n     */\r\n    getPlayedPercents() {\r\n        return this.getCurrentTime() / this.getDuration() || 0;\r\n    }\r\n\r\n    /**\r\n     * Get the audio source playback rate.\r\n     *\r\n     * @return {number}\r\n     */\r\n    getPlaybackRate() {\r\n        return this.playbackRate || this.media.playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Set the audio source playback rate.\r\n     *\r\n     * @param {number} value\r\n     */\r\n    setPlaybackRate(value) {\r\n        this.playbackRate = value || 1;\r\n        this.media.playbackRate = this.playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.seekTo()`\r\n     *\r\n     * @param {number} start Position to start at in seconds\r\n     */\r\n    seekTo(start) {\r\n        if (start != null) {\r\n            this.media.currentTime = start;\r\n        }\r\n        this.clearPlayEnd();\r\n    }\r\n\r\n    /**\r\n     * Plays the loaded audio region.\r\n     *\r\n     * @param {number} start Start offset in seconds, relative to the beginning\r\n     * of a clip.\r\n     * @param {number} end When to stop, relative to the beginning of a clip.\r\n     * @emits MediaElement#play\r\n     * @return {Promise}\r\n     */\r\n    play(start, end) {\r\n        this.seekTo(start);\r\n        const promise = this.media.play();\r\n        end && this.setPlayEnd(end);\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Pauses the loaded audio.\r\n     *\r\n     * @emits MediaElement#pause\r\n     * @return {Promise}\r\n     */\r\n    pause() {\r\n        let promise;\r\n\r\n        if (this.media) {\r\n            promise = this.media.pause();\r\n        }\r\n        this.clearPlayEnd();\r\n\r\n        return promise;\r\n    }\r\n\r\n    /** @private */\r\n    setPlayEnd(end) {\r\n        this._onPlayEnd = time => {\r\n            if (time >= end) {\r\n                this.pause();\r\n                this.seekTo(end);\r\n            }\r\n        };\r\n        this.on('audioprocess', this._onPlayEnd);\r\n    }\r\n\r\n    /** @private */\r\n    clearPlayEnd() {\r\n        if (this._onPlayEnd) {\r\n            this.un('audioprocess', this._onPlayEnd);\r\n            this._onPlayEnd = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compute the max and min value of the waveform when broken into\r\n     * <length> subranges.\r\n     *\r\n     * @param {number} length How many subranges to break the waveform into.\r\n     * @param {number} first First sample in the required range.\r\n     * @param {number} last Last sample in the required range.\r\n     * @return {number[]|number[][]} Array of 2*<length> peaks or array of\r\n     * arrays of peaks consisting of (max, min) values for each subrange.\r\n     */\r\n    getPeaks(length, first, last) {\r\n        if (this.buffer) {\r\n            return super.getPeaks(length, first, last);\r\n        }\r\n        return this.peaks || [];\r\n    }\r\n\r\n    /**\r\n     * Set the sink id for the media player\r\n     *\r\n     * @param {string} deviceId String value representing audio device id.\r\n     */\r\n    setSinkId(deviceId) {\r\n        if (deviceId) {\r\n            if (!this.media.setSinkId) {\r\n                return Promise.reject(\r\n                    new Error('setSinkId is not supported in your browser')\r\n                );\r\n            }\r\n            return this.media.setSinkId(deviceId);\r\n        }\r\n\r\n        return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\r\n    }\r\n\r\n    /**\r\n     * Get the current volume\r\n     *\r\n     * @return {number} value A floating point value between 0 and 1.\r\n     */\r\n    getVolume() {\r\n        return this.volume || this.media.volume;\r\n    }\r\n\r\n    /**\r\n     * Set the audio volume\r\n     *\r\n     * @param {number} value A floating point value between 0 and 1.\r\n     */\r\n    setVolume(value) {\r\n        this.volume = value;\r\n        this.media.volume = this.volume;\r\n    }\r\n\r\n    /**\r\n     * This is called when wavesurfer is destroyed\r\n     *\r\n     */\r\n    destroy() {\r\n        this.pause();\r\n        this.unAll();\r\n\r\n        if (\r\n            this.params.removeMediaElementOnDestroy &&\r\n            this.media &&\r\n            this.media.parentNode\r\n        ) {\r\n            this.media.parentNode.removeChild(this.media);\r\n        }\r\n\r\n        this.media = null;\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/mediaelement.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 123,
    "kind": "class",
    "name": "MediaElement",
    "memberof": "src/mediaelement.js",
    "static": true,
    "longname": "src/mediaelement.js~MediaElement",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/mediaelement.js",
    "importStyle": "MediaElement",
    "description": "MediaElement backend",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/webaudio.js~WebAudio"
    ]
  },
  {
    "__docId__": 124,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#constructor",
    "access": "public",
    "description": "Construct the backend",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "WavesurferParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "params",
    "memberof": "src/mediaelement.js~MediaElement",
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#params",
    "access": "private",
    "description": null,
    "lineNumber": 16,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "media",
    "memberof": "src/mediaelement.js~MediaElement",
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#media",
    "access": "private",
    "description": null,
    "lineNumber": 20,
    "ignore": true,
    "type": {
      "types": [
        "{\"currentTime\": *, \"duration\": *, \"paused\": boolean, \"playbackRate\": number, \"play\": function, \"pause\": function, \"volume\": *}"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "mediaType",
    "memberof": "src/mediaelement.js~MediaElement",
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#mediaType",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "elementPosition",
    "memberof": "src/mediaelement.js~MediaElement",
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#elementPosition",
    "access": "private",
    "description": null,
    "lineNumber": 33,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "peaks",
    "memberof": "src/mediaelement.js~MediaElement",
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#peaks",
    "access": "private",
    "description": null,
    "lineNumber": 35,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "playbackRate",
    "memberof": "src/mediaelement.js~MediaElement",
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#playbackRate",
    "access": "private",
    "description": null,
    "lineNumber": 37,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "volume",
    "memberof": "src/mediaelement.js~MediaElement",
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#volume",
    "access": "private",
    "description": null,
    "lineNumber": 39,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "buffer",
    "memberof": "src/mediaelement.js~MediaElement",
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#buffer",
    "access": "private",
    "description": null,
    "lineNumber": 41,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "onPlayEnd",
    "memberof": "src/mediaelement.js~MediaElement",
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#onPlayEnd",
    "access": "private",
    "description": null,
    "lineNumber": 43,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "init",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#init",
    "access": "public",
    "description": "Initialise the backend, called in `wavesurfer.createBackend()`",
    "lineNumber": 49,
    "params": [],
    "return": null
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "createTimer",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#createTimer",
    "access": "private",
    "description": "Create a timer to provide a more precise `audioprocess` event.",
    "lineNumber": 59,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "load",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#load",
    "access": "public",
    "description": "Create media element with url as its source,\nand append to container element.",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "Path to media file"
      },
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": "HTML element"
      },
      {
        "nullable": null,
        "types": [
          "number[]",
          "number[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Array of peak data"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "preload",
        "description": "HTML 5 preload attribute value"
      }
    ],
    "return": null
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "loadElt",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#loadElt",
    "access": "public",
    "description": "Load existing media element.",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLMediaElement"
        ],
        "spread": false,
        "optional": false,
        "name": "elt",
        "description": "HTML5 Audio or Video element"
      },
      {
        "nullable": null,
        "types": [
          "number[]",
          "number[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Array of peak data"
      }
    ],
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "_load",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#_load",
    "access": "private",
    "description": "Private method called by both load (from url)\nand loadElt (existing media element).",
    "lineNumber": 128,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLMediaElement"
        ],
        "spread": false,
        "optional": false,
        "name": "media",
        "description": "HTML5 Audio or Video element"
      },
      {
        "nullable": null,
        "types": [
          "number[]",
          "number[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Array of peak data"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "isPaused",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#isPaused",
    "access": "public",
    "description": "Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`",
    "lineNumber": 173,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "getDuration",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#getDuration",
    "access": "public",
    "description": "Used by `wavesurfer.getDuration()`",
    "lineNumber": 182,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "getCurrentTime",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#getCurrentTime",
    "access": "public",
    "description": "Returns the current time in seconds relative to the audioclip's\nduration.",
    "lineNumber": 200,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "getPlayedPercents",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#getPlayedPercents",
    "access": "public",
    "description": "Get the position from 0 to 1",
    "lineNumber": 209,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "getPlaybackRate",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#getPlaybackRate",
    "access": "public",
    "description": "Get the audio source playback rate.",
    "lineNumber": 218,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "setPlaybackRate",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#setPlaybackRate",
    "access": "public",
    "description": "Set the audio source playback rate.",
    "lineNumber": 227,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "seekTo",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#seekTo",
    "access": "public",
    "description": "Used by `wavesurfer.seekTo()`",
    "lineNumber": 237,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Position to start at in seconds"
      }
    ],
    "return": null
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "play",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#play",
    "access": "public",
    "description": "Plays the loaded audio region.",
    "lineNumber": 253,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Start offset in seconds, relative to the beginning\nof a clip."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "When to stop, relative to the beginning of a clip."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "MediaElement#play"
      }
    ]
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "pause",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#pause",
    "access": "public",
    "description": "Pauses the loaded audio.",
    "lineNumber": 267,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "MediaElement#pause"
      }
    ],
    "params": []
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "setPlayEnd",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#setPlayEnd",
    "access": "private",
    "description": null,
    "lineNumber": 279,
    "ignore": true,
    "params": [
      {
        "name": "end",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 154,
    "kind": "member",
    "name": "_onPlayEnd",
    "memberof": "src/mediaelement.js~MediaElement",
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#_onPlayEnd",
    "access": "private",
    "description": null,
    "lineNumber": 280,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "clearPlayEnd",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#clearPlayEnd",
    "access": "private",
    "description": null,
    "lineNumber": 290,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "getPeaks",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#getPeaks",
    "access": "public",
    "description": "Compute the max and min value of the waveform when broken into\n<length> subranges.",
    "lineNumber": 307,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "How many subranges to break the waveform into."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "first",
        "description": "First sample in the required range."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "last",
        "description": "Last sample in the required range."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]",
        "number[][]"
      ],
      "spread": false,
      "description": "Array of 2*<length> peaks or array of\narrays of peaks consisting of (max, min) values for each subrange."
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "setSinkId",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#setSinkId",
    "access": "public",
    "description": "Set the sink id for the media player",
    "lineNumber": 319,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": "String value representing audio device id."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "getVolume",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#getVolume",
    "access": "public",
    "description": "Get the current volume",
    "lineNumber": 337,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "value A floating point value between 0 and 1."
    },
    "params": []
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "setVolume",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#setVolume",
    "access": "public",
    "description": "Set the audio volume",
    "lineNumber": 346,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "A floating point value between 0 and 1."
      }
    ],
    "return": null
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#destroy",
    "access": "public",
    "description": "This is called when wavesurfer is destroyed",
    "lineNumber": 355,
    "params": [],
    "return": null
  },
  {
    "__docId__": 164,
    "kind": "file",
    "name": "src/peakcache.js",
    "content": "/**\r\n * Caches the decoded peaks data to improve rendering speed for lage audio\r\n *\r\n * Is used if the option parameter `partialRender` is set to `true`\r\n */\r\nexport default class PeakCache {\r\n    /**\r\n     * Instantiate cache\r\n     */\r\n    constructor() {\r\n        this.clearPeakCache();\r\n    }\r\n\r\n    /**\r\n     * Empty the cache\r\n     */\r\n    clearPeakCache() {\r\n        /**\r\n         * Flat array with entries that are always in pairs to mark the\r\n         * beginning and end of each subrange.  This is a convenience so we can\r\n         * iterate over the pairs for easy set difference operations.\r\n         * @private\r\n         */\r\n        this.peakCacheRanges = [];\r\n        /**\r\n         * Length of the entire cachable region, used for resetting the cache\r\n         * when this changes (zoom events, for instance).\r\n         * @private\r\n         */\r\n        this.peakCacheLength = -1;\r\n    }\r\n\r\n    /**\r\n     * Add a range of peaks to the cache\r\n     *\r\n     * @param {number} length The length of the range\r\n     * @param {number} start The x offset of the start of the range\r\n     * @param {number} end The x offset of the end of the range\r\n     * @return {number[][]}\r\n     */\r\n    addRangeToPeakCache(length, start, end) {\r\n        if (length != this.peakCacheLength) {\r\n            this.clearPeakCache();\r\n            this.peakCacheLength = length;\r\n        }\r\n\r\n        // Return ranges that weren't in the cache before the call.\r\n        let uncachedRanges = [];\r\n        let i = 0;\r\n        // Skip ranges before the current start.\r\n        while (\r\n            i < this.peakCacheRanges.length &&\r\n            this.peakCacheRanges[i] < start\r\n        ) {\r\n            i++;\r\n        }\r\n        // If |i| is even, |start| falls after an existing range.  Otherwise,\r\n        // |start| falls between an existing range, and the uncached region\r\n        // starts when we encounter the next node in |peakCacheRanges| or\r\n        // |end|, whichever comes first.\r\n        if (i % 2 == 0) {\r\n            uncachedRanges.push(start);\r\n        }\r\n        while (\r\n            i < this.peakCacheRanges.length &&\r\n            this.peakCacheRanges[i] <= end\r\n        ) {\r\n            uncachedRanges.push(this.peakCacheRanges[i]);\r\n            i++;\r\n        }\r\n        // If |i| is even, |end| is after all existing ranges.\r\n        if (i % 2 == 0) {\r\n            uncachedRanges.push(end);\r\n        }\r\n\r\n        // Filter out the 0-length ranges.\r\n        uncachedRanges = uncachedRanges.filter((item, pos, arr) => {\r\n            if (pos == 0) {\r\n                return item != arr[pos + 1];\r\n            } else if (pos == arr.length - 1) {\r\n                return item != arr[pos - 1];\r\n            }\r\n            return item != arr[pos - 1] && item != arr[pos + 1];\r\n        });\r\n\r\n        // Merge the two ranges together, uncachedRanges will either contain\r\n        // wholly new points, or duplicates of points in peakCacheRanges.  If\r\n        // duplicates are detected, remove both and extend the range.\r\n        this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges);\r\n        this.peakCacheRanges = this.peakCacheRanges\r\n            .sort((a, b) => a - b)\r\n            .filter((item, pos, arr) => {\r\n                if (pos == 0) {\r\n                    return item != arr[pos + 1];\r\n                } else if (pos == arr.length - 1) {\r\n                    return item != arr[pos - 1];\r\n                }\r\n                return item != arr[pos - 1] && item != arr[pos + 1];\r\n            });\r\n\r\n        // Push the uncached ranges into an array of arrays for ease of\r\n        // iteration in the functions that call this.\r\n        const uncachedRangePairs = [];\r\n        for (i = 0; i < uncachedRanges.length; i += 2) {\r\n            uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i + 1]]);\r\n        }\r\n\r\n        return uncachedRangePairs;\r\n    }\r\n\r\n    /**\r\n     * For testing\r\n     *\r\n     * @return {number[][]}\r\n     */\r\n    getCacheRanges() {\r\n        const peakCacheRangePairs = [];\r\n        let i;\r\n        for (i = 0; i < this.peakCacheRanges.length; i += 2) {\r\n            peakCacheRangePairs.push([\r\n                this.peakCacheRanges[i],\r\n                this.peakCacheRanges[i + 1]\r\n            ]);\r\n        }\r\n        return peakCacheRangePairs;\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/peakcache.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 165,
    "kind": "class",
    "name": "PeakCache",
    "memberof": "src/peakcache.js",
    "static": true,
    "longname": "src/peakcache.js~PeakCache",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/peakcache.js",
    "importStyle": "PeakCache",
    "description": "Caches the decoded peaks data to improve rendering speed for lage audio\n\nIs used if the option parameter `partialRender` is set to `true`",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 166,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/peakcache.js~PeakCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/peakcache.js~PeakCache#constructor",
    "access": "public",
    "description": "Instantiate cache",
    "lineNumber": 10
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "clearPeakCache",
    "memberof": "src/peakcache.js~PeakCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/peakcache.js~PeakCache#clearPeakCache",
    "access": "public",
    "description": "Empty the cache",
    "lineNumber": 17,
    "params": [],
    "return": null
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "peakCacheRanges",
    "memberof": "src/peakcache.js~PeakCache",
    "static": false,
    "longname": "src/peakcache.js~PeakCache#peakCacheRanges",
    "access": "private",
    "description": "Flat array with entries that are always in pairs to mark the\nbeginning and end of each subrange.  This is a convenience so we can\niterate over the pairs for easy set difference operations.",
    "lineNumber": 24,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "peakCacheLength",
    "memberof": "src/peakcache.js~PeakCache",
    "static": false,
    "longname": "src/peakcache.js~PeakCache#peakCacheLength",
    "access": "private",
    "description": "Length of the entire cachable region, used for resetting the cache\nwhen this changes (zoom events, for instance).",
    "lineNumber": 30,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "addRangeToPeakCache",
    "memberof": "src/peakcache.js~PeakCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/peakcache.js~PeakCache#addRangeToPeakCache",
    "access": "public",
    "description": "Add a range of peaks to the cache",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "The length of the range"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The x offset of the start of the range"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "The x offset of the end of the range"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[][]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "getCacheRanges",
    "memberof": "src/peakcache.js~PeakCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/peakcache.js~PeakCache#getCacheRanges",
    "access": "public",
    "description": "For testing",
    "lineNumber": 116,
    "return": {
      "nullable": null,
      "types": [
        "number[][]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 175,
    "kind": "file",
    "name": "src/plugin/cursor.js",
    "content": "/**\r\n * @typedef {Object} CursorPluginParams\r\n * @property {?boolean} deferInit Set to true to stop auto init in `addPlugin()`\r\n * @property {boolean} hideOnBlur=true Hide the cursor when the mouse leaves the\r\n * waveform\r\n * @property {string} width='1px' The width of the cursor\r\n * @property {string} color='black' The color of the cursor\r\n * @property {string} opacity='0.25' The opacity of the cursor\r\n * @property {string} style='solid' The border style of the cursor\r\n * @property {number} zIndex=3 The z-index of the cursor element\r\n * @property {object} customStyle An object with custom styles which are applied\r\n * to the cursor element\r\n */\r\n\r\n/**\r\n * Displays a thin line at the position of the cursor on the waveform.\r\n *\r\n * @implements {PluginClass}\r\n * @extends {Observer}\r\n * @example\r\n * // es6\r\n * import CursorPlugin from 'wavesurfer.cursor.js';\r\n *\r\n * // commonjs\r\n * var CursorPlugin = require('wavesurfer.cursor.js');\r\n *\r\n * // if you are using <script> tags\r\n * var CursorPlugin = window.WaveSurfer.cursor;\r\n *\r\n * // ... initialising wavesurfer with the plugin\r\n * var wavesurfer = WaveSurfer.create({\r\n *   // wavesurfer options ...\r\n *   plugins: [\r\n *     CursorPlugin.create({\r\n *       // plugin options ...\r\n *     })\r\n *   ]\r\n * });\r\n */\r\nexport default class CursorPlugin {\r\n    /**\r\n     * Cursor plugin definition factory\r\n     *\r\n     * This function must be used to create a plugin definition which can be\r\n     * used by wavesurfer to correctly instantiate the plugin.\r\n     *\r\n     * @param  {CursorPluginParams} params parameters use to initialise the\r\n     * plugin\r\n     * @return {PluginDefinition} an object representing the plugin\r\n     */\r\n    static create(params) {\r\n        return {\r\n            name: 'cursor',\r\n            deferInit: params && params.deferInit ? params.deferInit : false,\r\n            params: params,\r\n            staticProps: {\r\n                enableCursor() {\r\n                    console.warn('Deprecated enableCursor!');\r\n                    this.initPlugins('cursor');\r\n                }\r\n            },\r\n            instance: CursorPlugin\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @type {CursorPluginParams}\r\n     */\r\n    defaultParams = {\r\n        hideOnBlur: true,\r\n        width: '1px',\r\n        color: 'black',\r\n        opacity: '0.25',\r\n        style: 'solid',\r\n        zIndex: 4,\r\n        customStyle: {}\r\n    };\r\n\r\n    /** @private */\r\n    _onMousemove = e => {\r\n        const bbox = this.wavesurfer.container.getBoundingClientRect();\r\n        this.updateCursorPosition(e.clientX - bbox.left);\r\n    };\r\n    /** @private */\r\n    _onMouseenter = () => this.showCursor();\r\n    /** @private */\r\n    _onMouseleave = () => this.hideCursor();\r\n\r\n    /**\r\n     * Construct the plugin class. You probably want to use CursorPlugin.create\r\n     * instead.\r\n     *\r\n     * @param {CursorPluginParams} params\r\n     * @param {object} ws\r\n     */\r\n    constructor(params, ws) {\r\n        /** @private */\r\n        this.wavesurfer = ws;\r\n        /** @private */\r\n        this.style = ws.util.style;\r\n        /**\r\n         * The cursor html element\r\n         *\r\n         * @type {?HTMLElement}\r\n         */\r\n        this.cursor = null;\r\n        /** @private */\r\n        this.params = ws.util.extend({}, this.defaultParams, params);\r\n    }\r\n\r\n    /**\r\n     * Initialise the plugin (used by the Plugin API)\r\n     */\r\n    init() {\r\n        this.wrapper = this.wavesurfer.container;\r\n        this.cursor = this.wrapper.appendChild(\r\n            this.style(\r\n                document.createElement('cursor'),\r\n                this.wavesurfer.util.extend(\r\n                    {\r\n                        position: 'absolute',\r\n                        zIndex: this.params.zIndex,\r\n                        left: 0,\r\n                        top: 0,\r\n                        bottom: 0,\r\n                        width: '0',\r\n                        display: 'block',\r\n                        borderRightStyle: this.params.style,\r\n                        borderRightWidth: this.params.width,\r\n                        borderRightColor: this.params.color,\r\n                        opacity: this.params.opacity,\r\n                        pointerEvents: 'none'\r\n                    },\r\n                    this.params.customStyle\r\n                )\r\n            )\r\n        );\r\n\r\n        this.wrapper.addEventListener('mousemove', this._onMousemove);\r\n        if (this.params.hideOnBlur) {\r\n            this.wrapper.addEventListener('mouseenter', this._onMouseenter);\r\n            this.wrapper.addEventListener('mouseleave', this._onMouseleave);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy the plugin (used by the Plugin API)\r\n     */\r\n    destroy() {\r\n        this.cursor.parentNode.removeChild(this.cursor);\r\n        this.wrapper.removeEventListener('mousemove', this._onMousemove);\r\n        if (this.params.hideOnBlur) {\r\n            this.wrapper.removeEventListener('mouseenter', this._onMouseenter);\r\n            this.wrapper.removeEventListener('mouseleave', this._onMouseleave);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the cursor position\r\n     *\r\n     * @param {number} pos The x offset of the cursor in pixels\r\n     */\r\n    updateCursorPosition(pos) {\r\n        this.style(this.cursor, {\r\n            left: `${pos}px`\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Show the cursor\r\n     */\r\n    showCursor() {\r\n        this.style(this.cursor, {\r\n            display: 'block'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Hide the cursor\r\n     */\r\n    hideCursor() {\r\n        this.style(this.cursor, {\r\n            display: 'none'\r\n        });\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/plugin/cursor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 176,
    "kind": "typedef",
    "name": "CursorPluginParams",
    "memberof": "src/plugin/cursor.js",
    "static": true,
    "longname": "src/plugin/cursor.js~CursorPluginParams",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "deferInit",
        "description": "Set to true to stop auto init in `addPlugin()`"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "hideOnBlur",
        "description": "Hide the cursor when the mouse leaves the\nwaveform"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'1px'",
        "defaultRaw": "'1px'",
        "name": "width",
        "description": "The width of the cursor"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'black'",
        "defaultRaw": "'black'",
        "name": "color",
        "description": "The color of the cursor"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'0.25'",
        "defaultRaw": "'0.25'",
        "name": "opacity",
        "description": "The opacity of the cursor"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'solid'",
        "defaultRaw": "'solid'",
        "name": "style",
        "description": "The border style of the cursor"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "3",
        "defaultRaw": 3,
        "name": "zIndex",
        "description": "The z-index of the cursor element"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "customStyle",
        "description": "An object with custom styles which are applied\nto the cursor element"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CursorPluginParams"
    }
  },
  {
    "__docId__": 177,
    "kind": "class",
    "name": "CursorPlugin",
    "memberof": "src/plugin/cursor.js",
    "static": true,
    "longname": "src/plugin/cursor.js~CursorPlugin",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/plugin/cursor.js",
    "importStyle": "CursorPlugin",
    "description": "Displays a thin line at the position of the cursor on the waveform.",
    "examples": [
      "// es6\nimport CursorPlugin from 'wavesurfer.cursor.js';\n\n// commonjs\nvar CursorPlugin = require('wavesurfer.cursor.js');\n\n// if you are using <script> tags\nvar CursorPlugin = window.WaveSurfer.cursor;\n\n// ... initialising wavesurfer with the plugin\nvar wavesurfer = WaveSurfer.create({\n  // wavesurfer options ...\n  plugins: [\n    CursorPlugin.create({\n      // plugin options ...\n    })\n  ]\n});"
    ],
    "lineNumber": 40,
    "interface": false,
    "extends": [
      "Observer"
    ],
    "implements": [
      "PluginClass"
    ]
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "create",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugin/cursor.js~CursorPlugin.create",
    "access": "public",
    "description": "Cursor plugin definition factory\n\nThis function must be used to create a plugin definition which can be\nused by wavesurfer to correctly instantiate the plugin.",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "CursorPluginParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "parameters use to initialise the\nplugin"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PluginDefinition"
      ],
      "spread": false,
      "description": "an object representing the plugin"
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "defaultParams",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#defaultParams",
    "access": "public",
    "description": "",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "CursorPluginParams"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "_onMousemove",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#_onMousemove",
    "access": "private",
    "description": null,
    "lineNumber": 80,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "_onMouseenter",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#_onMouseenter",
    "access": "private",
    "description": null,
    "lineNumber": 85,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "_onMouseleave",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#_onMouseleave",
    "access": "private",
    "description": null,
    "lineNumber": 87,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#constructor",
    "access": "public",
    "description": "Construct the plugin class. You probably want to use CursorPlugin.create\ninstead.",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "CursorPluginParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ws",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "wavesurfer",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#wavesurfer",
    "access": "private",
    "description": null,
    "lineNumber": 98,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "style",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#style",
    "access": "private",
    "description": null,
    "lineNumber": 100,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "cursor",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#cursor",
    "access": "public",
    "description": "The cursor html element",
    "lineNumber": 106,
    "type": {
      "nullable": true,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "params",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#params",
    "access": "private",
    "description": null,
    "lineNumber": 108,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "init",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#init",
    "access": "public",
    "description": "Initialise the plugin (used by the Plugin API)",
    "lineNumber": 114,
    "params": [],
    "return": null
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "wrapper",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#wrapper",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#destroy",
    "access": "public",
    "description": "Destroy the plugin (used by the Plugin API)",
    "lineNumber": 149,
    "params": [],
    "return": null
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "updateCursorPosition",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#updateCursorPosition",
    "access": "public",
    "description": "Update the cursor position",
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pos",
        "description": "The x offset of the cursor in pixels"
      }
    ],
    "return": null
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "showCursor",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#showCursor",
    "access": "public",
    "description": "Show the cursor",
    "lineNumber": 172,
    "params": [],
    "return": null
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "hideCursor",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#hideCursor",
    "access": "public",
    "description": "Hide the cursor",
    "lineNumber": 181,
    "params": [],
    "return": null
  },
  {
    "__docId__": 195,
    "kind": "file",
    "name": "src/plugin/elan.js",
    "content": "/**\r\n * @typedef {Object} ElanPluginParams\r\n * @property {string|HTMLElement} container CSS selector or HTML element where\r\n * the ELAN information should be renderer.\r\n * @property {string} url The location of ELAN XML data\r\n * @property {?boolean} deferInit Set to true to manually call\r\n * @property {?Object} tiers If set only shows the data tiers with the `TIER_ID`\r\n * in this map.\r\n */\r\n\r\n/**\r\n * Downloads and renders ELAN audio transcription documents alongside the\r\n * waveform.\r\n *\r\n * @implements {PluginClass}\r\n * @extends {Observer}\r\n * @example\r\n * // es6\r\n * import ElanPlugin from 'wavesurfer.elan.js';\r\n *\r\n * // commonjs\r\n * var ElanPlugin = require('wavesurfer.elan.js');\r\n *\r\n * // if you are using <script> tags\r\n * var ElanPlugin = window.WaveSurfer.elan;\r\n *\r\n * // ... initialising wavesurfer with the plugin\r\n * var wavesurfer = WaveSurfer.create({\r\n *   // wavesurfer options ...\r\n *   plugins: [\r\n *     ElanPlugin.create({\r\n *       // plugin options ...\r\n *     })\r\n *   ]\r\n * });\r\n */\r\nexport default class ElanPlugin {\r\n    /**\r\n     * Elan plugin definition factory\r\n     *\r\n     * This function must be used to create a plugin definition which can be\r\n     * used by wavesurfer to correctly instantiate the plugin.\r\n     *\r\n     * @param  {ElanPluginParams} params parameters use to initialise the plugin\r\n     * @return {PluginDefinition} an object representing the plugin\r\n     */\r\n    static create(params) {\r\n        return {\r\n            name: 'elan',\r\n            deferInit: params && params.deferInit ? params.deferInit : false,\r\n            params: params,\r\n            instance: ElanPlugin\r\n        };\r\n    }\r\n\r\n    Types = {\r\n        ALIGNABLE_ANNOTATION: 'ALIGNABLE_ANNOTATION',\r\n        REF_ANNOTATION: 'REF_ANNOTATION'\r\n    };\r\n\r\n    constructor(params, ws) {\r\n        this.data = null;\r\n        this.params = params;\r\n        this.container =\r\n            'string' == typeof params.container\r\n                ? document.querySelector(params.container)\r\n                : params.container;\r\n\r\n        if (!this.container) {\r\n            throw Error('No container for ELAN');\r\n        }\r\n    }\r\n\r\n    init() {\r\n        this.bindClick();\r\n\r\n        if (this.params.url) {\r\n            this.load(this.params.url);\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        this.container.removeEventListener('click', this._onClick);\r\n        this.container.removeChild(this.table);\r\n    }\r\n\r\n    load(url) {\r\n        this.loadXML(url, xml => {\r\n            this.data = this.parseElan(xml);\r\n            this.render();\r\n            this.fireEvent('ready', this.data);\r\n        });\r\n    }\r\n\r\n    loadXML(url, callback) {\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open('GET', url, true);\r\n        xhr.responseType = 'document';\r\n        xhr.send();\r\n        xhr.addEventListener('load', e => {\r\n            callback && callback(e.target.responseXML);\r\n        });\r\n    }\r\n\r\n    parseElan(xml) {\r\n        const _forEach = Array.prototype.forEach;\r\n        const _map = Array.prototype.map;\r\n\r\n        const data = {\r\n            media: {},\r\n            timeOrder: {},\r\n            tiers: [],\r\n            annotations: {},\r\n            alignableAnnotations: []\r\n        };\r\n\r\n        const header = xml.querySelector('HEADER');\r\n        const inMilliseconds =\r\n            header.getAttribute('TIME_UNITS') == 'milliseconds';\r\n        const media = header.querySelector('MEDIA_DESCRIPTOR');\r\n        data.media.url = media.getAttribute('MEDIA_URL');\r\n        data.media.type = media.getAttribute('MIME_TYPE');\r\n\r\n        const timeSlots = xml.querySelectorAll('TIME_ORDER TIME_SLOT');\r\n        const timeOrder = {};\r\n        _forEach.call(timeSlots, slot => {\r\n            let value = parseFloat(slot.getAttribute('TIME_VALUE'));\r\n            // If in milliseconds, convert to seconds with rounding\r\n            if (inMilliseconds) {\r\n                value = Math.round(value * 1e2) / 1e5;\r\n            }\r\n            timeOrder[slot.getAttribute('TIME_SLOT_ID')] = value;\r\n        });\r\n\r\n        data.tiers = _map.call(xml.querySelectorAll('TIER'), tier => ({\r\n            id: tier.getAttribute('TIER_ID'),\r\n            linguisticTypeRef: tier.getAttribute('LINGUISTIC_TYPE_REF'),\r\n            defaultLocale: tier.getAttribute('DEFAULT_LOCALE'),\r\n            annotations: _map.call(\r\n                tier.querySelectorAll('REF_ANNOTATION, ALIGNABLE_ANNOTATION'),\r\n                node => {\r\n                    const annot = {\r\n                        type: node.nodeName,\r\n                        id: node.getAttribute('ANNOTATION_ID'),\r\n                        ref: node.getAttribute('ANNOTATION_REF'),\r\n                        value: node\r\n                            .querySelector('ANNOTATION_VALUE')\r\n                            .textContent.trim()\r\n                    };\r\n\r\n                    if (this.Types.ALIGNABLE_ANNOTATION == annot.type) {\r\n                        // Add start & end to alignable annotation\r\n                        annot.start =\r\n                            timeOrder[node.getAttribute('TIME_SLOT_REF1')];\r\n                        annot.end =\r\n                            timeOrder[node.getAttribute('TIME_SLOT_REF2')];\r\n                        // Add to the list of alignable annotations\r\n                        data.alignableAnnotations.push(annot);\r\n                    }\r\n\r\n                    // Additionally, put into the flat map of all annotations\r\n                    data.annotations[annot.id] = annot;\r\n\r\n                    return annot;\r\n                }\r\n            )\r\n        }));\r\n\r\n        // Create JavaScript references between annotations\r\n        data.tiers.forEach(tier => {\r\n            tier.annotations.forEach(annot => {\r\n                if (null != annot.ref) {\r\n                    annot.reference = data.annotations[annot.ref];\r\n                }\r\n            });\r\n        });\r\n\r\n        // Sort alignable annotations by start & end\r\n        data.alignableAnnotations.sort((a, b) => {\r\n            let d = a.start - b.start;\r\n            if (d == 0) {\r\n                d = b.end - a.end;\r\n            }\r\n            return d;\r\n        });\r\n\r\n        data.length = data.alignableAnnotations.length;\r\n\r\n        return data;\r\n    }\r\n\r\n    render() {\r\n        // apply tiers filter\r\n        let tiers = this.data.tiers;\r\n        if (this.params.tiers) {\r\n            tiers = tiers.filter(tier => tier.id in this.params.tiers);\r\n        }\r\n\r\n        // denormalize references to alignable annotations\r\n        const backRefs = {};\r\n        let indeces = {};\r\n        tiers.forEach((tier, index) => {\r\n            tier.annotations.forEach(annot => {\r\n                if (\r\n                    annot.reference &&\r\n                    annot.reference.type == this.Types.ALIGNABLE_ANNOTATION\r\n                ) {\r\n                    if (!(annot.reference.id in backRefs)) {\r\n                        backRefs[annot.ref] = {};\r\n                    }\r\n                    backRefs[annot.ref][index] = annot;\r\n                    indeces[index] = true;\r\n                }\r\n            });\r\n        });\r\n        indeces = Object.keys(indeces).sort();\r\n\r\n        this.renderedAlignable = this.data.alignableAnnotations.filter(\r\n            alignable => backRefs[alignable.id]\r\n        );\r\n\r\n        // table\r\n        const table = (this.table = document.createElement('table'));\r\n        table.className = 'wavesurfer-annotations';\r\n\r\n        // head\r\n        const thead = document.createElement('thead');\r\n        const headRow = document.createElement('tr');\r\n        thead.appendChild(headRow);\r\n        table.appendChild(thead);\r\n        const th = document.createElement('th');\r\n        th.textContent = 'Time';\r\n        th.className = 'wavesurfer-time';\r\n        headRow.appendChild(th);\r\n        indeces.forEach(index => {\r\n            const tier = tiers[index];\r\n            const th = document.createElement('th');\r\n            th.className = 'wavesurfer-tier-' + tier.id;\r\n            th.textContent = tier.id;\r\n            th.style.width = this.params.tiers[tier.id];\r\n            headRow.appendChild(th);\r\n        });\r\n\r\n        // body\r\n        const tbody = document.createElement('tbody');\r\n        table.appendChild(tbody);\r\n        this.renderedAlignable.forEach(alignable => {\r\n            const row = document.createElement('tr');\r\n            row.id = 'wavesurfer-alignable-' + alignable.id;\r\n            tbody.appendChild(row);\r\n\r\n            const td = document.createElement('td');\r\n            td.className = 'wavesurfer-time';\r\n            td.textContent =\r\n                alignable.start.toFixed(1) + '–' + alignable.end.toFixed(1);\r\n            row.appendChild(td);\r\n\r\n            const backRef = backRefs[alignable.id];\r\n            indeces.forEach(index => {\r\n                const tier = tiers[index];\r\n                const td = document.createElement('td');\r\n                const annotation = backRef[index];\r\n                if (annotation) {\r\n                    td.id = 'wavesurfer-annotation-' + annotation.id;\r\n                    td.dataset.ref = alignable.id;\r\n                    td.dataset.start = alignable.start;\r\n                    td.dataset.end = alignable.end;\r\n                    td.textContent = annotation.value;\r\n                }\r\n                td.className = 'wavesurfer-tier-' + tier.id;\r\n                row.appendChild(td);\r\n            });\r\n        });\r\n\r\n        this.container.innerHTML = '';\r\n        this.container.appendChild(table);\r\n    }\r\n\r\n    bindClick() {\r\n        this._onClick = e => {\r\n            const ref = e.target.dataset.ref;\r\n            if (null != ref) {\r\n                const annot = this.data.annotations[ref];\r\n                if (annot) {\r\n                    this.fireEvent('select', annot.start, annot.end);\r\n                }\r\n            }\r\n        };\r\n        this.container.addEventListener('click', this._onClick);\r\n    }\r\n\r\n    getRenderedAnnotation(time) {\r\n        let result;\r\n        this.renderedAlignable.some(annotation => {\r\n            if (annotation.start <= time && annotation.end >= time) {\r\n                result = annotation;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        return result;\r\n    }\r\n\r\n    getAnnotationNode(annotation) {\r\n        return document.getElementById('wavesurfer-alignable-' + annotation.id);\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/plugin/elan.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 196,
    "kind": "typedef",
    "name": "ElanPluginParams",
    "memberof": "src/plugin/elan.js",
    "static": true,
    "longname": "src/plugin/elan.js~ElanPluginParams",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string",
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": "CSS selector or HTML element where\nthe ELAN information should be renderer."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The location of ELAN XML data"
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "deferInit",
        "description": "Set to true to manually call"
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "tiers",
        "description": "If set only shows the data tiers with the `TIER_ID`\nin this map."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ElanPluginParams"
    }
  },
  {
    "__docId__": 197,
    "kind": "class",
    "name": "ElanPlugin",
    "memberof": "src/plugin/elan.js",
    "static": true,
    "longname": "src/plugin/elan.js~ElanPlugin",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/plugin/elan.js",
    "importStyle": "ElanPlugin",
    "description": "Downloads and renders ELAN audio transcription documents alongside the\nwaveform.",
    "examples": [
      "// es6\nimport ElanPlugin from 'wavesurfer.elan.js';\n\n// commonjs\nvar ElanPlugin = require('wavesurfer.elan.js');\n\n// if you are using <script> tags\nvar ElanPlugin = window.WaveSurfer.elan;\n\n// ... initialising wavesurfer with the plugin\nvar wavesurfer = WaveSurfer.create({\n  // wavesurfer options ...\n  plugins: [\n    ElanPlugin.create({\n      // plugin options ...\n    })\n  ]\n});"
    ],
    "lineNumber": 37,
    "interface": false,
    "extends": [
      "Observer"
    ],
    "implements": [
      "PluginClass"
    ]
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "create",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugin/elan.js~ElanPlugin.create",
    "access": "public",
    "description": "Elan plugin definition factory\n\nThis function must be used to create a plugin definition which can be\nused by wavesurfer to correctly instantiate the plugin.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "ElanPluginParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "parameters use to initialise the plugin"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PluginDefinition"
      ],
      "spread": false,
      "description": "an object representing the plugin"
    }
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "Types",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#Types",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "data",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#data",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "member",
    "name": "params",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#params",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "member",
    "name": "container",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#container",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "init",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#init",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "load",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#load",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "loadXML",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#loadXML",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "parseElan",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#parseElan",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [
      {
        "name": "xml",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "render",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#render",
    "access": "public",
    "description": null,
    "lineNumber": 192,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 211,
    "kind": "member",
    "name": "renderedAlignable",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#renderedAlignable",
    "access": "public",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "bindClick",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#bindClick",
    "access": "public",
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 213,
    "kind": "member",
    "name": "_onClick",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#_onClick",
    "access": "private",
    "description": null,
    "lineNumber": 280,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "getRenderedAnnotation",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#getRenderedAnnotation",
    "access": "public",
    "description": null,
    "lineNumber": 292,
    "undocument": true,
    "params": [
      {
        "name": "time",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "getAnnotationNode",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#getAnnotationNode",
    "access": "public",
    "description": null,
    "lineNumber": 304,
    "undocument": true,
    "params": [
      {
        "name": "annotation",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "file",
    "name": "src/plugin/mediasession.js",
    "content": "/*global MediaMetadata*/\r\n\r\n/**\r\n * @typedef {Object} MediaSessionPluginParams\r\n * @property {MediaMetadata} metadata A MediaMetadata object: a representation\r\n * of the metadata associated with a MediaSession that can be used by user agents\r\n * to provide a customized user interface.\r\n * @property {?boolean} deferInit Set to true to manually call\r\n * `initPlugin('mediasession')`\r\n */\r\n\r\n/**\r\n * Visualise MediaSession information for a wavesurfer instance.\r\n *\r\n * @implements {PluginClass}\r\n * @extends {Observer}\r\n * @example\r\n * // es6\r\n * import MediaSessionPlugin from 'wavesurfer.mediasession.js';\r\n *\r\n * // commonjs\r\n * var MediaSessionPlugin = require('wavesurfer.mediasession.js');\r\n *\r\n * // if you are using <script> tags\r\n * var MediaSessionPlugin = window.WaveSurfer.mediasession;\r\n *\r\n * // ... initialising wavesurfer with the plugin\r\n * var wavesurfer = WaveSurfer.create({\r\n *   // wavesurfer options ...\r\n *   plugins: [\r\n *     MediaSessionPlugin.create({\r\n *       // plugin options ...\r\n *     })\r\n *   ]\r\n * });\r\n */\r\nexport default class MediaSessionPlugin {\r\n    /**\r\n     * MediaSession plugin definition factory\r\n     *\r\n     * This function must be used to create a plugin definition which can be\r\n     * used by wavesurfer to correctly instantiate the plugin.\r\n     *\r\n     * @param  {MediaSessionPluginParams} params parameters use to initialise the plugin\r\n     * @return {PluginDefinition} an object representing the plugin\r\n     */\r\n    static create(params) {\r\n        return {\r\n            name: 'mediasession',\r\n            deferInit: params && params.deferInit ? params.deferInit : false,\r\n            params: params,\r\n            instance: MediaSessionPlugin\r\n        };\r\n    }\r\n\r\n    constructor(params, ws) {\r\n        this.params = params;\r\n        this.wavesurfer = ws;\r\n\r\n        if ('mediaSession' in navigator) {\r\n            // update metadata\r\n            this.metadata = this.params.metadata;\r\n            this.update();\r\n\r\n            // update metadata when playback starts\r\n            this.wavesurfer.on('play', () => {\r\n                this.update();\r\n            });\r\n\r\n            // set playback action handlers\r\n            navigator.mediaSession.setActionHandler('play', () => {\r\n                this.wavesurfer.play();\r\n            });\r\n            navigator.mediaSession.setActionHandler('pause', () => {\r\n                this.wavesurfer.playPause();\r\n            });\r\n            navigator.mediaSession.setActionHandler('seekbackward', () => {\r\n                this.wavesurfer.skipBackward();\r\n            });\r\n            navigator.mediaSession.setActionHandler('seekforward', () => {\r\n                this.wavesurfer.skipForward();\r\n            });\r\n        }\r\n    }\r\n\r\n    init() {}\r\n\r\n    destroy() {}\r\n\r\n    update() {\r\n        if (typeof MediaMetadata === typeof Function) {\r\n            // set metadata\r\n            navigator.mediaSession.metadata = new MediaMetadata(this.metadata);\r\n        }\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/plugin/mediasession.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 217,
    "kind": "typedef",
    "name": "MediaSessionPluginParams",
    "memberof": "src/plugin/mediasession.js",
    "static": true,
    "longname": "src/plugin/mediasession.js~MediaSessionPluginParams",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "MediaMetadata"
        ],
        "spread": false,
        "optional": false,
        "name": "metadata",
        "description": "A MediaMetadata object: a representation\nof the metadata associated with a MediaSession that can be used by user agents\nto provide a customized user interface."
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "deferInit",
        "description": "Set to true to manually call\n`initPlugin('mediasession')`"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "MediaSessionPluginParams"
    }
  },
  {
    "__docId__": 218,
    "kind": "class",
    "name": "MediaSessionPlugin",
    "memberof": "src/plugin/mediasession.js",
    "static": true,
    "longname": "src/plugin/mediasession.js~MediaSessionPlugin",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/plugin/mediasession.js",
    "importStyle": "MediaSessionPlugin",
    "description": "Visualise MediaSession information for a wavesurfer instance.",
    "examples": [
      "// es6\nimport MediaSessionPlugin from 'wavesurfer.mediasession.js';\n\n// commonjs\nvar MediaSessionPlugin = require('wavesurfer.mediasession.js');\n\n// if you are using <script> tags\nvar MediaSessionPlugin = window.WaveSurfer.mediasession;\n\n// ... initialising wavesurfer with the plugin\nvar wavesurfer = WaveSurfer.create({\n  // wavesurfer options ...\n  plugins: [\n    MediaSessionPlugin.create({\n      // plugin options ...\n    })\n  ]\n});"
    ],
    "lineNumber": 37,
    "interface": false,
    "extends": [
      "Observer"
    ],
    "implements": [
      "PluginClass"
    ]
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "create",
    "memberof": "src/plugin/mediasession.js~MediaSessionPlugin",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugin/mediasession.js~MediaSessionPlugin.create",
    "access": "public",
    "description": "MediaSession plugin definition factory\n\nThis function must be used to create a plugin definition which can be\nused by wavesurfer to correctly instantiate the plugin.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "MediaSessionPluginParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "parameters use to initialise the plugin"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PluginDefinition"
      ],
      "spread": false,
      "description": "an object representing the plugin"
    }
  },
  {
    "__docId__": 220,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin/mediasession.js~MediaSessionPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/mediasession.js~MediaSessionPlugin#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "params",
    "memberof": "src/plugin/mediasession.js~MediaSessionPlugin",
    "static": false,
    "longname": "src/plugin/mediasession.js~MediaSessionPlugin#params",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "member",
    "name": "wavesurfer",
    "memberof": "src/plugin/mediasession.js~MediaSessionPlugin",
    "static": false,
    "longname": "src/plugin/mediasession.js~MediaSessionPlugin#wavesurfer",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "member",
    "name": "metadata",
    "memberof": "src/plugin/mediasession.js~MediaSessionPlugin",
    "static": false,
    "longname": "src/plugin/mediasession.js~MediaSessionPlugin#metadata",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "init",
    "memberof": "src/plugin/mediasession.js~MediaSessionPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/mediasession.js~MediaSessionPlugin#init",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/plugin/mediasession.js~MediaSessionPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/mediasession.js~MediaSessionPlugin#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "update",
    "memberof": "src/plugin/mediasession.js~MediaSessionPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/mediasession.js~MediaSessionPlugin#update",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 227,
    "kind": "file",
    "name": "src/plugin/microphone.js",
    "content": "/**\r\n * @typedef {Object} MicrophonePluginParams\r\n * @property {MediaStreamConstraints} constraints The constraints parameter is a\r\n * MediaStreamConstaints object with two members: video and audio, describing\r\n * the media types requested. Either or both must be specified.\r\n * @property {number} bufferSize=4096 The buffer size in units of sample-frames.\r\n * If specified, the bufferSize must be one of the following values: `256`,\r\n * `512`, `1024`, `2048`, `4096`, `8192`, `16384`\r\n * @property {number} numberOfInputChannels=1 Integer specifying the number of\r\n * channels for this node's input. Values of up to 32 are supported.\r\n * @property {?boolean} deferInit Set to true to manually call\r\n * `initPlugin('microphone')`\r\n */\r\n\r\n/**\r\n * Visualise microphone input in a wavesurfer instance.\r\n *\r\n * @implements {PluginClass}\r\n * @extends {Observer}\r\n * @example\r\n * // es6\r\n * import MicrophonePlugin from 'wavesurfer.microphone.js';\r\n *\r\n * // commonjs\r\n * var MicrophonePlugin = require('wavesurfer.microphone.js');\r\n *\r\n * // if you are using <script> tags\r\n * var MicrophonePlugin = window.WaveSurfer.microphone;\r\n *\r\n * // ... initialising wavesurfer with the plugin\r\n * var wavesurfer = WaveSurfer.create({\r\n *   // wavesurfer options ...\r\n *   plugins: [\r\n *     MicrophonePlugin.create({\r\n *       // plugin options ...\r\n *     })\r\n *   ]\r\n * });\r\n */\r\nexport default class MicrophonePlugin {\r\n    /**\r\n     * Microphone plugin definition factory\r\n     *\r\n     * This function must be used to create a plugin definition which can be\r\n     * used by wavesurfer to correctly instantiate the plugin.\r\n     *\r\n     * @param  {MicrophonePluginParams} params parameters use to initialise the plugin\r\n     * @return {PluginDefinition} an object representing the plugin\r\n     */\r\n    static create(params) {\r\n        return {\r\n            name: 'microphone',\r\n            deferInit: params && params.deferInit ? params.deferInit : false,\r\n            params: params,\r\n            instance: MicrophonePlugin\r\n        };\r\n    }\r\n\r\n    constructor(params, ws) {\r\n        this.params = params;\r\n        this.wavesurfer = ws;\r\n\r\n        this.active = false;\r\n        this.paused = false;\r\n        this.reloadBufferFunction = e => this.reloadBuffer(e);\r\n\r\n        // cross-browser getUserMedia\r\n        const promisifiedOldGUM = (\r\n            constraints,\r\n            successCallback,\r\n            errorCallback\r\n        ) => {\r\n            // get ahold of getUserMedia, if present\r\n            const getUserMedia =\r\n                navigator.getUserMedia ||\r\n                navigator.webkitGetUserMedia ||\r\n                navigator.mozGetUserMedia ||\r\n                navigator.msGetUserMedia;\r\n            // Some browsers just don't implement it - return a rejected\r\n            // promise with an error to keep a consistent interface\r\n            if (!getUserMedia) {\r\n                return Promise.reject(\r\n                    new Error('getUserMedia is not implemented in this browser')\r\n                );\r\n            }\r\n            // otherwise, wrap the call to the old navigator.getUserMedia with\r\n            // a Promise\r\n            return new Promise((successCallback, errorCallback) => {\r\n                getUserMedia.call(\r\n                    navigator,\r\n                    constraints,\r\n                    successCallback,\r\n                    errorCallback\r\n                );\r\n            });\r\n        };\r\n        // Older browsers might not implement mediaDevices at all, so we set an\r\n        // empty object first\r\n        if (navigator.mediaDevices === undefined) {\r\n            navigator.mediaDevices = {};\r\n        }\r\n        // Some browsers partially implement mediaDevices. We can't just assign\r\n        // an object with getUserMedia as it would overwrite existing\r\n        // properties. Here, we will just add the getUserMedia property if it's\r\n        // missing.\r\n        if (navigator.mediaDevices.getUserMedia === undefined) {\r\n            navigator.mediaDevices.getUserMedia = promisifiedOldGUM;\r\n        }\r\n        this.constraints = this.params.constraints || {\r\n            video: false,\r\n            audio: true\r\n        };\r\n        this.bufferSize = this.params.bufferSize || 4096;\r\n        this.numberOfInputChannels = this.params.numberOfInputChannels || 1;\r\n        this.numberOfOutputChannels = this.params.numberOfOutputChannels || 1;\r\n\r\n        this._onBackendCreated = () => {\r\n            // wavesurfer's AudioContext where we'll route the mic signal to\r\n            this.micContext = this.wavesurfer.backend.getAudioContext();\r\n        };\r\n    }\r\n\r\n    init() {\r\n        this.wavesurfer.on('backend-created', this._onBackendCreated);\r\n        if (this.wavesurfer.backend) {\r\n            this._onBackendCreated();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy the microphone plugin.\r\n     */\r\n    destroy() {\r\n        // make sure the buffer is not redrawn during\r\n        // cleanup and demolition of this plugin.\r\n        this.paused = true;\r\n\r\n        this.wavesurfer.un('backend-created', this._onBackendCreated);\r\n        this.stop();\r\n    }\r\n\r\n    /**\r\n     * Allow user to select audio input device, eg. microphone, and\r\n     * start the visualization.\r\n     */\r\n    start() {\r\n        navigator.mediaDevices\r\n            .getUserMedia(this.constraints)\r\n            .then(data => this.gotStream(data))\r\n            .catch(data => this.deviceError(data));\r\n    }\r\n\r\n    /**\r\n     * Pause/resume visualization.\r\n     */\r\n    togglePlay() {\r\n        if (!this.active) {\r\n            // start it first\r\n            this.start();\r\n        } else {\r\n            // toggle paused\r\n            this.paused = !this.paused;\r\n\r\n            if (this.paused) {\r\n                this.pause();\r\n            } else {\r\n                this.play();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Play visualization.\r\n     */\r\n    play() {\r\n        this.paused = false;\r\n\r\n        this.connect();\r\n    }\r\n\r\n    /**\r\n     * Pause visualization.\r\n     */\r\n    pause() {\r\n        this.paused = true;\r\n\r\n        // disconnect sources so they can be used elsewhere\r\n        // (eg. during audio playback)\r\n        this.disconnect();\r\n    }\r\n\r\n    /**\r\n     * Stop the device stream and remove any remaining waveform drawing from\r\n     * the wavesurfer canvas.\r\n     */\r\n    stop() {\r\n        if (this.active) {\r\n            // stop visualization and device\r\n            this.stopDevice();\r\n\r\n            // empty last frame\r\n            this.wavesurfer.empty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop the device and the visualization.\r\n     */\r\n    stopDevice() {\r\n        this.active = false;\r\n\r\n        // stop visualization\r\n        this.disconnect();\r\n\r\n        // stop stream from device\r\n        if (this.stream) {\r\n            const result = this.detectBrowser();\r\n            // MediaStream.stop is deprecated since:\r\n            // - Firefox 44 (https://www.fxsitecompat.com/en-US/docs/2015/mediastream-stop-has-been-deprecated/)\r\n            // - Chrome 45 (https://developers.google.com/web/updates/2015/07/mediastream-deprecations)\r\n            if (\r\n                (result.browser === 'chrome' && result.version >= 45) ||\r\n                (result.browser === 'firefox' && result.version >= 44) ||\r\n                result.browser === 'edge'\r\n            ) {\r\n                if (this.stream.getTracks) {\r\n                    // note that this should not be a call\r\n                    this.stream.getTracks().forEach(stream => stream.stop());\r\n                    return;\r\n                }\r\n            }\r\n\r\n            this.stream.stop();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect the media sources that feed the visualization.\r\n     */\r\n    connect() {\r\n        if (this.stream !== undefined) {\r\n            // Create an AudioNode from the stream.\r\n            this.mediaStreamSource = this.micContext.createMediaStreamSource(\r\n                this.stream\r\n            );\r\n\r\n            this.levelChecker = this.micContext.createScriptProcessor(\r\n                this.bufferSize,\r\n                this.numberOfInputChannels,\r\n                this.numberOfOutputChannels\r\n            );\r\n            this.mediaStreamSource.connect(this.levelChecker);\r\n\r\n            this.levelChecker.connect(this.micContext.destination);\r\n            this.levelChecker.onaudioprocess = this.reloadBufferFunction;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disconnect the media sources that feed the visualization.\r\n     */\r\n    disconnect() {\r\n        if (this.mediaStreamSource !== undefined) {\r\n            this.mediaStreamSource.disconnect();\r\n        }\r\n\r\n        if (this.levelChecker !== undefined) {\r\n            this.levelChecker.disconnect();\r\n            this.levelChecker.onaudioprocess = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Redraw the waveform.\r\n     */\r\n    reloadBuffer(event) {\r\n        if (!this.paused) {\r\n            this.wavesurfer.empty();\r\n            this.wavesurfer.loadDecodedBuffer(event.inputBuffer);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Audio input device is ready.\r\n     *\r\n     * @param {LocalMediaStream} stream The microphone's media stream.\r\n     */\r\n    gotStream(stream) {\r\n        this.stream = stream;\r\n        this.active = true;\r\n\r\n        // start visualization\r\n        this.play();\r\n\r\n        // notify listeners\r\n        this.fireEvent('deviceReady', stream);\r\n    }\r\n\r\n    /**\r\n     * Device error callback.\r\n     */\r\n    deviceError(code) {\r\n        // notify listeners\r\n        this.fireEvent('deviceError', code);\r\n    }\r\n\r\n    /**\r\n     * Extract browser version out of the provided user agent string.\r\n     * @param {!string} uastring userAgent string.\r\n     * @param {!string} expr Regular expression used as match criteria.\r\n     * @param {!number} pos position in the version string to be returned.\r\n     * @return {!number} browser version.\r\n     */\r\n    extractVersion(uastring, expr, pos) {\r\n        const match = uastring.match(expr);\r\n        return match && match.length >= pos && parseInt(match[pos], 10);\r\n    }\r\n\r\n    /**\r\n     * Browser detector.\r\n     * @return {object} result containing browser, version and minVersion\r\n     *     properties.\r\n     */\r\n    detectBrowser() {\r\n        // Returned result object.\r\n        const result = {};\r\n        result.browser = null;\r\n        result.version = null;\r\n        result.minVersion = null;\r\n\r\n        // Non supported browser.\r\n        if (typeof window === 'undefined' || !window.navigator) {\r\n            result.browser = 'Not a supported browser.';\r\n            return result;\r\n        }\r\n\r\n        // Firefox.\r\n        if (navigator.mozGetUserMedia) {\r\n            result.browser = 'firefox';\r\n            result.version = this.extractVersion(\r\n                navigator.userAgent,\r\n                /Firefox\\/([0-9]+)\\./,\r\n                1\r\n            );\r\n            result.minVersion = 31;\r\n            return result;\r\n        }\r\n\r\n        // Chrome/Chromium/Webview.\r\n        if (navigator.webkitGetUserMedia && window.webkitRTCPeerConnection) {\r\n            result.browser = 'chrome';\r\n            result.version = this.extractVersion(\r\n                navigator.userAgent,\r\n                /Chrom(e|ium)\\/([0-9]+)\\./,\r\n                2\r\n            );\r\n            result.minVersion = 38;\r\n            return result;\r\n        }\r\n\r\n        // Edge.\r\n        if (\r\n            navigator.mediaDevices &&\r\n            navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)\r\n        ) {\r\n            result.browser = 'edge';\r\n            result.version = this.extractVersion(\r\n                navigator.userAgent,\r\n                /Edge\\/(\\d+).(\\d+)$/,\r\n                2\r\n            );\r\n            result.minVersion = 10547;\r\n            return result;\r\n        }\r\n\r\n        // Non supported browser default.\r\n        result.browser = 'Not a supported browser.';\r\n        return result;\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/plugin/microphone.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 228,
    "kind": "typedef",
    "name": "MicrophonePluginParams",
    "memberof": "src/plugin/microphone.js",
    "static": true,
    "longname": "src/plugin/microphone.js~MicrophonePluginParams",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "MediaStreamConstraints"
        ],
        "spread": false,
        "optional": false,
        "name": "constraints",
        "description": "The constraints parameter is a\nMediaStreamConstaints object with two members: video and audio, describing\nthe media types requested. Either or both must be specified."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "4096",
        "defaultRaw": 4096,
        "name": "bufferSize",
        "description": "The buffer size in units of sample-frames.\nIf specified, the bufferSize must be one of the following values: `256`,\n`512`, `1024`, `2048`, `4096`, `8192`, `16384`"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "numberOfInputChannels",
        "description": "Integer specifying the number of\nchannels for this node's input. Values of up to 32 are supported."
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "deferInit",
        "description": "Set to true to manually call\n`initPlugin('microphone')`"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "MicrophonePluginParams"
    }
  },
  {
    "__docId__": 229,
    "kind": "class",
    "name": "MicrophonePlugin",
    "memberof": "src/plugin/microphone.js",
    "static": true,
    "longname": "src/plugin/microphone.js~MicrophonePlugin",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/plugin/microphone.js",
    "importStyle": "MicrophonePlugin",
    "description": "Visualise microphone input in a wavesurfer instance.",
    "examples": [
      "// es6\nimport MicrophonePlugin from 'wavesurfer.microphone.js';\n\n// commonjs\nvar MicrophonePlugin = require('wavesurfer.microphone.js');\n\n// if you are using <script> tags\nvar MicrophonePlugin = window.WaveSurfer.microphone;\n\n// ... initialising wavesurfer with the plugin\nvar wavesurfer = WaveSurfer.create({\n  // wavesurfer options ...\n  plugins: [\n    MicrophonePlugin.create({\n      // plugin options ...\n    })\n  ]\n});"
    ],
    "lineNumber": 40,
    "interface": false,
    "extends": [
      "Observer"
    ],
    "implements": [
      "PluginClass"
    ]
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "create",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugin/microphone.js~MicrophonePlugin.create",
    "access": "public",
    "description": "Microphone plugin definition factory\n\nThis function must be used to create a plugin definition which can be\nused by wavesurfer to correctly instantiate the plugin.",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "MicrophonePluginParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "parameters use to initialise the plugin"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PluginDefinition"
      ],
      "spread": false,
      "description": "an object representing the plugin"
    }
  },
  {
    "__docId__": 231,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "params",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#params",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "wavesurfer",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#wavesurfer",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "active",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#active",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "member",
    "name": "paused",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#paused",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "member",
    "name": "reloadBufferFunction",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#reloadBufferFunction",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "constraints",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#constraints",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "member",
    "name": "bufferSize",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#bufferSize",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "member",
    "name": "numberOfInputChannels",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#numberOfInputChannels",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "member",
    "name": "numberOfOutputChannels",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#numberOfOutputChannels",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "member",
    "name": "_onBackendCreated",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#_onBackendCreated",
    "access": "private",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "member",
    "name": "micContext",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#micContext",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "init",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#init",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#destroy",
    "access": "public",
    "description": "Destroy the microphone plugin.",
    "lineNumber": 133,
    "params": [],
    "return": null
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "start",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#start",
    "access": "public",
    "description": "Allow user to select audio input device, eg. microphone, and\nstart the visualization.",
    "lineNumber": 146,
    "params": [],
    "return": null
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "togglePlay",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#togglePlay",
    "access": "public",
    "description": "Pause/resume visualization.",
    "lineNumber": 156,
    "params": [],
    "return": null
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "play",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#play",
    "access": "public",
    "description": "Play visualization.",
    "lineNumber": 175,
    "params": [],
    "return": null
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "pause",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#pause",
    "access": "public",
    "description": "Pause visualization.",
    "lineNumber": 184,
    "params": [],
    "return": null
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "stop",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#stop",
    "access": "public",
    "description": "Stop the device stream and remove any remaining waveform drawing from\nthe wavesurfer canvas.",
    "lineNumber": 196,
    "params": [],
    "return": null
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "stopDevice",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#stopDevice",
    "access": "public",
    "description": "Stop the device and the visualization.",
    "lineNumber": 209,
    "params": [],
    "return": null
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "connect",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#connect",
    "access": "public",
    "description": "Connect the media sources that feed the visualization.",
    "lineNumber": 240,
    "params": [],
    "return": null
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "mediaStreamSource",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#mediaStreamSource",
    "access": "public",
    "description": null,
    "lineNumber": 243,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "levelChecker",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#levelChecker",
    "access": "public",
    "description": null,
    "lineNumber": 247,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "disconnect",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#disconnect",
    "access": "public",
    "description": "Disconnect the media sources that feed the visualization.",
    "lineNumber": 262,
    "params": [],
    "return": null
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "reloadBuffer",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#reloadBuffer",
    "access": "public",
    "description": "Redraw the waveform.",
    "lineNumber": 276,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "gotStream",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#gotStream",
    "access": "public",
    "description": "Audio input device is ready.",
    "lineNumber": 288,
    "params": [
      {
        "nullable": null,
        "types": [
          "LocalMediaStream"
        ],
        "spread": false,
        "optional": false,
        "name": "stream",
        "description": "The microphone's media stream."
      }
    ],
    "return": null
  },
  {
    "__docId__": 262,
    "kind": "member",
    "name": "stream",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#stream",
    "access": "public",
    "description": null,
    "lineNumber": 289,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "deviceError",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#deviceError",
    "access": "public",
    "description": "Device error callback.",
    "lineNumber": 302,
    "params": [
      {
        "name": "code",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "extractVersion",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#extractVersion",
    "access": "public",
    "description": "Extract browser version out of the provided user agent string.",
    "lineNumber": 314,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "uastring",
        "description": "userAgent string."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "expr",
        "description": "Regular expression used as match criteria."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pos",
        "description": "position in the version string to be returned."
      }
    ],
    "return": {
      "nullable": false,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "browser version."
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "detectBrowser",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#detectBrowser",
    "access": "public",
    "description": "Browser detector.",
    "lineNumber": 324,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "result containing browser, version and minVersion\n    properties."
    },
    "params": []
  },
  {
    "__docId__": 267,
    "kind": "file",
    "name": "src/plugin/minimap.js",
    "content": "/**\r\n * @typedef {Object} MinimapPluginParams\r\n * @desc Extends the `WavesurferParams` wavesurfer was initialised with\r\n * @property {?string|HTMLElement} container CSS selector or HTML element where\r\n * the ELAN information should be renderer. By default it is simply appended\r\n * after the waveform.\r\n * @property {?boolean} deferInit Set to true to manually call\r\n * `initPlugin('minimap')`\r\n */\r\n\r\n/**\r\n * Renders a smaller version waveform as a minimap of the main waveform.\r\n *\r\n * @implements {PluginClass}\r\n * @extends {Observer}\r\n * @example\r\n * // es6\r\n * import MinimapPlugin from 'wavesurfer.minimap.js';\r\n *\r\n * // commonjs\r\n * var MinimapPlugin = require('wavesurfer.minimap.js');\r\n *\r\n * // if you are using <script> tags\r\n * var MinimapPlugin = window.WaveSurfer.minimap;\r\n *\r\n * // ... initialising wavesurfer with the plugin\r\n * var wavesurfer = WaveSurfer.create({\r\n *   // wavesurfer options ...\r\n *   plugins: [\r\n *     MinimapPlugin.create({\r\n *       // plugin options ...\r\n *     })\r\n *   ]\r\n * });\r\n */\r\nexport default class MinimapPlugin {\r\n    /**\r\n     * Minimap plugin definition factory\r\n     *\r\n     * This function must be used to create a plugin definition which can be\r\n     * used by wavesurfer to correctly instantiate the plugin.\r\n     *\r\n     * @param  {MinimapPluginParams} params parameters use to initialise the plugin\r\n     * @return {PluginDefinition} an object representing the plugin\r\n     */\r\n    static create(params) {\r\n        return {\r\n            name: 'minimap',\r\n            deferInit: params && params.deferInit ? params.deferInit : false,\r\n            params: params,\r\n            staticProps: {\r\n                initMinimap(customConfig) {\r\n                    console.warn('Deprecated initMinimap!');\r\n                    params = customConfig;\r\n                    this.initPlugins('minimap');\r\n                }\r\n            },\r\n            instance: MinimapPlugin\r\n        };\r\n    }\r\n\r\n    constructor(params, ws) {\r\n        this.params = ws.util.extend(\r\n            {},\r\n            ws.params,\r\n            {\r\n                showRegions: false,\r\n                showOverview: false,\r\n                overviewBorderColor: 'green',\r\n                overviewBorderSize: 2,\r\n                // the container should be different\r\n                container: false,\r\n                height: Math.max(Math.round(ws.params.height / 4), 20)\r\n            },\r\n            params,\r\n            {\r\n                scrollParent: false,\r\n                fillParent: true\r\n            }\r\n        );\r\n        // if container is a selector, get the element\r\n        if (typeof params.container === 'string') {\r\n            const el = document.querySelector(params.container);\r\n            if (!el) {\r\n                console.warn(\r\n                    `Wavesurfer minimap container ${\r\n                        params.container\r\n                    } was not found! The minimap will be automatically appended below the waveform.`\r\n                );\r\n            }\r\n            this.params.container = el;\r\n        }\r\n        // if no container is specified add a new element and insert it\r\n        if (!params.container) {\r\n            this.params.container = ws.util.style(\r\n                document.createElement('minimap'),\r\n                {\r\n                    display: 'block'\r\n                }\r\n            );\r\n        }\r\n        this.drawer = new ws.Drawer(this.params.container, this.params);\r\n        this.wavesurfer = ws;\r\n        this.util = ws.util;\r\n        /**\r\n         * Minimap needs to register to ready and waveform-ready events to\r\n         * work with MediaElement, the time when ready is called is different\r\n         * (peaks can not be got)\r\n         *\r\n         * @type {string}\r\n         * @see https://github.com/katspaugh/wavesurfer.js/issues/736\r\n         */\r\n        this.renderEvent =\r\n            ws.params.backend === 'MediaElement' ? 'waveform-ready' : 'ready';\r\n        this.overviewRegion = null;\r\n\r\n        this.drawer.createWrapper();\r\n        this.createElements();\r\n        let isInitialised = false;\r\n\r\n        // ws ready event listener\r\n        this._onShouldRender = () => {\r\n            // only bind the events in the first run\r\n            if (!isInitialised) {\r\n                this.bindWavesurferEvents();\r\n                this.bindMinimapEvents();\r\n                isInitialised = true;\r\n            }\r\n            // if there is no such element, append it to the container (below\r\n            // the waveform)\r\n            if (!document.body.contains(this.params.container)) {\r\n                ws.container.insertBefore(this.params.container, null);\r\n            }\r\n\r\n            if (this.wavesurfer.regions && this.params.showRegions) {\r\n                this.regions();\r\n            }\r\n            this.render();\r\n        };\r\n\r\n        this._onAudioprocess = currentTime => {\r\n            this.drawer.progress(this.wavesurfer.backend.getPlayedPercents());\r\n        };\r\n\r\n        // ws seek event listener\r\n        this._onSeek = () =>\r\n            this.drawer.progress(ws.backend.getPlayedPercents());\r\n\r\n        // event listeners for the overview region\r\n        this._onScroll = e => {\r\n            if (!this.draggingOverview) {\r\n                this.moveOverviewRegion(e.target.scrollLeft / this.ratio);\r\n            }\r\n        };\r\n        this._onMouseover = e => {\r\n            if (this.draggingOverview) {\r\n                this.draggingOverview = false;\r\n            }\r\n        };\r\n        let prevWidth = 0;\r\n        this._onResize = ws.util.debounce(() => {\r\n            if (prevWidth != this.drawer.wrapper.clientWidth) {\r\n                prevWidth = this.drawer.wrapper.clientWidth;\r\n                this.render();\r\n                this.drawer.progress(\r\n                    this.wavesurfer.backend.getPlayedPercents()\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    init() {\r\n        if (this.wavesurfer.isReady) {\r\n            this._onShouldRender();\r\n        }\r\n        this.wavesurfer.on(this.renderEvent, this._onShouldRender);\r\n    }\r\n\r\n    destroy() {\r\n        window.removeEventListener('resize', this._onResize, true);\r\n        window.removeEventListener('orientationchange', this._onResize, true);\r\n        this.wavesurfer.drawer.wrapper.removeEventListener(\r\n            'mouseover',\r\n            this._onMouseover\r\n        );\r\n        this.wavesurfer.un(this.renderEvent, this._onShouldRender);\r\n        this.wavesurfer.un('seek', this._onSeek);\r\n        this.wavesurfer.un('scroll', this._onScroll);\r\n        this.wavesurfer.un('audioprocess', this._onAudioprocess);\r\n        this.drawer.destroy();\r\n        this.overviewRegion = null;\r\n        this.unAll();\r\n    }\r\n\r\n    regions() {\r\n        this.regions = {};\r\n\r\n        this.wavesurfer.on('region-created', region => {\r\n            this.regions[region.id] = region;\r\n            this.renderRegions();\r\n        });\r\n\r\n        this.wavesurfer.on('region-updated', region => {\r\n            this.regions[region.id] = region;\r\n            this.renderRegions();\r\n        });\r\n\r\n        this.wavesurfer.on('region-removed', region => {\r\n            delete this.regions[region.id];\r\n            this.renderRegions();\r\n        });\r\n    }\r\n\r\n    renderRegions() {\r\n        const regionElements = this.drawer.wrapper.querySelectorAll('region');\r\n        let i;\r\n        for (i = 0; i < regionElements.length; ++i) {\r\n            this.drawer.wrapper.removeChild(regionElements[i]);\r\n        }\r\n\r\n        Object.keys(this.regions).forEach(id => {\r\n            const region = this.regions[id];\r\n            const width =\r\n                this.drawer.width *\r\n                ((region.end - region.start) / this.wavesurfer.getDuration());\r\n            const left =\r\n                this.drawer.width *\r\n                (region.start / this.wavesurfer.getDuration());\r\n            const regionElement = this.util.style(\r\n                document.createElement('region'),\r\n                {\r\n                    height: 'inherit',\r\n                    backgroundColor: region.color,\r\n                    width: width + 'px',\r\n                    left: left + 'px',\r\n                    display: 'block',\r\n                    position: 'absolute'\r\n                }\r\n            );\r\n            regionElement.classList.add(id);\r\n            this.drawer.wrapper.appendChild(regionElement);\r\n        });\r\n    }\r\n\r\n    createElements() {\r\n        this.drawer.createElements();\r\n        if (this.params.showOverview) {\r\n            this.overviewRegion = this.util.style(\r\n                document.createElement('overview'),\r\n                {\r\n                    height:\r\n                        this.drawer.wrapper.offsetHeight -\r\n                        this.params.overviewBorderSize * 2 +\r\n                        'px',\r\n                    width: '0px',\r\n                    display: 'block',\r\n                    position: 'absolute',\r\n                    cursor: 'move',\r\n                    border:\r\n                        this.params.overviewBorderSize +\r\n                        'px solid ' +\r\n                        this.params.overviewBorderColor,\r\n                    zIndex: 2,\r\n                    opacity: this.params.overviewOpacity\r\n                }\r\n            );\r\n            this.drawer.wrapper.appendChild(this.overviewRegion);\r\n        }\r\n    }\r\n\r\n    bindWavesurferEvents() {\r\n        window.addEventListener('resize', this._onResize, true);\r\n        window.addEventListener('orientationchange', this._onResize, true);\r\n        this.wavesurfer.on('audioprocess', this._onAudioprocess);\r\n        this.wavesurfer.on('seek', this._onSeek);\r\n        if (this.params.showOverview) {\r\n            this.wavesurfer.on('scroll', this._onScroll);\r\n            this.wavesurfer.drawer.wrapper.addEventListener(\r\n                'mouseover',\r\n                this._onMouseover\r\n            );\r\n        }\r\n    }\r\n\r\n    bindMinimapEvents() {\r\n        const positionMouseDown = {\r\n            clientX: 0,\r\n            clientY: 0\r\n        };\r\n        let relativePositionX = 0;\r\n        let seek = true;\r\n\r\n        // the following event listeners will be destroyed by using\r\n        // this.unAll() and nullifying the DOM node references after\r\n        // removing them\r\n        if (this.params.interact) {\r\n            this.drawer.wrapper.addEventListener('click', event => {\r\n                this.fireEvent('click', event, this.drawer.handleEvent(event));\r\n            });\r\n\r\n            this.on('click', (event, position) => {\r\n                if (seek) {\r\n                    this.drawer.progress(position);\r\n                    this.wavesurfer.seekAndCenter(position);\r\n                } else {\r\n                    seek = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (this.params.showOverview) {\r\n            this.overviewRegion.addEventListener('mousedown', event => {\r\n                this.draggingOverview = true;\r\n                relativePositionX = event.layerX;\r\n                positionMouseDown.clientX = event.clientX;\r\n                positionMouseDown.clientY = event.clientY;\r\n            });\r\n\r\n            this.drawer.wrapper.addEventListener('mousemove', event => {\r\n                if (this.draggingOverview) {\r\n                    this.moveOverviewRegion(\r\n                        event.clientX -\r\n                            this.drawer.container.getBoundingClientRect().left -\r\n                            relativePositionX\r\n                    );\r\n                }\r\n            });\r\n\r\n            this.drawer.wrapper.addEventListener('mouseup', event => {\r\n                if (\r\n                    positionMouseDown.clientX - event.clientX === 0 &&\r\n                    positionMouseDown.clientX - event.clientX === 0\r\n                ) {\r\n                    seek = true;\r\n                    this.draggingOverview = false;\r\n                } else if (this.draggingOverview) {\r\n                    seek = false;\r\n                    this.draggingOverview = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const len = this.drawer.getWidth();\r\n        const peaks = this.wavesurfer.backend.getPeaks(len, 0, len);\r\n        this.drawer.drawPeaks(peaks, len, 0, len);\r\n        this.drawer.progress(this.wavesurfer.backend.getPlayedPercents());\r\n\r\n        if (this.params.showOverview) {\r\n            //get proportional width of overview region considering the respective\r\n            //width of the drawers\r\n            this.ratio = this.wavesurfer.drawer.width / this.drawer.width;\r\n            this.waveShowedWidth = this.wavesurfer.drawer.width / this.ratio;\r\n            this.waveWidth = this.wavesurfer.drawer.width;\r\n            this.overviewWidth = this.drawer.width / this.ratio;\r\n            this.overviewPosition = 0;\r\n            this.moveOverviewRegion(\r\n                this.wavesurfer.drawer.wrapper.scrollLeft / this.ratio\r\n            );\r\n            this.overviewRegion.style.width =\r\n                this.overviewWidth - this.params.overviewBorderSize * 2 + 'px';\r\n        }\r\n    }\r\n\r\n    moveOverviewRegion(pixels) {\r\n        if (pixels < 0) {\r\n            this.overviewPosition = 0;\r\n        } else if (pixels + this.overviewWidth < this.drawer.width) {\r\n            this.overviewPosition = pixels;\r\n        } else {\r\n            this.overviewPosition = this.drawer.width - this.overviewWidth;\r\n        }\r\n        this.overviewRegion.style.left = this.overviewPosition + 'px';\r\n        if (this.draggingOverview) {\r\n            this.wavesurfer.drawer.wrapper.scrollLeft =\r\n                this.overviewPosition * this.ratio;\r\n        }\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/plugin/minimap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 268,
    "kind": "typedef",
    "name": "MinimapPluginParams",
    "memberof": "src/plugin/minimap.js",
    "static": true,
    "longname": "src/plugin/minimap.js~MinimapPluginParams",
    "access": "public",
    "description": "Extends the `WavesurferParams` wavesurfer was initialised with",
    "properties": [
      {
        "nullable": true,
        "types": [
          "string",
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": "CSS selector or HTML element where\nthe ELAN information should be renderer. By default it is simply appended\nafter the waveform."
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "deferInit",
        "description": "Set to true to manually call\n`initPlugin('minimap')`"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "MinimapPluginParams"
    }
  },
  {
    "__docId__": 269,
    "kind": "class",
    "name": "MinimapPlugin",
    "memberof": "src/plugin/minimap.js",
    "static": true,
    "longname": "src/plugin/minimap.js~MinimapPlugin",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/plugin/minimap.js",
    "importStyle": "MinimapPlugin",
    "description": "Renders a smaller version waveform as a minimap of the main waveform.",
    "examples": [
      "// es6\nimport MinimapPlugin from 'wavesurfer.minimap.js';\n\n// commonjs\nvar MinimapPlugin = require('wavesurfer.minimap.js');\n\n// if you are using <script> tags\nvar MinimapPlugin = window.WaveSurfer.minimap;\n\n// ... initialising wavesurfer with the plugin\nvar wavesurfer = WaveSurfer.create({\n  // wavesurfer options ...\n  plugins: [\n    MinimapPlugin.create({\n      // plugin options ...\n    })\n  ]\n});"
    ],
    "lineNumber": 36,
    "interface": false,
    "extends": [
      "Observer"
    ],
    "implements": [
      "PluginClass"
    ]
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "create",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugin/minimap.js~MinimapPlugin.create",
    "access": "public",
    "description": "Minimap plugin definition factory\n\nThis function must be used to create a plugin definition which can be\nused by wavesurfer to correctly instantiate the plugin.",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "MinimapPluginParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "parameters use to initialise the plugin"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PluginDefinition"
      ],
      "spread": false,
      "description": "an object representing the plugin"
    }
  },
  {
    "__docId__": 271,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true
  },
  {
    "__docId__": 272,
    "kind": "member",
    "name": "params",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#params",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "member",
    "name": "drawer",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#drawer",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "member",
    "name": "wavesurfer",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#wavesurfer",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "member",
    "name": "util",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#util",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "member",
    "name": "renderEvent",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#renderEvent",
    "access": "public",
    "description": "Minimap needs to register to ready and waveform-ready events to\nwork with MediaElement, the time when ready is called is different\n(peaks can not be got)",
    "see": [
      "https://github.com/katspaugh/wavesurfer.js/issues/736"
    ],
    "lineNumber": 113,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 277,
    "kind": "member",
    "name": "overviewRegion",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#overviewRegion",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "member",
    "name": "_onShouldRender",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#_onShouldRender",
    "access": "private",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 279,
    "kind": "member",
    "name": "_onAudioprocess",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#_onAudioprocess",
    "access": "private",
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "member",
    "name": "_onSeek",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#_onSeek",
    "access": "private",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "member",
    "name": "_onScroll",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#_onScroll",
    "access": "private",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "_onMouseover",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#_onMouseover",
    "access": "private",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "draggingOverview",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#draggingOverview",
    "access": "public",
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "_onResize",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#_onResize",
    "access": "private",
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "init",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#init",
    "access": "public",
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 286,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "regions",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#regions",
    "access": "public",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "renderRegions",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#renderRegions",
    "access": "public",
    "description": null,
    "lineNumber": 214,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "createElements",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#createElements",
    "access": "public",
    "description": null,
    "lineNumber": 245,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "bindWavesurferEvents",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#bindWavesurferEvents",
    "access": "public",
    "description": null,
    "lineNumber": 271,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "bindMinimapEvents",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#bindMinimapEvents",
    "access": "public",
    "description": null,
    "lineNumber": 285,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "render",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#render",
    "access": "public",
    "description": null,
    "lineNumber": 344,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 299,
    "kind": "member",
    "name": "ratio",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#ratio",
    "access": "public",
    "description": null,
    "lineNumber": 353,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 300,
    "kind": "member",
    "name": "waveShowedWidth",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#waveShowedWidth",
    "access": "public",
    "description": null,
    "lineNumber": 354,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 301,
    "kind": "member",
    "name": "waveWidth",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#waveWidth",
    "access": "public",
    "description": null,
    "lineNumber": 355,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 302,
    "kind": "member",
    "name": "overviewWidth",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#overviewWidth",
    "access": "public",
    "description": null,
    "lineNumber": 356,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 303,
    "kind": "member",
    "name": "overviewPosition",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#overviewPosition",
    "access": "public",
    "description": null,
    "lineNumber": 357,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "moveOverviewRegion",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#moveOverviewRegion",
    "access": "public",
    "description": null,
    "lineNumber": 366,
    "undocument": true,
    "params": [
      {
        "name": "pixels",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 308,
    "kind": "file",
    "name": "src/plugin/regions.js",
    "content": "/**\n * (Single) Region plugin class\n *\n * Must be turned into an observer before instantiating. This is done in\n * RegionsPlugin (main plugin class)\n *\n * @extends {Observer}\n */\nclass Region {\n    constructor(params, ws) {\n        this.wavesurfer = ws;\n        this.wrapper = ws.drawer.wrapper;\n        this.util = ws.util;\n        this.style = this.util.style;\n\n        this.id = params.id == null ? ws.util.getId() : params.id;\n        this.start = Number(params.start) || 0;\n        this.end =\n            params.end == null\n                ? // small marker-like region\n                  this.start +\n                  (4 / this.wrapper.scrollWidth) * this.wavesurfer.getDuration()\n                : Number(params.end);\n        this.resize =\n            params.resize === undefined ? true : Boolean(params.resize);\n        this.drag = params.drag === undefined ? true : Boolean(params.drag);\n        this.loop = Boolean(params.loop);\n        this.color = params.color || 'rgba(0, 0, 0, 0.1)';\n        this.data = params.data || {};\n        this.attributes = params.attributes || {};\n\n        this.maxLength = params.maxLength;\n        this.minLength = params.minLength;\n        this._onRedraw = () => this.updateRender();\n\n        this.scroll = params.scroll !== false && ws.params.scrollParent;\n        this.scrollSpeed = params.scrollSpeed || 1;\n        this.scrollThreshold = params.scrollThreshold || 10;\n\n        this.bindInOut();\n        this.render();\n        this.wavesurfer.on('zoom', this._onRedraw);\n        this.wavesurfer.on('redraw', this._onRedraw);\n        this.wavesurfer.fireEvent('region-created', this);\n    }\n\n    /* Update region params. */\n    update(params) {\n        if (null != params.start) {\n            this.start = Number(params.start);\n        }\n        if (null != params.end) {\n            this.end = Number(params.end);\n        }\n        if (null != params.loop) {\n            this.loop = Boolean(params.loop);\n        }\n        if (null != params.color) {\n            this.color = params.color;\n        }\n        if (null != params.data) {\n            this.data = params.data;\n        }\n        if (null != params.resize) {\n            this.resize = Boolean(params.resize);\n        }\n        if (null != params.drag) {\n            this.drag = Boolean(params.drag);\n        }\n        if (null != params.maxLength) {\n            this.maxLength = Number(params.maxLength);\n        }\n        if (null != params.minLength) {\n            this.minLength = Number(params.minLength);\n        }\n        if (null != params.attributes) {\n            this.attributes = params.attributes;\n        }\n\n        this.updateRender();\n        this.fireEvent('update');\n        this.wavesurfer.fireEvent('region-updated', this);\n    }\n\n    /* Remove a single region. */\n    remove() {\n        if (this.element) {\n            this.wrapper.removeChild(this.element);\n            this.element = null;\n            this.fireEvent('remove');\n            this.wavesurfer.un('zoom', this._onRedraw);\n            this.wavesurfer.un('redraw', this._onRedraw);\n            this.wavesurfer.fireEvent('region-removed', this);\n        }\n    }\n\n    /* Play the audio region. */\n    play() {\n        this.wavesurfer.play(this.start, this.end);\n        this.fireEvent('play');\n        this.wavesurfer.fireEvent('region-play', this);\n    }\n\n    /* Play the region in loop. */\n    playLoop() {\n        this.play();\n        this.once('out', () => this.playLoop());\n    }\n\n    /* Render a region as a DOM element. */\n    render() {\n        const regionEl = document.createElement('region');\n        regionEl.className = 'wavesurfer-region';\n        regionEl.title = this.formatTime(this.start, this.end);\n        regionEl.setAttribute('data-id', this.id);\n\n        for (const attrname in this.attributes) {\n            regionEl.setAttribute(\n                'data-region-' + attrname,\n                this.attributes[attrname]\n            );\n        }\n\n        const width = this.wrapper.scrollWidth;\n        this.style(regionEl, {\n            position: 'absolute',\n            zIndex: 2,\n            height: '100%',\n            top: '0px'\n        });\n\n        /* Resize handles */\n        if (this.resize) {\n            const handleLeft = regionEl.appendChild(\n                document.createElement('handle')\n            );\n            const handleRight = regionEl.appendChild(\n                document.createElement('handle')\n            );\n            handleLeft.className = 'wavesurfer-handle wavesurfer-handle-start';\n            handleRight.className = 'wavesurfer-handle wavesurfer-handle-end';\n            const css = {\n                cursor: 'col-resize',\n                position: 'absolute',\n                left: '0px',\n                top: '0px',\n                width: '1%',\n                maxWidth: '4px',\n                height: '100%'\n            };\n            this.style(handleLeft, css);\n            this.style(handleRight, css);\n            this.style(handleRight, {\n                left: '100%'\n            });\n        }\n\n        this.element = this.wrapper.appendChild(regionEl);\n        this.updateRender();\n        this.bindEvents(regionEl);\n    }\n\n    formatTime(start, end) {\n        return (start == end ? [start] : [start, end])\n            .map(time =>\n                [\n                    Math.floor((time % 3600) / 60), // minutes\n                    ('00' + Math.floor(time % 60)).slice(-2), // seconds\n                    ('000' + Math.floor((time % 1) * 1000)).slice(-3) // miliseconds\n                ].join(':')\n            )\n            .join(' - ');\n    }\n\n    getWidth() {\n        return this.wavesurfer.drawer.width / this.wavesurfer.params.pixelRatio;\n    }\n\n    /* Update element's position, width, color. */\n    updateRender() {\n        const dur = this.wavesurfer.getDuration();\n        const width = this.getWidth();\n\n        if (this.start < 0) {\n            this.start = 0;\n            this.end = this.end - this.start;\n        }\n        if (this.end > dur) {\n            this.end = dur;\n            this.start = dur - (this.end - this.start);\n        }\n\n        if (this.minLength != null) {\n            this.end = Math.max(this.start + this.minLength, this.end);\n        }\n\n        if (this.maxLength != null) {\n            this.end = Math.min(this.start + this.maxLength, this.end);\n        }\n\n        if (this.element != null) {\n            // Calculate the left and width values of the region such that\n            // no gaps appear between regions.\n            const left = Math.round((this.start / dur) * width);\n            const regionWidth = Math.round((this.end / dur) * width) - left;\n\n            this.style(this.element, {\n                left: left + 'px',\n                width: regionWidth + 'px',\n                backgroundColor: this.color,\n                cursor: this.drag ? 'move' : 'default'\n            });\n\n            for (const attrname in this.attributes) {\n                this.element.setAttribute(\n                    'data-region-' + attrname,\n                    this.attributes[attrname]\n                );\n            }\n\n            this.element.title = this.formatTime(this.start, this.end);\n        }\n    }\n\n    /* Bind audio events. */\n    bindInOut() {\n        this.firedIn = false;\n        this.firedOut = false;\n\n        const onProcess = time => {\n            if (\n                !this.firedOut &&\n                this.firedIn &&\n                (this.start >= Math.round(time * 100) / 100 ||\n                    this.end <= Math.round(time * 100) / 100)\n            ) {\n                this.firedOut = true;\n                this.firedIn = false;\n                this.fireEvent('out');\n                this.wavesurfer.fireEvent('region-out', this);\n            }\n            if (!this.firedIn && this.start <= time && this.end > time) {\n                this.firedIn = true;\n                this.firedOut = false;\n                this.fireEvent('in');\n                this.wavesurfer.fireEvent('region-in', this);\n            }\n        };\n\n        this.wavesurfer.backend.on('audioprocess', onProcess);\n\n        this.on('remove', () => {\n            this.wavesurfer.backend.un('audioprocess', onProcess);\n        });\n\n        /* Loop playback. */\n        this.on('out', () => {\n            if (this.loop) {\n                this.wavesurfer.play(this.start);\n            }\n        });\n    }\n\n    /* Bind DOM events. */\n    bindEvents() {\n        this.element.addEventListener('mouseenter', e => {\n            this.fireEvent('mouseenter', e);\n            this.wavesurfer.fireEvent('region-mouseenter', this, e);\n        });\n\n        this.element.addEventListener('mouseleave', e => {\n            this.fireEvent('mouseleave', e);\n            this.wavesurfer.fireEvent('region-mouseleave', this, e);\n        });\n\n        this.element.addEventListener('click', e => {\n            e.preventDefault();\n            this.fireEvent('click', e);\n            this.wavesurfer.fireEvent('region-click', this, e);\n        });\n\n        this.element.addEventListener('dblclick', e => {\n            e.stopPropagation();\n            e.preventDefault();\n            this.fireEvent('dblclick', e);\n            this.wavesurfer.fireEvent('region-dblclick', this, e);\n        });\n\n        /* Drag or resize on mousemove. */\n        (this.drag || this.resize) &&\n            (() => {\n                const container = this.wavesurfer.drawer.container;\n                const duration = this.wavesurfer.getDuration();\n                const scrollSpeed = this.scrollSpeed;\n                const scrollThreshold = this.scrollThreshold;\n                let startTime;\n                let touchId;\n                let drag;\n                let maxScroll;\n                let resize;\n                let updated = false;\n                let scrollDirection;\n                let wrapperRect;\n\n                // Scroll when the user is dragging within the threshold\n                const edgeScroll = e => {\n                    if (!scrollDirection || (!drag && !resize)) {\n                        return;\n                    }\n\n                    // Update scroll position\n                    let scrollLeft =\n                        this.wrapper.scrollLeft + scrollSpeed * scrollDirection;\n                    this.wrapper.scrollLeft = scrollLeft = Math.min(\n                        maxScroll,\n                        Math.max(0, scrollLeft)\n                    );\n\n                    // Update time\n                    const time =\n                        this.wavesurfer.drawer.handleEvent(e) * duration;\n                    const delta = time - startTime;\n                    startTime = time;\n\n                    // Continue dragging or resizing\n                    drag ? this.onDrag(delta) : this.onResize(delta, resize);\n\n                    // Repeat\n                    window.requestAnimationFrame(() => {\n                        edgeScroll(e);\n                    });\n                };\n\n                const onDown = e => {\n                    if (e.touches && e.touches.length > 1) {\n                        return;\n                    }\n                    touchId = e.targetTouches\n                        ? e.targetTouches[0].identifier\n                        : null;\n\n                    e.stopPropagation();\n                    startTime =\n                        this.wavesurfer.drawer.handleEvent(e, true) * duration;\n\n                    // Store for scroll calculations\n                    maxScroll =\n                        this.wrapper.scrollWidth - this.wrapper.clientWidth;\n                    wrapperRect = this.wrapper.getBoundingClientRect();\n\n                    if (e.target.tagName.toLowerCase() == 'handle') {\n                        if (\n                            e.target.classList.contains(\n                                'wavesurfer-handle-start'\n                            )\n                        ) {\n                            resize = 'start';\n                        } else {\n                            resize = 'end';\n                        }\n                    } else {\n                        drag = true;\n                        resize = false;\n                    }\n                };\n                const onUp = e => {\n                    if (e.touches && e.touches.length > 1) {\n                        return;\n                    }\n\n                    if (drag || resize) {\n                        drag = false;\n                        scrollDirection = null;\n                        resize = false;\n                    }\n\n                    if (updated) {\n                        updated = false;\n                        this.util.preventClick();\n                        this.fireEvent('update-end', e);\n                        this.wavesurfer.fireEvent('region-update-end', this, e);\n                    }\n                };\n                const onMove = e => {\n                    if (e.touches && e.touches.length > 1) {\n                        return;\n                    }\n                    if (\n                        e.targetTouches &&\n                        e.targetTouches[0].identifier != touchId\n                    ) {\n                        return;\n                    }\n\n                    if (drag || resize) {\n                        const oldTime = startTime;\n                        const time =\n                            this.wavesurfer.drawer.handleEvent(e) * duration;\n                        const delta = time - startTime;\n                        startTime = time;\n\n                        // Drag\n                        if (this.drag && drag) {\n                            updated = updated || !!delta;\n                            this.onDrag(delta);\n                        }\n\n                        // Resize\n                        if (this.resize && resize) {\n                            updated = updated || !!delta;\n                            this.onResize(delta, resize);\n                        }\n\n                        if (\n                            this.scroll &&\n                            container.clientWidth < this.wrapper.scrollWidth\n                        ) {\n                            if (drag) {\n                                // The threshold is not between the mouse and the container edge\n                                // but is between the region and the container edge\n                                const regionRect = this.element.getBoundingClientRect();\n                                let x = regionRect.left - wrapperRect.left;\n\n                                // Check direction\n                                if (time < oldTime && x >= 0) {\n                                    scrollDirection = -1;\n                                } else if (\n                                    time > oldTime &&\n                                    x + regionRect.width <= wrapperRect.right\n                                ) {\n                                    scrollDirection = 1;\n                                }\n\n                                // Check that we are still beyond the threshold\n                                if (\n                                    (scrollDirection === -1 &&\n                                        x > scrollThreshold) ||\n                                    (scrollDirection === 1 &&\n                                        x + regionRect.width <\n                                            wrapperRect.right - scrollThreshold)\n                                ) {\n                                    scrollDirection = null;\n                                }\n                            } else {\n                                // Mouse based threshold\n                                let x = e.clientX - wrapperRect.left;\n\n                                // Check direction\n                                if (x <= scrollThreshold) {\n                                    scrollDirection = -1;\n                                } else if (\n                                    x >=\n                                    wrapperRect.right - scrollThreshold\n                                ) {\n                                    scrollDirection = 1;\n                                } else {\n                                    scrollDirection = null;\n                                }\n                            }\n\n                            scrollDirection && edgeScroll(e);\n                        }\n                    }\n                };\n\n                this.element.addEventListener('mousedown', onDown);\n                this.element.addEventListener('touchstart', onDown);\n\n                this.wrapper.addEventListener('mousemove', onMove);\n                this.wrapper.addEventListener('touchmove', onMove);\n\n                document.body.addEventListener('mouseup', onUp);\n                document.body.addEventListener('touchend', onUp);\n\n                this.on('remove', () => {\n                    document.body.removeEventListener('mouseup', onUp);\n                    document.body.removeEventListener('touchend', onUp);\n                    this.wrapper.removeEventListener('mousemove', onMove);\n                    this.wrapper.removeEventListener('touchmove', onMove);\n                });\n\n                this.wavesurfer.on('destroy', () => {\n                    document.body.removeEventListener('mouseup', onUp);\n                    document.body.removeEventListener('touchend', onUp);\n                });\n            })();\n    }\n\n    onDrag(delta) {\n        const maxEnd = this.wavesurfer.getDuration();\n        if (this.end + delta > maxEnd || this.start + delta < 0) {\n            return;\n        }\n\n        this.update({\n            start: this.start + delta,\n            end: this.end + delta\n        });\n    }\n\n    onResize(delta, direction) {\n        if (direction == 'start') {\n            this.update({\n                start: Math.min(this.start + delta, this.end),\n                end: Math.max(this.start + delta, this.end)\n            });\n        } else {\n            this.update({\n                start: Math.min(this.end + delta, this.start),\n                end: Math.max(this.end + delta, this.start)\n            });\n        }\n    }\n}\n\n/**\n * @typedef {Object} RegionsPluginParams\n * @property {?boolean} dragSelection Enable creating regions by dragging wih\n * the mouse\n * @property {?RegionParams[]} regions Regions that should be added upon\n * initialisation\n * @property {number} slop=2 The sensitivity of the mouse dragging\n * @property {?boolean} deferInit Set to true to manually call\n * `initPlugin('regions')`\n */\n\n/**\n * @typedef {Object} RegionParams\n * @desc The parameters used to describe a region.\n * @example wavesurfer.addRegion(regionParams);\n * @property {string} id=→random The id of the region\n * @property {number} start=0 The start position of the region (in seconds).\n * @property {number} end=0 The end position of the region (in seconds).\n * @property {?boolean} loop Whether to loop the region when played back.\n * @property {boolean} drag=true Allow/dissallow dragging the region.\n * @property {boolean} resize=true Allow/dissallow resizing the region.\n * @property {string} [color='rgba(0, 0, 0, 0.1)'] HTML color code.\n */\n\n/**\n * Regions are visual overlays on waveform that can be used to play and loop\n * portions of audio. Regions can be dragged and resized.\n *\n * Visual customization is possible via CSS (using the selectors\n * `.wavesurfer-region` and `.wavesurfer-handle`).\n *\n * @implements {PluginClass}\n * @extends {Observer}\n *\n * @example\n * // es6\n * import RegionsPlugin from 'wavesurfer.regions.js';\n *\n * // commonjs\n * var RegionsPlugin = require('wavesurfer.regions.js');\n *\n * // if you are using <script> tags\n * var RegionsPlugin = window.WaveSurfer.regions;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     RegionsPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class RegionsPlugin {\n    /**\n     * Regions plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param {RegionsPluginParams} params parameters use to initialise the plugin\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    static create(params) {\n        return {\n            name: 'regions',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            staticProps: {\n                initRegions() {\n                    console.warn(\n                        'Deprecated initRegions! Use wavesurfer.initPlugins(\"regions\") instead!'\n                    );\n                    this.initPlugin('regions');\n                },\n\n                addRegion(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    return this.regions.add(options);\n                },\n\n                clearRegions() {\n                    this.regions && this.regions.clear();\n                },\n\n                enableDragSelection(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    this.regions.enableDragSelection(options);\n                },\n\n                disableDragSelection() {\n                    this.regions.disableDragSelection();\n                }\n            },\n            instance: RegionsPlugin\n        };\n    }\n\n    constructor(params, ws) {\n        this.params = params;\n        this.wavesurfer = ws;\n        this.util = ws.util;\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            this.util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Region.prototype[key] = this.util.Observer.prototype[key];\n        });\n        this.wavesurfer.Region = Region;\n\n        // Id-based hash of regions.\n        this.list = {};\n        this._onReady = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            if (this.params.regions) {\n                this.params.regions.forEach(region => {\n                    this.add(region);\n                });\n            }\n            if (this.params.dragSelection) {\n                this.enableDragSelection(this.params);\n            }\n        };\n    }\n\n    init() {\n        // Check if ws is ready\n        if (this.wavesurfer.isReady) {\n            this._onReady();\n        }\n        this.wavesurfer.on('ready', this._onReady);\n    }\n\n    destroy() {\n        this.wavesurfer.un('ready', this._onReady);\n        this.disableDragSelection();\n        this.clear();\n    }\n    /* Add a region. */\n    add(params) {\n        const region = new this.wavesurfer.Region(params, this.wavesurfer);\n\n        this.list[region.id] = region;\n\n        region.on('remove', () => {\n            delete this.list[region.id];\n        });\n\n        return region;\n    }\n\n    /* Remove all regions. */\n    clear() {\n        Object.keys(this.list).forEach(id => {\n            this.list[id].remove();\n        });\n    }\n\n    enableDragSelection(params) {\n        const slop = params.slop || 2;\n        const container = this.wavesurfer.drawer.container;\n        const scroll =\n            params.scroll !== false && this.wavesurfer.params.scrollParent;\n        const scrollSpeed = params.scrollSpeed || 1;\n        const scrollThreshold = params.scrollThreshold || 10;\n        let drag;\n        let duration = this.wavesurfer.getDuration();\n        let maxScroll;\n        let start;\n        let region;\n        let touchId;\n        let pxMove = 0;\n        let scrollDirection;\n        let wrapperRect;\n\n        // Scroll when the user is dragging within the threshold\n        const edgeScroll = e => {\n            if (!region || !scrollDirection) {\n                return;\n            }\n\n            // Update scroll position\n            let scrollLeft =\n                this.wrapper.scrollLeft + scrollSpeed * scrollDirection;\n            this.wrapper.scrollLeft = scrollLeft = Math.min(\n                maxScroll,\n                Math.max(0, scrollLeft)\n            );\n\n            // Update range\n            const end = this.wavesurfer.drawer.handleEvent(e);\n            region.update({\n                start: Math.min(end * duration, start * duration),\n                end: Math.max(end * duration, start * duration)\n            });\n\n            // Check that there is more to scroll and repeat\n            if (scrollLeft < maxScroll && scrollLeft > 0) {\n                window.requestAnimationFrame(() => {\n                    edgeScroll(e);\n                });\n            }\n        };\n\n        const eventDown = e => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n            duration = this.wavesurfer.getDuration();\n            touchId = e.targetTouches ? e.targetTouches[0].identifier : null;\n\n            // Store for scroll calculations\n            maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n            wrapperRect = this.wrapper.getBoundingClientRect();\n\n            drag = true;\n            start = this.wavesurfer.drawer.handleEvent(e, true);\n            region = null;\n            scrollDirection = null;\n        };\n        this.wrapper.addEventListener('mousedown', eventDown);\n        this.wrapper.addEventListener('touchstart', eventDown);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchstart', eventDown);\n            this.wrapper.removeEventListener('mousedown', eventDown);\n        });\n\n        const eventUp = e => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n\n            drag = false;\n            pxMove = 0;\n            scrollDirection = null;\n\n            if (region) {\n                this.util.preventClick();\n                region.fireEvent('update-end', e);\n                this.wavesurfer.fireEvent('region-update-end', region, e);\n            }\n\n            region = null;\n        };\n        this.wrapper.addEventListener('mouseup', eventUp);\n        this.wrapper.addEventListener('touchend', eventUp);\n\n        document.body.addEventListener('mouseup', eventUp);\n        document.body.addEventListener('touchend', eventUp);\n        this.on('disable-drag-selection', () => {\n            document.body.removeEventListener('mouseup', eventUp);\n            document.body.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('mouseup', eventUp);\n        });\n\n        const eventMove = e => {\n            if (!drag) {\n                return;\n            }\n            if (++pxMove <= slop) {\n                return;\n            }\n\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n            if (e.targetTouches && e.targetTouches[0].identifier != touchId) {\n                return;\n            }\n\n            if (!region) {\n                region = this.add(params || {});\n            }\n\n            const end = this.wavesurfer.drawer.handleEvent(e);\n            region.update({\n                start: Math.min(end * duration, start * duration),\n                end: Math.max(end * duration, start * duration)\n            });\n\n            // If scrolling is enabled\n            if (scroll && container.clientWidth < this.wrapper.scrollWidth) {\n                // Check threshold based on mouse\n                const x = e.clientX - wrapperRect.left;\n                if (x <= scrollThreshold) {\n                    scrollDirection = -1;\n                } else if (x >= wrapperRect.right - scrollThreshold) {\n                    scrollDirection = 1;\n                } else {\n                    scrollDirection = null;\n                }\n                scrollDirection && edgeScroll(e);\n            }\n        };\n        this.wrapper.addEventListener('mousemove', eventMove);\n        this.wrapper.addEventListener('touchmove', eventMove);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchmove', eventMove);\n            this.wrapper.removeEventListener('mousemove', eventMove);\n        });\n    }\n\n    disableDragSelection() {\n        this.fireEvent('disable-drag-selection');\n    }\n\n    /* Get current region\n     *  The smallest region that contains the current time.\n     *  If several such regions exist, we take the first.\n     *  Return null if none exist. */\n    getCurrentRegion() {\n        const time = this.wavesurfer.getCurrentTime();\n        let min = null;\n        Object.keys(this.list).forEach(id => {\n            const cur = this.list[id];\n            if (cur.start <= time && cur.end >= time) {\n                if (!min || cur.end - cur.start < min.end - min.start) {\n                    min = cur;\n                }\n            }\n        });\n\n        return min;\n    }\n}\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/plugin/regions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 309,
    "kind": "class",
    "name": "Region",
    "memberof": "src/plugin/regions.js",
    "static": true,
    "longname": "src/plugin/regions.js~Region",
    "access": "public",
    "export": false,
    "importPath": "wavesurfer.js/src/plugin/regions.js",
    "importStyle": null,
    "description": "(Single) Region plugin class\n\nMust be turned into an observer before instantiating. This is done in\nRegionsPlugin (main plugin class)",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "Observer"
    ],
    "ignore": true
  },
  {
    "__docId__": 310,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 311,
    "kind": "member",
    "name": "wavesurfer",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#wavesurfer",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "member",
    "name": "wrapper",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#wrapper",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 313,
    "kind": "member",
    "name": "util",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#util",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "member",
    "name": "style",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#style",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "member",
    "name": "id",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#id",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "member",
    "name": "start",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#start",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "member",
    "name": "end",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#end",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "member",
    "name": "resize",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#resize",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 319,
    "kind": "member",
    "name": "drag",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#drag",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 320,
    "kind": "member",
    "name": "loop",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#loop",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "member",
    "name": "color",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#color",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 322,
    "kind": "member",
    "name": "data",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#data",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 323,
    "kind": "member",
    "name": "attributes",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#attributes",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 324,
    "kind": "member",
    "name": "maxLength",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#maxLength",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 325,
    "kind": "member",
    "name": "minLength",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#minLength",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 326,
    "kind": "member",
    "name": "_onRedraw",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#_onRedraw",
    "access": "private",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 327,
    "kind": "member",
    "name": "scroll",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#scroll",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 328,
    "kind": "member",
    "name": "scrollSpeed",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#scrollSpeed",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 329,
    "kind": "member",
    "name": "scrollThreshold",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#scrollThreshold",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "update",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#update",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "remove",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#remove",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 342,
    "kind": "member",
    "name": "element",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#element",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "play",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#play",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "playLoop",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#playLoop",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "render",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#render",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "formatTime",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#formatTime",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "end",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "getWidth",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#getWidth",
    "access": "public",
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "updateRender",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#updateRender",
    "access": "public",
    "description": null,
    "lineNumber": 180,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 356,
    "kind": "method",
    "name": "bindInOut",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#bindInOut",
    "access": "public",
    "description": null,
    "lineNumber": 226,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 357,
    "kind": "member",
    "name": "firedIn",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#firedIn",
    "access": "public",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 358,
    "kind": "member",
    "name": "firedOut",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#firedOut",
    "access": "public",
    "description": null,
    "lineNumber": 228,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "bindEvents",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#bindEvents",
    "access": "public",
    "description": null,
    "lineNumber": 265,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "onDrag",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#onDrag",
    "access": "public",
    "description": null,
    "lineNumber": 489,
    "undocument": true,
    "params": [
      {
        "name": "delta",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "onResize",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#onResize",
    "access": "public",
    "description": null,
    "lineNumber": 501,
    "undocument": true,
    "params": [
      {
        "name": "delta",
        "types": [
          "*"
        ]
      },
      {
        "name": "direction",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 366,
    "kind": "typedef",
    "name": "RegionsPluginParams",
    "memberof": "src/plugin/regions.js",
    "static": true,
    "longname": "src/plugin/regions.js~RegionsPluginParams",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "dragSelection",
        "description": "Enable creating regions by dragging wih\nthe mouse"
      },
      {
        "nullable": true,
        "types": [
          "RegionParams[]"
        ],
        "spread": false,
        "optional": false,
        "name": "regions",
        "description": "Regions that should be added upon\ninitialisation"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "slop",
        "description": "The sensitivity of the mouse dragging"
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "deferInit",
        "description": "Set to true to manually call\n`initPlugin('regions')`"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "RegionsPluginParams"
    }
  },
  {
    "__docId__": 367,
    "kind": "typedef",
    "name": "RegionParams",
    "memberof": "src/plugin/regions.js",
    "static": true,
    "longname": "src/plugin/regions.js~RegionParams",
    "access": "public",
    "description": "The parameters used to describe a region.",
    "examples": [
      "wavesurfer.addRegion(regionParams);"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "→random",
        "defaultRaw": "→random",
        "name": "id",
        "description": "The id of the region"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "start",
        "description": "The start position of the region (in seconds)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "end",
        "description": "The end position of the region (in seconds)."
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "loop",
        "description": "Whether to loop the region when played back."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "drag",
        "description": "Allow/dissallow dragging the region."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "resize",
        "description": "Allow/dissallow resizing the region."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'rgba(0, 0, 0, 0.1)'",
        "defaultRaw": "'rgba(0, 0, 0, 0.1)'",
        "name": "color",
        "description": "HTML color code."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "RegionParams"
    }
  },
  {
    "__docId__": 368,
    "kind": "class",
    "name": "RegionsPlugin",
    "memberof": "src/plugin/regions.js",
    "static": true,
    "longname": "src/plugin/regions.js~RegionsPlugin",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/plugin/regions.js",
    "importStyle": "RegionsPlugin",
    "description": "Regions are visual overlays on waveform that can be used to play and loop\nportions of audio. Regions can be dragged and resized.\n\nVisual customization is possible via CSS (using the selectors\n`.wavesurfer-region` and `.wavesurfer-handle`).",
    "examples": [
      "// es6\nimport RegionsPlugin from 'wavesurfer.regions.js';\n\n// commonjs\nvar RegionsPlugin = require('wavesurfer.regions.js');\n\n// if you are using <script> tags\nvar RegionsPlugin = window.WaveSurfer.regions;\n\n// ... initialising wavesurfer with the plugin\nvar wavesurfer = WaveSurfer.create({\n  // wavesurfer options ...\n  plugins: [\n    RegionsPlugin.create({\n      // plugin options ...\n    })\n  ]\n});"
    ],
    "lineNumber": 570,
    "interface": false,
    "extends": [
      "Observer"
    ],
    "implements": [
      "PluginClass"
    ]
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "create",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugin/regions.js~RegionsPlugin.create",
    "access": "public",
    "description": "Regions plugin definition factory\n\nThis function must be used to create a plugin definition which can be\nused by wavesurfer to correctly instantiate the plugin.",
    "lineNumber": 580,
    "params": [
      {
        "nullable": null,
        "types": [
          "RegionsPluginParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "parameters use to initialise the plugin"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PluginDefinition"
      ],
      "spread": false,
      "description": "an object representing the plugin"
    }
  },
  {
    "__docId__": 370,
    "kind": "member",
    "name": "regions",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "static": true,
    "longname": "src/plugin/regions.js~RegionsPlugin.regions",
    "access": "public",
    "description": null,
    "lineNumber": 601,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 371,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 619,
    "undocument": true
  },
  {
    "__docId__": 372,
    "kind": "member",
    "name": "params",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#params",
    "access": "public",
    "description": null,
    "lineNumber": 620,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 373,
    "kind": "member",
    "name": "wavesurfer",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#wavesurfer",
    "access": "public",
    "description": null,
    "lineNumber": 621,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 374,
    "kind": "member",
    "name": "util",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#util",
    "access": "public",
    "description": null,
    "lineNumber": 622,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 375,
    "kind": "member",
    "name": "list",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#list",
    "access": "public",
    "description": null,
    "lineNumber": 634,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 376,
    "kind": "member",
    "name": "_onReady",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#_onReady",
    "access": "private",
    "description": null,
    "lineNumber": 635,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 377,
    "kind": "member",
    "name": "wrapper",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#wrapper",
    "access": "public",
    "description": null,
    "lineNumber": 636,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "init",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#init",
    "access": "public",
    "description": null,
    "lineNumber": 648,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 379,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 656,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "add",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#add",
    "access": "public",
    "description": null,
    "lineNumber": 662,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "clear",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#clear",
    "access": "public",
    "description": null,
    "lineNumber": 675,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 382,
    "kind": "method",
    "name": "enableDragSelection",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#enableDragSelection",
    "access": "public",
    "description": null,
    "lineNumber": 681,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 383,
    "kind": "method",
    "name": "disableDragSelection",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#disableDragSelection",
    "access": "public",
    "description": null,
    "lineNumber": 826,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 384,
    "kind": "method",
    "name": "getCurrentRegion",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#getCurrentRegion",
    "access": "public",
    "description": null,
    "lineNumber": 834,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "file",
    "name": "src/plugin/spectrogram.js",
    "content": "/**\r\n * Calculate FFT - Based on https://github.com/corbanbrook/dsp.js\r\n */\r\n/* eslint-disable complexity, no-redeclare, no-var, one-var */\r\nconst FFT = function(bufferSize, sampleRate, windowFunc, alpha) {\r\n    this.bufferSize = bufferSize;\r\n    this.sampleRate = sampleRate;\r\n    this.bandwidth = (2 / bufferSize) * (sampleRate / 2);\r\n\r\n    this.sinTable = new Float32Array(bufferSize);\r\n    this.cosTable = new Float32Array(bufferSize);\r\n    this.windowValues = new Float32Array(bufferSize);\r\n    this.reverseTable = new Uint32Array(bufferSize);\r\n\r\n    this.peakBand = 0;\r\n    this.peak = 0;\r\n\r\n    switch (windowFunc) {\r\n        case 'bartlett':\r\n            for (var i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    (2 / (bufferSize - 1)) *\r\n                    ((bufferSize - 1) / 2 - Math.abs(i - (bufferSize - 1) / 2));\r\n            }\r\n            break;\r\n        case 'bartlettHann':\r\n            for (var i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    0.62 -\r\n                    0.48 * Math.abs(i / (bufferSize - 1) - 0.5) -\r\n                    0.38 * Math.cos((Math.PI * 2 * i) / (bufferSize - 1));\r\n            }\r\n            break;\r\n        case 'blackman':\r\n            alpha = alpha || 0.16;\r\n            for (var i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    (1 - alpha) / 2 -\r\n                    0.5 * Math.cos((Math.PI * 2 * i) / (bufferSize - 1)) +\r\n                    (alpha / 2) *\r\n                        Math.cos((4 * Math.PI * i) / (bufferSize - 1));\r\n            }\r\n            break;\r\n        case 'cosine':\r\n            for (var i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] = Math.cos(\r\n                    (Math.PI * i) / (bufferSize - 1) - Math.PI / 2\r\n                );\r\n            }\r\n            break;\r\n        case 'gauss':\r\n            alpha = alpha || 0.25;\r\n            for (var i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] = Math.pow(\r\n                    Math.E,\r\n                    -0.5 *\r\n                        Math.pow(\r\n                            (i - (bufferSize - 1) / 2) /\r\n                                ((alpha * (bufferSize - 1)) / 2),\r\n                            2\r\n                        )\r\n                );\r\n            }\r\n            break;\r\n        case 'hamming':\r\n            for (var i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    (0.54 - 0.46) *\r\n                    Math.cos((Math.PI * 2 * i) / (bufferSize - 1));\r\n            }\r\n            break;\r\n        case 'hann':\r\n        case undefined:\r\n            for (var i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    0.5 * (1 - Math.cos((Math.PI * 2 * i) / (bufferSize - 1)));\r\n            }\r\n            break;\r\n        case 'lanczoz':\r\n            for (var i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    Math.sin(Math.PI * ((2 * i) / (bufferSize - 1) - 1)) /\r\n                    (Math.PI * ((2 * i) / (bufferSize - 1) - 1));\r\n            }\r\n            break;\r\n        case 'rectangular':\r\n            for (var i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] = 1;\r\n            }\r\n            break;\r\n        case 'triangular':\r\n            for (var i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    (2 / bufferSize) *\r\n                    (bufferSize / 2 - Math.abs(i - (bufferSize - 1) / 2));\r\n            }\r\n            break;\r\n        default:\r\n            throw Error(\"No such window function '\" + windowFunc + \"'\");\r\n    }\r\n\r\n    var limit = 1;\r\n    var bit = bufferSize >> 1;\r\n\r\n    var i;\r\n\r\n    while (limit < bufferSize) {\r\n        for (i = 0; i < limit; i++) {\r\n            this.reverseTable[i + limit] = this.reverseTable[i] + bit;\r\n        }\r\n\r\n        limit = limit << 1;\r\n        bit = bit >> 1;\r\n    }\r\n\r\n    for (i = 0; i < bufferSize; i++) {\r\n        this.sinTable[i] = Math.sin(-Math.PI / i);\r\n        this.cosTable[i] = Math.cos(-Math.PI / i);\r\n    }\r\n\r\n    this.calculateSpectrum = function(buffer) {\r\n        // Locally scope variables for speed up\r\n        var bufferSize = this.bufferSize,\r\n            cosTable = this.cosTable,\r\n            sinTable = this.sinTable,\r\n            reverseTable = this.reverseTable,\r\n            real = new Float32Array(bufferSize),\r\n            imag = new Float32Array(bufferSize),\r\n            bSi = 2 / this.bufferSize,\r\n            sqrt = Math.sqrt,\r\n            rval,\r\n            ival,\r\n            mag,\r\n            spectrum = new Float32Array(bufferSize / 2);\r\n\r\n        var k = Math.floor(Math.log(bufferSize) / Math.LN2);\r\n\r\n        if (Math.pow(2, k) !== bufferSize) {\r\n            throw 'Invalid buffer size, must be a power of 2.';\r\n        }\r\n        if (bufferSize !== buffer.length) {\r\n            throw 'Supplied buffer is not the same size as defined FFT. FFT Size: ' +\r\n                bufferSize +\r\n                ' Buffer Size: ' +\r\n                buffer.length;\r\n        }\r\n\r\n        var halfSize = 1,\r\n            phaseShiftStepReal,\r\n            phaseShiftStepImag,\r\n            currentPhaseShiftReal,\r\n            currentPhaseShiftImag,\r\n            off,\r\n            tr,\r\n            ti,\r\n            tmpReal;\r\n\r\n        for (var i = 0; i < bufferSize; i++) {\r\n            real[i] =\r\n                buffer[reverseTable[i]] * this.windowValues[reverseTable[i]];\r\n            imag[i] = 0;\r\n        }\r\n\r\n        while (halfSize < bufferSize) {\r\n            phaseShiftStepReal = cosTable[halfSize];\r\n            phaseShiftStepImag = sinTable[halfSize];\r\n\r\n            currentPhaseShiftReal = 1;\r\n            currentPhaseShiftImag = 0;\r\n\r\n            for (var fftStep = 0; fftStep < halfSize; fftStep++) {\r\n                var i = fftStep;\r\n\r\n                while (i < bufferSize) {\r\n                    off = i + halfSize;\r\n                    tr =\r\n                        currentPhaseShiftReal * real[off] -\r\n                        currentPhaseShiftImag * imag[off];\r\n                    ti =\r\n                        currentPhaseShiftReal * imag[off] +\r\n                        currentPhaseShiftImag * real[off];\r\n\r\n                    real[off] = real[i] - tr;\r\n                    imag[off] = imag[i] - ti;\r\n                    real[i] += tr;\r\n                    imag[i] += ti;\r\n\r\n                    i += halfSize << 1;\r\n                }\r\n\r\n                tmpReal = currentPhaseShiftReal;\r\n                currentPhaseShiftReal =\r\n                    tmpReal * phaseShiftStepReal -\r\n                    currentPhaseShiftImag * phaseShiftStepImag;\r\n                currentPhaseShiftImag =\r\n                    tmpReal * phaseShiftStepImag +\r\n                    currentPhaseShiftImag * phaseShiftStepReal;\r\n            }\r\n\r\n            halfSize = halfSize << 1;\r\n        }\r\n\r\n        for (var i = 0, N = bufferSize / 2; i < N; i++) {\r\n            rval = real[i];\r\n            ival = imag[i];\r\n            mag = bSi * sqrt(rval * rval + ival * ival);\r\n\r\n            if (mag > this.peak) {\r\n                this.peakBand = i;\r\n                this.peak = mag;\r\n            }\r\n            spectrum[i] = mag;\r\n        }\r\n        return spectrum;\r\n    };\r\n};\r\n/* eslint-enable complexity, no-redeclare, no-var, one-var */\r\n\r\n/**\r\n * @typedef {Object} SpectrogramPluginParams\r\n * @property {string|HTMLElement} container Selector of element or element in\r\n * which to render\r\n * @property {number} fftSamples=512 number of samples to fetch to FFT. Must be\r\n * a pwer of 2.\r\n * @property {number} noverlap Size of the overlapping window. Must be <\r\n * fftSamples. Auto deduced from canvas size by default.\r\n * @property {string} windowFunc='hann' The window function to be used. One of\r\n * these: `'bartlett'`, `'bartlettHann'`, `'blackman'`, `'cosine'`, `'gauss'`,\r\n * `'hamming'`, `'hann'`, `'lanczoz'`, `'rectangular'`, `'triangular'`\r\n * @property {?number} alpha Some window functions have this extra value.\r\n * (Between 0 and 1)\r\n * @property {number} pixelRatio=wavesurfer.params.pixelRatio to control the\r\n * size of the spectrogram in relation with its canvas. 1 = Draw on the whole\r\n * canvas. 2 = Draw on a quarter (1/2 the length and 1/2 the width)\r\n * @property {?boolean} deferInit Set to true to manually call\r\n * `initPlugin('spectrogram')`\r\n */\r\n\r\n/**\r\n * Render a spectrogram visualisation of the audio.\r\n *\r\n * @implements {PluginClass}\r\n * @extends {Observer}\r\n * @example\r\n * // es6\r\n * import SpectrogramPlugin from 'wavesurfer.spectrogram.js';\r\n *\r\n * // commonjs\r\n * var SpectrogramPlugin = require('wavesurfer.spectrogram.js');\r\n *\r\n * // if you are using <script> tags\r\n * var SpectrogramPlugin = window.WaveSurfer.spectrogram;\r\n *\r\n * // ... initialising wavesurfer with the plugin\r\n * var wavesurfer = WaveSurfer.create({\r\n *   // wavesurfer options ...\r\n *   plugins: [\r\n *     SpectrogramPlugin.create({\r\n *       // plugin options ...\r\n *     })\r\n *   ]\r\n * });\r\n */\r\nexport default class SpectrogramPlugin {\r\n    /**\r\n     * Spectrogram plugin definition factory\r\n     *\r\n     * This function must be used to create a plugin definition which can be\r\n     * used by wavesurfer to correctly instantiate the plugin.\r\n     *\r\n     * @param  {SpectrogramPluginParams} params parameters use to initialise the plugin\r\n     * @return {PluginDefinition} an object representing the plugin\r\n     */\r\n    static create(params) {\r\n        return {\r\n            name: 'spectrogram',\r\n            deferInit: params && params.deferInit ? params.deferInit : false,\r\n            params: params,\r\n            staticProps: {\r\n                FFT: FFT\r\n            },\r\n            instance: SpectrogramPlugin\r\n        };\r\n    }\r\n\r\n    constructor(params, ws) {\r\n        this.params = params;\r\n        this.wavesurfer = ws;\r\n        this.util = ws.util;\r\n\r\n        this.frequenciesDataUrl = params.frequenciesDataUrl;\r\n        this._onScroll = e => {\r\n            this.updateScroll(e);\r\n        };\r\n        this._onReady = () => {\r\n            const drawer = (this.drawer = ws.drawer);\r\n\r\n            this.container =\r\n                'string' == typeof params.container\r\n                    ? document.querySelector(params.container)\r\n                    : params.container;\r\n\r\n            if (!this.container) {\r\n                throw Error('No container for WaveSurfer spectrogram');\r\n            }\r\n\r\n            this.width = drawer.width;\r\n            this.pixelRatio = this.params.pixelRatio || ws.params.pixelRatio;\r\n            this.fftSamples =\r\n                this.params.fftSamples || ws.params.fftSamples || 512;\r\n            this.height = this.fftSamples / 2;\r\n            this.noverlap = params.noverlap;\r\n            this.windowFunc = params.windowFunc;\r\n            this.alpha = params.alpha;\r\n\r\n            this.createWrapper();\r\n            this.createCanvas();\r\n            this.render();\r\n\r\n            drawer.wrapper.addEventListener('scroll', this._onScroll);\r\n            ws.on('redraw', () => this.render());\r\n        };\r\n    }\r\n\r\n    init() {\r\n        // Check if ws is ready\r\n        if (this.wavesurfer.isReady) {\r\n            this._onReady();\r\n        }\r\n\r\n        this.wavesurfer.on('ready', this._onReady);\r\n    }\r\n\r\n    destroy() {\r\n        this.unAll();\r\n        this.wavesurfer.un('ready', this._onReady);\r\n        this.drawer.wrapper.removeEventListener('scroll', this._onScroll);\r\n        this.wavesurfer = null;\r\n        this.util = null;\r\n        this.params = null;\r\n        if (this.wrapper) {\r\n            this.wrapper.parentNode.removeChild(this.wrapper);\r\n            this.wrapper = null;\r\n        }\r\n    }\r\n\r\n    createWrapper() {\r\n        const prevSpectrogram = this.container.querySelector('spectrogram');\r\n        if (prevSpectrogram) {\r\n            this.container.removeChild(prevSpectrogram);\r\n        }\r\n        const wsParams = this.wavesurfer.params;\r\n        this.wrapper = document.createElement('spectrogram');\r\n        // if labels are active\r\n        if (this.params.labels) {\r\n            const labelsEl = (this.labelsEl = document.createElement('canvas'));\r\n            labelsEl.classList.add('spec-labels');\r\n            this.drawer.style(labelsEl, {\r\n                left: 0,\r\n                position: 'absolute',\r\n                zIndex: 9,\r\n                height: `${this.height / this.pixelRatio}px`,\r\n                width: `${55 / this.pixelRatio}px`\r\n            });\r\n            this.wrapper.appendChild(labelsEl);\r\n            // can be customized in next version\r\n            this.loadLabels(\r\n                'rgba(68,68,68,0.5)',\r\n                '12px',\r\n                '10px',\r\n                '',\r\n                '#fff',\r\n                '#f7f7f7',\r\n                'center',\r\n                '#specLabels'\r\n            );\r\n        }\r\n\r\n        this.drawer.style(this.wrapper, {\r\n            display: 'block',\r\n            position: 'relative',\r\n            userSelect: 'none',\r\n            webkitUserSelect: 'none',\r\n            height: `${this.height / this.pixelRatio}px`\r\n        });\r\n\r\n        if (wsParams.fillParent || wsParams.scrollParent) {\r\n            this.drawer.style(this.wrapper, {\r\n                width: '100%',\r\n                overflowX: 'hidden',\r\n                overflowY: 'hidden'\r\n            });\r\n        }\r\n        this.container.appendChild(this.wrapper);\r\n\r\n        this.wrapper.addEventListener('click', e => {\r\n            e.preventDefault();\r\n            const relX = 'offsetX' in e ? e.offsetX : e.layerX;\r\n            this.fireEvent('click', relX / this.scrollWidth || 0);\r\n        });\r\n    }\r\n\r\n    createCanvas() {\r\n        const canvas = (this.canvas = this.wrapper.appendChild(\r\n            document.createElement('canvas')\r\n        ));\r\n\r\n        this.spectrCc = canvas.getContext('2d');\r\n\r\n        this.util.style(canvas, {\r\n            position: 'absolute',\r\n            zIndex: 4\r\n        });\r\n    }\r\n\r\n    render() {\r\n        this.updateCanvasStyle();\r\n\r\n        if (this.frequenciesDataUrl) {\r\n            this.loadFrequenciesData(this.frequenciesDataUrl);\r\n        } else {\r\n            this.getFrequencies(this.drawSpectrogram);\r\n        }\r\n    }\r\n\r\n    updateCanvasStyle() {\r\n        const width = Math.round(this.width / this.pixelRatio) + 'px';\r\n        this.canvas.width = this.width;\r\n        this.canvas.height = this.height;\r\n        this.canvas.style.width = width;\r\n    }\r\n\r\n    drawSpectrogram(frequenciesData, my) {\r\n        const spectrCc = my.spectrCc;\r\n        const length = my.wavesurfer.backend.getDuration();\r\n        const height = my.height;\r\n        const pixels = my.resample(frequenciesData);\r\n        const heightFactor = my.buffer ? 2 / my.buffer.numberOfChannels : 1;\r\n        let i;\r\n        let j;\r\n\r\n        for (i = 0; i < pixels.length; i++) {\r\n            for (j = 0; j < pixels[i].length; j++) {\r\n                const colorValue = 255 - pixels[i][j];\r\n                my.spectrCc.fillStyle =\r\n                    'rgb(' +\r\n                    colorValue +\r\n                    ', ' +\r\n                    colorValue +\r\n                    ', ' +\r\n                    colorValue +\r\n                    ')';\r\n                my.spectrCc.fillRect(\r\n                    i,\r\n                    height - j * heightFactor,\r\n                    1,\r\n                    heightFactor\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    getFrequencies(callback) {\r\n        const fftSamples = this.fftSamples;\r\n        const buffer = (this.buffer = this.wavesurfer.backend.buffer);\r\n        const channelOne = buffer.getChannelData(0);\r\n        const bufferLength = buffer.length;\r\n        const sampleRate = buffer.sampleRate;\r\n        const frequencies = [];\r\n\r\n        if (!buffer) {\r\n            this.fireEvent('error', 'Web Audio buffer is not available');\r\n            return;\r\n        }\r\n\r\n        let noverlap = this.noverlap;\r\n        if (!noverlap) {\r\n            const uniqueSamplesPerPx = buffer.length / this.canvas.width;\r\n            noverlap = Math.max(0, Math.round(fftSamples - uniqueSamplesPerPx));\r\n        }\r\n\r\n        const fft = new FFT(\r\n            fftSamples,\r\n            sampleRate,\r\n            this.windowFunc,\r\n            this.alpha\r\n        );\r\n        const maxSlicesCount = Math.floor(\r\n            bufferLength / (fftSamples - noverlap)\r\n        );\r\n        let currentOffset = 0;\r\n\r\n        while (currentOffset + fftSamples < channelOne.length) {\r\n            const segment = channelOne.slice(\r\n                currentOffset,\r\n                currentOffset + fftSamples\r\n            );\r\n            const spectrum = fft.calculateSpectrum(segment);\r\n            const array = new Uint8Array(fftSamples / 2);\r\n            let j;\r\n            for (j = 0; j < fftSamples / 2; j++) {\r\n                array[j] = Math.max(-255, Math.log10(spectrum[j]) * 45);\r\n            }\r\n            frequencies.push(array);\r\n            currentOffset += fftSamples - noverlap;\r\n        }\r\n        callback(frequencies, this);\r\n    }\r\n\r\n    loadFrequenciesData(url) {\r\n        const ajax = this.util.ajax({ url: url });\r\n\r\n        ajax.on('success', data =>\r\n            this.drawSpectrogram(JSON.parse(data), this)\r\n        );\r\n        ajax.on('error', e =>\r\n            this.fireEvent('error', 'XHR error: ' + e.target.statusText)\r\n        );\r\n\r\n        return ajax;\r\n    }\r\n\r\n    freqType(freq) {\r\n        return freq >= 1000 ? (freq / 1000).toFixed(1) : Math.round(freq);\r\n    }\r\n\r\n    unitType(freq) {\r\n        return freq >= 1000 ? 'KHz' : 'Hz';\r\n    }\r\n\r\n    loadLabels(\r\n        bgFill,\r\n        fontSizeFreq,\r\n        fontSizeUnit,\r\n        fontType,\r\n        textColorFreq,\r\n        textColorUnit,\r\n        textAlign,\r\n        container\r\n    ) {\r\n        const frequenciesHeight = this.height;\r\n        bgFill = bgFill || 'rgba(68,68,68,0)';\r\n        fontSizeFreq = fontSizeFreq || '12px';\r\n        fontSizeUnit = fontSizeUnit || '10px';\r\n        fontType = fontType || 'Helvetica';\r\n        textColorFreq = textColorFreq || '#fff';\r\n        textColorUnit = textColorUnit || '#fff';\r\n        textAlign = textAlign || 'center';\r\n        container = container || '#specLabels';\r\n        const getMaxY = frequenciesHeight || 512;\r\n        const labelIndex = 5 * (getMaxY / 256);\r\n        const freqStart = 0;\r\n        const step =\r\n            (this.wavesurfer.backend.ac.sampleRate / 2 - freqStart) /\r\n            labelIndex;\r\n\r\n        const ctx = this.labelsEl.getContext('2d');\r\n        this.labelsEl.height = this.height;\r\n        this.labelsEl.width = 55;\r\n\r\n        ctx.fillStyle = bgFill;\r\n        ctx.fillRect(0, 0, 55, getMaxY);\r\n        ctx.fill();\r\n        let i;\r\n\r\n        for (i = 0; i <= labelIndex; i++) {\r\n            ctx.textAlign = textAlign;\r\n            ctx.textBaseline = 'middle';\r\n\r\n            const freq = freqStart + step * i;\r\n            const index = Math.round(\r\n                (freq / (this.sampleRate / 2)) * this.fftSamples\r\n            );\r\n            const label = this.freqType(freq);\r\n            const units = this.unitType(freq);\r\n            const x = 16;\r\n            const yLabelOffset = 2;\r\n\r\n            if (i == 0) {\r\n                ctx.fillStyle = textColorUnit;\r\n                ctx.font = fontSizeUnit + ' ' + fontType;\r\n                ctx.fillText(units, x + 24, getMaxY + i - 10);\r\n                ctx.fillStyle = textColorFreq;\r\n                ctx.font = fontSizeFreq + ' ' + fontType;\r\n                ctx.fillText(label, x, getMaxY + i - 10);\r\n            } else {\r\n                ctx.fillStyle = textColorUnit;\r\n                ctx.font = fontSizeUnit + ' ' + fontType;\r\n                ctx.fillText(units, x + 24, getMaxY - i * 50 + yLabelOffset);\r\n                ctx.fillStyle = textColorFreq;\r\n                ctx.font = fontSizeFreq + ' ' + fontType;\r\n                ctx.fillText(label, x, getMaxY - i * 50 + yLabelOffset);\r\n            }\r\n        }\r\n    }\r\n\r\n    updateScroll(e) {\r\n        if (this.wrapper) {\r\n            this.wrapper.scrollLeft = e.target.scrollLeft;\r\n        }\r\n    }\r\n\r\n    resample(oldMatrix) {\r\n        const columnsNumber = this.width;\r\n        const newMatrix = [];\r\n\r\n        const oldPiece = 1 / oldMatrix.length;\r\n        const newPiece = 1 / columnsNumber;\r\n        let i;\r\n\r\n        for (i = 0; i < columnsNumber; i++) {\r\n            const column = new Array(oldMatrix[0].length);\r\n            let j;\r\n\r\n            for (j = 0; j < oldMatrix.length; j++) {\r\n                const oldStart = j * oldPiece;\r\n                const oldEnd = oldStart + oldPiece;\r\n                const newStart = i * newPiece;\r\n                const newEnd = newStart + newPiece;\r\n\r\n                const overlap =\r\n                    oldEnd <= newStart || newEnd <= oldStart\r\n                        ? 0\r\n                        : Math.min(\r\n                              Math.max(oldEnd, newStart),\r\n                              Math.max(newEnd, oldStart)\r\n                          ) -\r\n                          Math.max(\r\n                              Math.min(oldEnd, newStart),\r\n                              Math.min(newEnd, oldStart)\r\n                          );\r\n                let k;\r\n                /* eslint-disable max-depth */\r\n                if (overlap > 0) {\r\n                    for (k = 0; k < oldMatrix[0].length; k++) {\r\n                        if (column[k] == null) {\r\n                            column[k] = 0;\r\n                        }\r\n                        column[k] += (overlap / newPiece) * oldMatrix[j][k];\r\n                    }\r\n                }\r\n                /* eslint-enable max-depth */\r\n            }\r\n\r\n            const intColumn = new Uint8Array(oldMatrix[0].length);\r\n            let m;\r\n\r\n            for (m = 0; m < oldMatrix[0].length; m++) {\r\n                intColumn[m] = column[m];\r\n            }\r\n\r\n            newMatrix.push(intColumn);\r\n        }\r\n\r\n        return newMatrix;\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/plugin/spectrogram.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 386,
    "kind": "function",
    "name": "FFT",
    "memberof": "src/plugin/spectrogram.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugin/spectrogram.js~FFT",
    "access": "public",
    "export": false,
    "importPath": "wavesurfer.js/src/plugin/spectrogram.js",
    "importStyle": null,
    "description": "Calculate FFT - Based on https://github.com/corbanbrook/dsp.js",
    "lineNumber": 5,
    "params": [
      {
        "name": "bufferSize",
        "types": [
          "*"
        ]
      },
      {
        "name": "sampleRate",
        "types": [
          "*"
        ]
      },
      {
        "name": "windowFunc",
        "types": [
          "*"
        ]
      },
      {
        "name": "alpha",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 387,
    "kind": "typedef",
    "name": "SpectrogramPluginParams",
    "memberof": "src/plugin/spectrogram.js",
    "static": true,
    "longname": "src/plugin/spectrogram.js~SpectrogramPluginParams",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string",
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": "Selector of element or element in\nwhich to render"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "512",
        "defaultRaw": 512,
        "name": "fftSamples",
        "description": "number of samples to fetch to FFT. Must be\na pwer of 2."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "noverlap",
        "description": "Size of the overlapping window. Must be <\nfftSamples. Auto deduced from canvas size by default."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'hann'",
        "defaultRaw": "'hann'",
        "name": "windowFunc",
        "description": "The window function to be used. One of\nthese: `'bartlett'`, `'bartlettHann'`, `'blackman'`, `'cosine'`, `'gauss'`,\n`'hamming'`, `'hann'`, `'lanczoz'`, `'rectangular'`, `'triangular'`"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "alpha",
        "description": "Some window functions have this extra value.\n(Between 0 and 1)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "wavesurfer.params.pixelRatio",
        "defaultRaw": "wavesurfer.params.pixelRatio",
        "name": "pixelRatio",
        "description": "to control the\nsize of the spectrogram in relation with its canvas. 1 = Draw on the whole\ncanvas. 2 = Draw on a quarter (1/2 the length and 1/2 the width)"
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "deferInit",
        "description": "Set to true to manually call\n`initPlugin('spectrogram')`"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SpectrogramPluginParams"
    }
  },
  {
    "__docId__": 388,
    "kind": "class",
    "name": "SpectrogramPlugin",
    "memberof": "src/plugin/spectrogram.js",
    "static": true,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/plugin/spectrogram.js",
    "importStyle": "SpectrogramPlugin",
    "description": "Render a spectrogram visualisation of the audio.",
    "examples": [
      "// es6\nimport SpectrogramPlugin from 'wavesurfer.spectrogram.js';\n\n// commonjs\nvar SpectrogramPlugin = require('wavesurfer.spectrogram.js');\n\n// if you are using <script> tags\nvar SpectrogramPlugin = window.WaveSurfer.spectrogram;\n\n// ... initialising wavesurfer with the plugin\nvar wavesurfer = WaveSurfer.create({\n  // wavesurfer options ...\n  plugins: [\n    SpectrogramPlugin.create({\n      // plugin options ...\n    })\n  ]\n});"
    ],
    "lineNumber": 264,
    "interface": false,
    "extends": [
      "Observer"
    ],
    "implements": [
      "PluginClass"
    ]
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "create",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin.create",
    "access": "public",
    "description": "Spectrogram plugin definition factory\n\nThis function must be used to create a plugin definition which can be\nused by wavesurfer to correctly instantiate the plugin.",
    "lineNumber": 274,
    "params": [
      {
        "nullable": null,
        "types": [
          "SpectrogramPluginParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "parameters use to initialise the plugin"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PluginDefinition"
      ],
      "spread": false,
      "description": "an object representing the plugin"
    }
  },
  {
    "__docId__": 390,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 286,
    "undocument": true
  },
  {
    "__docId__": 391,
    "kind": "member",
    "name": "params",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#params",
    "access": "public",
    "description": null,
    "lineNumber": 287,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 392,
    "kind": "member",
    "name": "wavesurfer",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#wavesurfer",
    "access": "public",
    "description": null,
    "lineNumber": 288,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 393,
    "kind": "member",
    "name": "util",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#util",
    "access": "public",
    "description": null,
    "lineNumber": 289,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 394,
    "kind": "member",
    "name": "frequenciesDataUrl",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#frequenciesDataUrl",
    "access": "public",
    "description": null,
    "lineNumber": 291,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 395,
    "kind": "member",
    "name": "_onScroll",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#_onScroll",
    "access": "private",
    "description": null,
    "lineNumber": 292,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 396,
    "kind": "member",
    "name": "_onReady",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#_onReady",
    "access": "private",
    "description": null,
    "lineNumber": 295,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 397,
    "kind": "member",
    "name": "container",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#container",
    "access": "public",
    "description": null,
    "lineNumber": 298,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 398,
    "kind": "member",
    "name": "width",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#width",
    "access": "public",
    "description": null,
    "lineNumber": 307,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 399,
    "kind": "member",
    "name": "pixelRatio",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#pixelRatio",
    "access": "public",
    "description": null,
    "lineNumber": 308,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 400,
    "kind": "member",
    "name": "fftSamples",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#fftSamples",
    "access": "public",
    "description": null,
    "lineNumber": 309,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 401,
    "kind": "member",
    "name": "height",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#height",
    "access": "public",
    "description": null,
    "lineNumber": 311,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 402,
    "kind": "member",
    "name": "noverlap",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#noverlap",
    "access": "public",
    "description": null,
    "lineNumber": 312,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 403,
    "kind": "member",
    "name": "windowFunc",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#windowFunc",
    "access": "public",
    "description": null,
    "lineNumber": 313,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 404,
    "kind": "member",
    "name": "alpha",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#alpha",
    "access": "public",
    "description": null,
    "lineNumber": 314,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "init",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#init",
    "access": "public",
    "description": null,
    "lineNumber": 325,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 334,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 410,
    "kind": "member",
    "name": "wrapper",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#wrapper",
    "access": "public",
    "description": null,
    "lineNumber": 343,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "createWrapper",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#createWrapper",
    "access": "public",
    "description": null,
    "lineNumber": 347,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 413,
    "kind": "method",
    "name": "createCanvas",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#createCanvas",
    "access": "public",
    "description": null,
    "lineNumber": 403,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 414,
    "kind": "member",
    "name": "spectrCc",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#spectrCc",
    "access": "public",
    "description": null,
    "lineNumber": 408,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 415,
    "kind": "method",
    "name": "render",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#render",
    "access": "public",
    "description": null,
    "lineNumber": 416,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "updateCanvasStyle",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#updateCanvasStyle",
    "access": "public",
    "description": null,
    "lineNumber": 426,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "drawSpectrogram",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#drawSpectrogram",
    "access": "public",
    "description": null,
    "lineNumber": 433,
    "undocument": true,
    "params": [
      {
        "name": "frequenciesData",
        "types": [
          "*"
        ]
      },
      {
        "name": "my",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "getFrequencies",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#getFrequencies",
    "access": "public",
    "description": null,
    "lineNumber": 463,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "loadFrequenciesData",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#loadFrequenciesData",
    "access": "public",
    "description": null,
    "lineNumber": 510,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 420,
    "kind": "method",
    "name": "freqType",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#freqType",
    "access": "public",
    "description": null,
    "lineNumber": 523,
    "undocument": true,
    "params": [
      {
        "name": "freq",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 421,
    "kind": "method",
    "name": "unitType",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#unitType",
    "access": "public",
    "description": null,
    "lineNumber": 527,
    "undocument": true,
    "params": [
      {
        "name": "freq",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "method",
    "name": "loadLabels",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#loadLabels",
    "access": "public",
    "description": null,
    "lineNumber": 531,
    "undocument": true,
    "params": [
      {
        "name": "bgFill",
        "types": [
          "*"
        ]
      },
      {
        "name": "fontSizeFreq",
        "types": [
          "*"
        ]
      },
      {
        "name": "fontSizeUnit",
        "types": [
          "*"
        ]
      },
      {
        "name": "fontType",
        "types": [
          "*"
        ]
      },
      {
        "name": "textColorFreq",
        "types": [
          "*"
        ]
      },
      {
        "name": "textColorUnit",
        "types": [
          "*"
        ]
      },
      {
        "name": "textAlign",
        "types": [
          "*"
        ]
      },
      {
        "name": "container",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "updateScroll",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#updateScroll",
    "access": "public",
    "description": null,
    "lineNumber": 597,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 424,
    "kind": "method",
    "name": "resample",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#resample",
    "access": "public",
    "description": null,
    "lineNumber": 603,
    "undocument": true,
    "params": [
      {
        "name": "oldMatrix",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 425,
    "kind": "file",
    "name": "src/plugin/timeline.js",
    "content": "/**\r\n * @typedef {Object} TimelinePluginParams\r\n * @desc Extends the `WavesurferParams` wavesurfer was initialised with\r\n * @property {!string|HTMLElement} container CSS selector or HTML element where\r\n * the timeline should be drawn. This is the only required parameter.\r\n * @property {number} notchPercentHeight=90 Height of notches in percent\r\n * @property {string} primaryColor='#000' The colour of the main notches\r\n * @property {string} secondaryColor='#c0c0c0' The colour of the secondary\r\n * notches\r\n * @property {string} primaryFontColor='#000' The colour of the labels next to\r\n * the main notches\r\n * @property {string} secondaryFontColor='#000' The colour of the labels next to\r\n * the secondary notches\r\n * @property {number} labelPadding=5 The padding between the label and the notch\r\n * @property {?number} zoomDebounce A debounce timeout to increase rendering\r\n * performance for large files\r\n * @property {string} fontFamily='Arial'\r\n * @property {number} fontSize=10 Font size of labels in pixels\r\n * @property {function} formatTimeCallback=→00:00\r\n * @property {?boolean} deferInit Set to true to manually call\r\n * `initPlugin('timeline')`\r\n */\r\n\r\n/**\r\n * Adds a timeline to the waveform.\r\n *\r\n * @implements {PluginClass}\r\n * @extends {Observer}\r\n * @example\r\n * // es6\r\n * import TimelinePlugin from 'wavesurfer.timeline.js';\r\n *\r\n * // commonjs\r\n * var TimelinePlugin = require('wavesurfer.timeline.js');\r\n *\r\n * // if you are using <script> tags\r\n * var TimelinePlugin = window.WaveSurfer.timeline;\r\n *\r\n * // ... initialising wavesurfer with the plugin\r\n * var wavesurfer = WaveSurfer.create({\r\n *   // wavesurfer options ...\r\n *   plugins: [\r\n *     TimelinePlugin.create({\r\n *       // plugin options ...\r\n *     })\r\n *   ]\r\n * });\r\n */\r\nexport default class TimelinePlugin {\r\n    /**\r\n     * Timeline plugin definition factory\r\n     *\r\n     * This function must be used to create a plugin definition which can be\r\n     * used by wavesurfer to correctly instantiate the plugin.\r\n     *\r\n     * @param  {TimelinePluginParams} params parameters use to initialise the plugin\r\n     * @return {PluginDefinition} an object representing the plugin\r\n     */\r\n    static create(params) {\r\n        return {\r\n            name: 'timeline',\r\n            deferInit: params && params.deferInit ? params.deferInit : false,\r\n            params: params,\r\n            instance: TimelinePlugin\r\n        };\r\n    }\r\n\r\n    // event handlers\r\n    /** @private */\r\n    _onScroll = () => {\r\n        if (this.wrapper && this.drawer.wrapper) {\r\n            this.wrapper.scrollLeft = this.drawer.wrapper.scrollLeft;\r\n        }\r\n    };\r\n    /** @private */\r\n    _onRedraw = () => this.render();\r\n    /** @private */\r\n    _onReady = () => {\r\n        const ws = this.wavesurfer;\r\n        this.drawer = ws.drawer;\r\n        this.pixelRatio = ws.drawer.params.pixelRatio;\r\n        this.maxCanvasWidth = ws.drawer.maxCanvasWidth || ws.drawer.width;\r\n        this.maxCanvasElementWidth =\r\n            ws.drawer.maxCanvasElementWidth ||\r\n            Math.round(this.maxCanvasWidth / this.pixelRatio);\r\n\r\n        ws.drawer.wrapper.addEventListener('scroll', this._onScroll);\r\n        ws.on('redraw', this._onRedraw);\r\n        ws.on('zoom', this._onZoom);\r\n        this.render();\r\n    };\r\n    /** @private */\r\n    _onWrapperClick = e => {\r\n        e.preventDefault();\r\n        const relX = 'offsetX' in e ? e.offsetX : e.layerX;\r\n        this.fireEvent('click', relX / this.wrapper.scrollWidth || 0);\r\n    };\r\n\r\n    /**\r\n     * Creates an instance of TimelinePlugin.\r\n     *\r\n     * You probably want to use TimelinePlugin.create()\r\n     *\r\n     * @param {TimelinePluginParams} params Plugin parameters\r\n     * @param {object} ws Wavesurfer instance\r\n     */\r\n    constructor(params, ws) {\r\n        /** @private */\r\n        this.container =\r\n            'string' == typeof params.container\r\n                ? document.querySelector(params.container)\r\n                : params.container;\r\n\r\n        if (!this.container) {\r\n            throw new Error('No container for wavesurfer timeline');\r\n        }\r\n        /** @private */\r\n        this.wavesurfer = ws;\r\n        /** @private */\r\n        this.util = ws.util;\r\n        /** @private */\r\n        this.params = this.util.extend(\r\n            {},\r\n            {\r\n                height: 20,\r\n                notchPercentHeight: 90,\r\n                labelPadding: 5,\r\n                primaryColor: '#000',\r\n                secondaryColor: '#c0c0c0',\r\n                primaryFontColor: '#000',\r\n                secondaryFontColor: '#000',\r\n                fontFamily: 'Arial',\r\n                fontSize: 10,\r\n                zoomDebounce: false,\r\n                formatTimeCallback(seconds) {\r\n                    if (seconds / 60 > 1) {\r\n                        // calculate minutes and seconds from seconds count\r\n                        const minutes = parseInt(seconds / 60, 10);\r\n                        seconds = parseInt(seconds % 60, 10);\r\n                        // fill up seconds with zeroes\r\n                        seconds = seconds < 10 ? '0' + seconds : seconds;\r\n                        return `${minutes}:${seconds}`;\r\n                    }\r\n                    return Math.round(seconds * 1000) / 1000;\r\n                },\r\n                timeInterval(pxPerSec) {\r\n                    if (pxPerSec >= 25) {\r\n                        return 1;\r\n                    } else if (pxPerSec * 5 >= 25) {\r\n                        return 5;\r\n                    } else if (pxPerSec * 15 >= 25) {\r\n                        return 15;\r\n                    }\r\n                    return Math.ceil(0.5 / pxPerSec) * 60;\r\n                },\r\n                primaryLabelInterval(pxPerSec) {\r\n                    if (pxPerSec >= 25) {\r\n                        return 10;\r\n                    } else if (pxPerSec * 5 >= 25) {\r\n                        return 6;\r\n                    } else if (pxPerSec * 15 >= 25) {\r\n                        return 4;\r\n                    }\r\n                    return 4;\r\n                },\r\n                secondaryLabelInterval(pxPerSec) {\r\n                    if (pxPerSec >= 25) {\r\n                        return 5;\r\n                    } else if (pxPerSec * 5 >= 25) {\r\n                        return 2;\r\n                    } else if (pxPerSec * 15 >= 25) {\r\n                        return 2;\r\n                    }\r\n                    return 2;\r\n                }\r\n            },\r\n            params\r\n        );\r\n\r\n        /** @private */\r\n        this.canvases = [];\r\n        /** @private */\r\n        this.wrapper = null;\r\n        /** @private */\r\n        this.drawer = null;\r\n        /** @private */\r\n        this.pixelRatio = null;\r\n        /** @private */\r\n        this.maxCanvasWidth = null;\r\n        /** @private */\r\n        this.maxCanvasElementWidth = null;\r\n        /**\r\n         * This event handler has to be in the constructor function because it\r\n         * relies on the debounce function which is only available after\r\n         * instantiation\r\n         *\r\n         * Use a debounced function if zoomDebounce is defined\r\n         *\r\n         * @private\r\n         */\r\n        this._onZoom = this.params.zoomDebounce\r\n            ? this.wavesurfer.util.debounce(\r\n                  () => this.render(),\r\n                  this.params.zoomDebounce\r\n              )\r\n            : () => this.render();\r\n    }\r\n\r\n    /**\r\n     * Initialisation function used by the plugin API\r\n     */\r\n    init() {\r\n        this.wavesurfer.on('ready', this._onReady);\r\n        // Check if ws is ready\r\n        if (this.wavesurfer.isReady) {\r\n            this._onReady();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy function used by the plugin API\r\n     */\r\n    destroy() {\r\n        this.unAll();\r\n        this.wavesurfer.un('redraw', this._onRedraw);\r\n        this.wavesurfer.un('zoom', this._onZoom);\r\n        this.wavesurfer.un('ready', this._onReady);\r\n        this.wavesurfer.drawer.wrapper.removeEventListener(\r\n            'scroll',\r\n            this._onScroll\r\n        );\r\n        if (this.wrapper && this.wrapper.parentNode) {\r\n            this.wrapper.removeEventListener('click', this._onWrapperClick);\r\n            this.wrapper.parentNode.removeChild(this.wrapper);\r\n            this.wrapper = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a timeline element to wrap the canvases drawn by this plugin\r\n     *\r\n     * @private\r\n     */\r\n    createWrapper() {\r\n        const wsParams = this.wavesurfer.params;\r\n        this.container.innerHTML = '';\r\n        this.wrapper = this.container.appendChild(\r\n            document.createElement('timeline')\r\n        );\r\n        this.util.style(this.wrapper, {\r\n            display: 'block',\r\n            position: 'relative',\r\n            userSelect: 'none',\r\n            webkitUserSelect: 'none',\r\n            height: `${this.params.height}px`\r\n        });\r\n\r\n        if (wsParams.fillParent || wsParams.scrollParent) {\r\n            this.util.style(this.wrapper, {\r\n                width: '100%',\r\n                overflowX: 'hidden',\r\n                overflowY: 'hidden'\r\n            });\r\n        }\r\n\r\n        this.wrapper.addEventListener('click', this._onWrapperClick);\r\n    }\r\n\r\n    /**\r\n     * Render the timeline (also updates the already rendered timeline)\r\n     *\r\n     * @private\r\n     */\r\n    render() {\r\n        if (!this.wrapper) {\r\n            this.createWrapper();\r\n        }\r\n        this.updateCanvases();\r\n        this.updateCanvasesPositioning();\r\n        this.renderCanvases();\r\n    }\r\n\r\n    /**\r\n     * Make sure the correct of timeline canvas elements exist and are cached in\r\n     * this.canvases\r\n     *\r\n     * @private\r\n     */\r\n    updateCanvases() {\r\n        const addCanvas = () => {\r\n            const canvas = this.wrapper.appendChild(\r\n                document.createElement('canvas')\r\n            );\r\n            this.canvases.push(canvas);\r\n            this.util.style(canvas, {\r\n                position: 'absolute',\r\n                zIndex: 4\r\n            });\r\n        };\r\n        const removeCanvas = () => {\r\n            const canvas = this.canvases.pop();\r\n            canvas.parentElement.removeChild(canvas);\r\n        };\r\n\r\n        const totalWidth = Math.round(this.drawer.wrapper.scrollWidth);\r\n        const requiredCanvases = Math.ceil(\r\n            totalWidth / this.maxCanvasElementWidth\r\n        );\r\n        while (this.canvases.length < requiredCanvases) {\r\n            addCanvas();\r\n        }\r\n\r\n        while (this.canvases.length > requiredCanvases) {\r\n            removeCanvas();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the dimensions and positioning style for all the timeline canvases\r\n     *\r\n     * @private\r\n     */\r\n    updateCanvasesPositioning() {\r\n        // cache length for perf\r\n        const canvasesLength = this.canvases.length;\r\n        this.canvases.forEach((canvas, i) => {\r\n            // canvas width is the max element width, or if it is the last the\r\n            // required width\r\n            const canvasWidth =\r\n                i === canvasesLength - 1\r\n                    ? this.drawer.wrapper.scrollWidth -\r\n                      this.maxCanvasElementWidth * (canvasesLength - 1)\r\n                    : this.maxCanvasElementWidth;\r\n            // set dimensions and style\r\n            canvas.width = canvasWidth * this.pixelRatio;\r\n            // on certain pixel ratios the canvas appears cut off at the bottom,\r\n            // therefore leave 1px extra\r\n            canvas.height = (this.params.height + 1) * this.pixelRatio;\r\n            this.util.style(canvas, {\r\n                width: `${canvasWidth}px`,\r\n                height: `${this.params.height}px`,\r\n                left: `${i * this.maxCanvasElementWidth}px`\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Render the timeline labels and notches\r\n     *\r\n     * @private\r\n     */\r\n    renderCanvases() {\r\n        const duration = this.wavesurfer.backend.getDuration();\r\n        if (duration <= 0) {\r\n            return;\r\n        }\r\n        const wsParams = this.wavesurfer.params;\r\n        const fontSize = this.params.fontSize * wsParams.pixelRatio;\r\n        const totalSeconds = parseInt(duration, 10) + 1;\r\n        const width =\r\n            wsParams.fillParent && !wsParams.scrollParent\r\n                ? this.drawer.getWidth()\r\n                : this.drawer.wrapper.scrollWidth * wsParams.pixelRatio;\r\n        const height1 = this.params.height * this.pixelRatio;\r\n        const height2 =\r\n            this.params.height *\r\n            (this.params.notchPercentHeight / 100) *\r\n            this.pixelRatio;\r\n        const pixelsPerSecond = width / duration;\r\n\r\n        const formatTime = this.params.formatTimeCallback;\r\n        // if parameter is function, call the function with\r\n        // pixelsPerSecond, otherwise simply take the value as-is\r\n        const intervalFnOrVal = option =>\r\n            typeof option === 'function' ? option(pixelsPerSecond) : option;\r\n        const timeInterval = intervalFnOrVal(this.params.timeInterval);\r\n        const primaryLabelInterval = intervalFnOrVal(\r\n            this.params.primaryLabelInterval\r\n        );\r\n        const secondaryLabelInterval = intervalFnOrVal(\r\n            this.params.secondaryLabelInterval\r\n        );\r\n\r\n        let curPixel = 0;\r\n        let curSeconds = 0;\r\n        let i;\r\n        // build an array of position data with index, second and pixel data,\r\n        // this is then used multiple times below\r\n        const positioning = [];\r\n        for (i = 0; i < totalSeconds / timeInterval; i++) {\r\n            positioning.push([i, curSeconds, curPixel]);\r\n            curSeconds += timeInterval;\r\n            curPixel += pixelsPerSecond * timeInterval;\r\n        }\r\n\r\n        // iterate over each position\r\n        const renderPositions = cb => {\r\n            positioning.forEach(pos => {\r\n                cb(pos[0], pos[1], pos[2]);\r\n            });\r\n        };\r\n\r\n        // render primary labels\r\n        this.setFillStyles(this.params.primaryColor);\r\n        this.setFonts(`${fontSize}px ${this.params.fontFamily}`);\r\n        this.setFillStyles(this.params.primaryFontColor);\r\n        renderPositions((i, curSeconds, curPixel) => {\r\n            if (i % primaryLabelInterval === 0) {\r\n                this.fillRect(curPixel, 0, 1, height1);\r\n                this.fillText(\r\n                    formatTime(curSeconds),\r\n                    curPixel + this.params.labelPadding * this.pixelRatio,\r\n                    height1\r\n                );\r\n            }\r\n        });\r\n\r\n        // render secondary labels\r\n        this.setFillStyles(this.params.secondaryColor);\r\n        this.setFonts(`${fontSize}px ${this.params.fontFamily}`);\r\n        this.setFillStyles(this.params.secondaryFontColor);\r\n        renderPositions((i, curSeconds, curPixel) => {\r\n            if (i % secondaryLabelInterval === 0) {\r\n                this.fillRect(curPixel, 0, 1, height1);\r\n                this.fillText(\r\n                    formatTime(curSeconds),\r\n                    curPixel + this.params.labelPadding * this.pixelRatio,\r\n                    height1\r\n                );\r\n            }\r\n        });\r\n\r\n        // render the actual notches (when no labels are used)\r\n        this.setFillStyles(this.params.secondaryColor);\r\n        renderPositions((i, curSeconds, curPixel) => {\r\n            if (\r\n                i % secondaryLabelInterval !== 0 &&\r\n                i % primaryLabelInterval !== 0\r\n            ) {\r\n                this.fillRect(curPixel, 0, 1, height2);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set the canvas fill style\r\n     *\r\n     * @param {DOMString|CanvasGradient|CanvasPattern} fillStyle\r\n     * @private\r\n     */\r\n    setFillStyles(fillStyle) {\r\n        this.canvases.forEach(canvas => {\r\n            canvas.getContext('2d').fillStyle = fillStyle;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set the canvas font\r\n     *\r\n     * @param {DOMString} font\r\n     * @private\r\n     */\r\n    setFonts(font) {\r\n        this.canvases.forEach(canvas => {\r\n            canvas.getContext('2d').font = font;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Draw a rectangle on the canvases\r\n     *\r\n     * (it figures out the offset for each canvas)\r\n     *\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} width\r\n     * @param {number} height\r\n     * @private\r\n     */\r\n    fillRect(x, y, width, height) {\r\n        this.canvases.forEach((canvas, i) => {\r\n            const leftOffset = i * this.maxCanvasWidth;\r\n\r\n            const intersection = {\r\n                x1: Math.max(x, i * this.maxCanvasWidth),\r\n                y1: y,\r\n                x2: Math.min(x + width, i * this.maxCanvasWidth + canvas.width),\r\n                y2: y + height\r\n            };\r\n\r\n            if (intersection.x1 < intersection.x2) {\r\n                canvas\r\n                    .getContext('2d')\r\n                    .fillRect(\r\n                        intersection.x1 - leftOffset,\r\n                        intersection.y1,\r\n                        intersection.x2 - intersection.x1,\r\n                        intersection.y2 - intersection.y1\r\n                    );\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fill a given text on the canvases\r\n     *\r\n     * @param {string} text\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @private\r\n     */\r\n    fillText(text, x, y) {\r\n        let textWidth;\r\n        let xOffset = 0;\r\n\r\n        this.canvases.forEach(canvas => {\r\n            const context = canvas.getContext('2d');\r\n            const canvasWidth = context.canvas.width;\r\n\r\n            if (xOffset > x + textWidth) {\r\n                return;\r\n            }\r\n\r\n            if (xOffset + canvasWidth > x) {\r\n                textWidth = context.measureText(text).width;\r\n                context.fillText(text, x - xOffset, y);\r\n            }\r\n\r\n            xOffset += canvasWidth;\r\n        });\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/plugin/timeline.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 426,
    "kind": "typedef",
    "name": "TimelinePluginParams",
    "memberof": "src/plugin/timeline.js",
    "static": true,
    "longname": "src/plugin/timeline.js~TimelinePluginParams",
    "access": "public",
    "description": "Extends the `WavesurferParams` wavesurfer was initialised with",
    "properties": [
      {
        "nullable": false,
        "types": [
          "string",
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": "CSS selector or HTML element where\nthe timeline should be drawn. This is the only required parameter."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "90",
        "defaultRaw": 90,
        "name": "notchPercentHeight",
        "description": "Height of notches in percent"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'#000'",
        "defaultRaw": "'#000'",
        "name": "primaryColor",
        "description": "The colour of the main notches"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'#c0c0c0'",
        "defaultRaw": "'#c0c0c0'",
        "name": "secondaryColor",
        "description": "The colour of the secondary\nnotches"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'#000'",
        "defaultRaw": "'#000'",
        "name": "primaryFontColor",
        "description": "The colour of the labels next to\nthe main notches"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'#000'",
        "defaultRaw": "'#000'",
        "name": "secondaryFontColor",
        "description": "The colour of the labels next to\nthe secondary notches"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "5",
        "defaultRaw": 5,
        "name": "labelPadding",
        "description": "The padding between the label and the notch"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "zoomDebounce",
        "description": "A debounce timeout to increase rendering\nperformance for large files"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'Arial'",
        "defaultRaw": "'Arial'",
        "name": "fontFamily",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "fontSize",
        "description": "Font size of labels in pixels"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "→00:00",
        "defaultRaw": "→00:00",
        "name": "formatTimeCallback",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "deferInit",
        "description": "Set to true to manually call\n`initPlugin('timeline')`"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TimelinePluginParams"
    }
  },
  {
    "__docId__": 427,
    "kind": "class",
    "name": "TimelinePlugin",
    "memberof": "src/plugin/timeline.js",
    "static": true,
    "longname": "src/plugin/timeline.js~TimelinePlugin",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/plugin/timeline.js",
    "importStyle": "TimelinePlugin",
    "description": "Adds a timeline to the waveform.",
    "examples": [
      "// es6\nimport TimelinePlugin from 'wavesurfer.timeline.js';\n\n// commonjs\nvar TimelinePlugin = require('wavesurfer.timeline.js');\n\n// if you are using <script> tags\nvar TimelinePlugin = window.WaveSurfer.timeline;\n\n// ... initialising wavesurfer with the plugin\nvar wavesurfer = WaveSurfer.create({\n  // wavesurfer options ...\n  plugins: [\n    TimelinePlugin.create({\n      // plugin options ...\n    })\n  ]\n});"
    ],
    "lineNumber": 49,
    "interface": false,
    "extends": [
      "Observer"
    ],
    "implements": [
      "PluginClass"
    ]
  },
  {
    "__docId__": 428,
    "kind": "method",
    "name": "create",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugin/timeline.js~TimelinePlugin.create",
    "access": "public",
    "description": "Timeline plugin definition factory\n\nThis function must be used to create a plugin definition which can be\nused by wavesurfer to correctly instantiate the plugin.",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "TimelinePluginParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "parameters use to initialise the plugin"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PluginDefinition"
      ],
      "spread": false,
      "description": "an object representing the plugin"
    }
  },
  {
    "__docId__": 429,
    "kind": "member",
    "name": "_onScroll",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#_onScroll",
    "access": "private",
    "description": null,
    "lineNumber": 70,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 430,
    "kind": "member",
    "name": "_onRedraw",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#_onRedraw",
    "access": "private",
    "description": null,
    "lineNumber": 76,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 431,
    "kind": "member",
    "name": "_onReady",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#_onReady",
    "access": "private",
    "description": null,
    "lineNumber": 78,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 432,
    "kind": "member",
    "name": "drawer",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "longname": "src/plugin/timeline.js~TimelinePlugin#drawer",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 433,
    "kind": "member",
    "name": "pixelRatio",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "longname": "src/plugin/timeline.js~TimelinePlugin#pixelRatio",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 434,
    "kind": "member",
    "name": "maxCanvasWidth",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "longname": "src/plugin/timeline.js~TimelinePlugin#maxCanvasWidth",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 435,
    "kind": "member",
    "name": "maxCanvasElementWidth",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "longname": "src/plugin/timeline.js~TimelinePlugin#maxCanvasElementWidth",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 436,
    "kind": "member",
    "name": "_onWrapperClick",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#_onWrapperClick",
    "access": "private",
    "description": null,
    "lineNumber": 93,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 437,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#constructor",
    "access": "public",
    "description": "Creates an instance of TimelinePlugin.\n\nYou probably want to use TimelinePlugin.create()",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "TimelinePluginParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Plugin parameters"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ws",
        "description": "Wavesurfer instance"
      }
    ]
  },
  {
    "__docId__": 438,
    "kind": "member",
    "name": "container",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#container",
    "access": "private",
    "description": null,
    "lineNumber": 109,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 439,
    "kind": "member",
    "name": "wavesurfer",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#wavesurfer",
    "access": "private",
    "description": null,
    "lineNumber": 118,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 440,
    "kind": "member",
    "name": "util",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#util",
    "access": "private",
    "description": null,
    "lineNumber": 120,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 441,
    "kind": "member",
    "name": "params",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#params",
    "access": "private",
    "description": null,
    "lineNumber": 122,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 442,
    "kind": "member",
    "name": "canvases",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#canvases",
    "access": "private",
    "description": null,
    "lineNumber": 181,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 443,
    "kind": "member",
    "name": "wrapper",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#wrapper",
    "access": "private",
    "description": null,
    "lineNumber": 183,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 448,
    "kind": "member",
    "name": "_onZoom",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#_onZoom",
    "access": "private",
    "description": "This event handler has to be in the constructor function because it\nrelies on the debounce function which is only available after\ninstantiation\n\nUse a debounced function if zoomDebounce is defined",
    "lineNumber": 201,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 449,
    "kind": "method",
    "name": "init",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#init",
    "access": "public",
    "description": "Initialisation function used by the plugin API",
    "lineNumber": 212,
    "params": [],
    "return": null
  },
  {
    "__docId__": 450,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#destroy",
    "access": "public",
    "description": "Destroy function used by the plugin API",
    "lineNumber": 223,
    "params": [],
    "return": null
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "createWrapper",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#createWrapper",
    "access": "private",
    "description": "Create a timeline element to wrap the canvases drawn by this plugin",
    "lineNumber": 244,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 454,
    "kind": "method",
    "name": "render",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#render",
    "access": "private",
    "description": "Render the timeline (also updates the already rendered timeline)",
    "lineNumber": 274,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "updateCanvases",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#updateCanvases",
    "access": "private",
    "description": "Make sure the correct of timeline canvas elements exist and are cached in\nthis.canvases",
    "lineNumber": 289,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 456,
    "kind": "method",
    "name": "updateCanvasesPositioning",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#updateCanvasesPositioning",
    "access": "private",
    "description": "Update the dimensions and positioning style for all the timeline canvases",
    "lineNumber": 323,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 457,
    "kind": "method",
    "name": "renderCanvases",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#renderCanvases",
    "access": "private",
    "description": "Render the timeline labels and notches",
    "lineNumber": 352,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 458,
    "kind": "method",
    "name": "setFillStyles",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#setFillStyles",
    "access": "private",
    "description": "Set the canvas fill style",
    "lineNumber": 451,
    "params": [
      {
        "nullable": null,
        "types": [
          "DOMString",
          "CanvasGradient",
          "CanvasPattern"
        ],
        "spread": false,
        "optional": false,
        "name": "fillStyle",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 459,
    "kind": "method",
    "name": "setFonts",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#setFonts",
    "access": "private",
    "description": "Set the canvas font",
    "lineNumber": 463,
    "params": [
      {
        "nullable": null,
        "types": [
          "DOMString"
        ],
        "spread": false,
        "optional": false,
        "name": "font",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 460,
    "kind": "method",
    "name": "fillRect",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#fillRect",
    "access": "private",
    "description": "Draw a rectangle on the canvases\n\n(it figures out the offset for each canvas)",
    "lineNumber": 480,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 461,
    "kind": "method",
    "name": "fillText",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#fillText",
    "access": "private",
    "description": "Fill a given text on the canvases",
    "lineNumber": 512,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 462,
    "kind": "file",
    "name": "src/util/ajax.js",
    "content": "import Observer from './observer';\r\n\r\n/**\r\n * Perform an ajax request\r\n *\r\n * @param {Options} options Description\r\n *\r\n * @returns {Object} Observer instance\r\n */\r\nexport default function ajax(options) {\r\n    const instance = new Observer();\r\n    const xhr = new XMLHttpRequest();\r\n    let fired100 = false;\r\n    xhr.open(options.method || 'GET', options.url, true);\r\n    xhr.responseType = options.responseType || 'json';\r\n\r\n    if (options.xhr) {\r\n        if (options.xhr.requestHeaders) {\r\n            // add custom request headers\r\n            options.xhr.requestHeaders.forEach(header => {\r\n                xhr.setRequestHeader(header.key, header.value);\r\n            });\r\n        }\r\n        if (options.xhr.withCredentials) {\r\n            // use credentials\r\n            xhr.withCredentials = true;\r\n        }\r\n    }\r\n\r\n    xhr.addEventListener('progress', e => {\r\n        instance.fireEvent('progress', e);\r\n        if (e.lengthComputable && e.loaded == e.total) {\r\n            fired100 = true;\r\n        }\r\n    });\r\n    xhr.addEventListener('load', e => {\r\n        if (!fired100) {\r\n            instance.fireEvent('progress', e);\r\n        }\r\n        instance.fireEvent('load', e);\r\n        if (200 == xhr.status || 206 == xhr.status) {\r\n            instance.fireEvent('success', xhr.response, e);\r\n        } else {\r\n            instance.fireEvent('error', e);\r\n        }\r\n    });\r\n    xhr.addEventListener('error', e => instance.fireEvent('error', e));\r\n    xhr.send();\r\n    instance.xhr = xhr;\r\n    return instance;\r\n}\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/util/ajax.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 463,
    "kind": "function",
    "name": "ajax",
    "memberof": "src/util/ajax.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/ajax.js~ajax",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/util/ajax.js",
    "importStyle": "ajax",
    "description": "Perform an ajax request",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} Observer instance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Options"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Description"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Observer instance"
    }
  },
  {
    "__docId__": 464,
    "kind": "file",
    "name": "src/util/extend.js",
    "content": "/**\r\n * Extend an object shallowly with others\r\n *\r\n * @param {Object} dest The target object\r\n * @param {Object[]} sources The objects to use for extending\r\n *\r\n * @return {Object} Merged object\r\n */\r\nexport default function extend(dest, ...sources) {\r\n    sources.forEach(source => {\r\n        Object.keys(source).forEach(key => {\r\n            dest[key] = source[key];\r\n        });\r\n    });\r\n    return dest;\r\n}\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/util/extend.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 465,
    "kind": "function",
    "name": "extend",
    "memberof": "src/util/extend.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/extend.js~extend",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/util/extend.js",
    "importStyle": "extend",
    "description": "Extend an object shallowly with others",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dest",
        "description": "The target object"
      },
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "sources",
        "description": "The objects to use for extending"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Merged object"
    }
  },
  {
    "__docId__": 466,
    "kind": "file",
    "name": "src/util/frame.js",
    "content": "import reqAnimationFrame from './request-animation-frame';\r\n\r\n/**\r\n * Create a function which will be called at the next requestAnimationFrame\r\n * cycle\r\n *\r\n * @param {function} func The function to call\r\n *\r\n * @return {func} The function wrapped within a requestAnimationFrame\r\n */\r\nexport default function frame(func) {\r\n    return (...args) => reqAnimationFrame(() => func(...args));\r\n}\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/util/frame.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 467,
    "kind": "function",
    "name": "frame",
    "memberof": "src/util/frame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/frame.js~frame",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/util/frame.js",
    "importStyle": "frame",
    "description": "Create a function which will be called at the next requestAnimationFrame\ncycle",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "The function to call"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "func"
      ],
      "spread": false,
      "description": "The function wrapped within a requestAnimationFrame"
    }
  },
  {
    "__docId__": 468,
    "kind": "file",
    "name": "src/util/get-id.js",
    "content": "/**\r\n * Get a random prefixed ID\r\n *\r\n * @returns {String} Random ID\r\n */\r\nexport default function getId() {\r\n    return (\r\n        'wavesurfer_' +\r\n        Math.random()\r\n            .toString(32)\r\n            .substring(2)\r\n    );\r\n}\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/util/get-id.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 469,
    "kind": "function",
    "name": "getId",
    "memberof": "src/util/get-id.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/get-id.js~getId",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/util/get-id.js",
    "importStyle": "getId",
    "description": "Get a random prefixed ID",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Random ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Random ID"
    },
    "params": []
  },
  {
    "__docId__": 470,
    "kind": "file",
    "name": "src/util/index.js",
    "content": "export { default as ajax } from './ajax';\r\nexport { default as getId } from './get-id';\r\nexport { default as max } from './max';\r\nexport { default as min } from './min';\r\nexport { default as Observer } from './observer';\r\nexport { default as extend } from './extend';\r\nexport { default as style } from './style';\r\nexport { default as requestAnimationFrame } from './request-animation-frame';\r\nexport { default as frame } from './frame';\r\nexport { default as debounce } from 'debounce';\r\nexport { default as preventClick } from './prevent-click';\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/util/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 471,
    "kind": "file",
    "name": "src/util/max.js",
    "content": "/**\r\n * Get the largest value\r\n *\r\n * @param   {Array} values Array of numbers\r\n * @returns {Number} Largest number found\r\n */\r\nexport default function max(values) {\r\n    let largest = -Infinity;\r\n    Object.keys(values).forEach(i => {\r\n        if (values[i] > largest) {\r\n            largest = values[i];\r\n        }\r\n    });\r\n    return largest;\r\n}\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/util/max.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 472,
    "kind": "function",
    "name": "max",
    "memberof": "src/util/max.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/max.js~max",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/util/max.js",
    "importStyle": "max",
    "description": "Get the largest value",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} Largest number found"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "Array of numbers"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Largest number found"
    }
  },
  {
    "__docId__": 473,
    "kind": "file",
    "name": "src/util/min.js",
    "content": "/**\r\n * Get the smallest value\r\n *\r\n * @param   {Array} values Array of numbers\r\n * @returns {Number}       Smallest number found\r\n */\r\nexport default function min(values) {\r\n    let smallest = Number(Infinity);\r\n    Object.keys(values).forEach(i => {\r\n        if (values[i] < smallest) {\r\n            smallest = values[i];\r\n        }\r\n    });\r\n    return smallest;\r\n}\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/util/min.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 474,
    "kind": "function",
    "name": "min",
    "memberof": "src/util/min.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/min.js~min",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/util/min.js",
    "importStyle": "min",
    "description": "Get the smallest value",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number}       Smallest number found"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "Array of numbers"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Smallest number found"
    }
  },
  {
    "__docId__": 475,
    "kind": "file",
    "name": "src/util/observer.js",
    "content": "/**\r\n * @typedef {Object} ListenerDescriptor\r\n * @property {string} name The name of the event\r\n * @property {function} callback The callback\r\n * @property {function} un The function to call to remove the listener\r\n */\r\n\r\n/**\r\n * Observer class\r\n */\r\nexport default class Observer {\r\n    /**\r\n     * Instantiate Observer\r\n     */\r\n    constructor() {\r\n        /**\r\n         * @private\r\n         * @todo Initialise the handlers here already and remove the conditional\r\n         * assignment in `on()`\r\n         */\r\n        this.handlers = null;\r\n    }\r\n    /**\r\n     * Attach a handler function for an event.\r\n     *\r\n     * @param {string} event Name of the event to listen to\r\n     * @param {function} fn The callback to trigger when the event is fired\r\n     * @return {ListenerDescriptor}\r\n     */\r\n    on(event, fn) {\r\n        if (!this.handlers) {\r\n            this.handlers = {};\r\n        }\r\n\r\n        let handlers = this.handlers[event];\r\n        if (!handlers) {\r\n            handlers = this.handlers[event] = [];\r\n        }\r\n        handlers.push(fn);\r\n\r\n        // Return an event descriptor\r\n        return {\r\n            name: event,\r\n            callback: fn,\r\n            un: (e, fn) => this.un(e, fn)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Remove an event handler.\r\n     *\r\n     * @param {string} event Name of the event the listener that should be\r\n     * removed listens to\r\n     * @param {function} fn The callback that should be removed\r\n     */\r\n    un(event, fn) {\r\n        if (!this.handlers) {\r\n            return;\r\n        }\r\n\r\n        const handlers = this.handlers[event];\r\n        let i;\r\n        if (handlers) {\r\n            if (fn) {\r\n                for (i = handlers.length - 1; i >= 0; i--) {\r\n                    if (handlers[i] == fn) {\r\n                        handlers.splice(i, 1);\r\n                    }\r\n                }\r\n            } else {\r\n                handlers.length = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove all event handlers.\r\n     */\r\n    unAll() {\r\n        this.handlers = null;\r\n    }\r\n\r\n    /**\r\n     * Attach a handler to an event. The handler is executed at most once per\r\n     * event type.\r\n     *\r\n     * @param {string} event The event to listen to\r\n     * @param {function} handler The callback that is only to be called once\r\n     * @return {ListenerDescriptor}\r\n     */\r\n    once(event, handler) {\r\n        const fn = (...args) => {\r\n            /*  eslint-disable no-invalid-this */\r\n            handler.apply(this, args);\r\n            /*  eslint-enable no-invalid-this */\r\n            setTimeout(() => {\r\n                this.un(event, fn);\r\n            }, 0);\r\n        };\r\n        return this.on(event, fn);\r\n    }\r\n\r\n    /**\r\n     * Manually fire an event\r\n     *\r\n     * @param {string} event The event to fire manually\r\n     * @param {...any} args The arguments with which to call the listeners\r\n     */\r\n    fireEvent(event, ...args) {\r\n        if (!this.handlers) {\r\n            return;\r\n        }\r\n        const handlers = this.handlers[event];\r\n        handlers &&\r\n            handlers.forEach(fn => {\r\n                fn(...args);\r\n            });\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/util/observer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 476,
    "kind": "typedef",
    "name": "ListenerDescriptor",
    "memberof": "src/util/observer.js",
    "static": true,
    "longname": "src/util/observer.js~ListenerDescriptor",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the event"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "un",
        "description": "The function to call to remove the listener"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ListenerDescriptor"
    }
  },
  {
    "__docId__": 477,
    "kind": "class",
    "name": "Observer",
    "memberof": "src/util/observer.js",
    "static": true,
    "longname": "src/util/observer.js~Observer",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/util/observer.js",
    "importStyle": "Observer",
    "description": "Observer class",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 478,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/util/observer.js~Observer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/observer.js~Observer#constructor",
    "access": "public",
    "description": "Instantiate Observer",
    "lineNumber": 15
  },
  {
    "__docId__": 479,
    "kind": "member",
    "name": "handlers",
    "memberof": "src/util/observer.js~Observer",
    "static": false,
    "longname": "src/util/observer.js~Observer#handlers",
    "access": "private",
    "description": "",
    "lineNumber": 21,
    "todo": [
      "Initialise the handlers here already and remove the conditional\nassignment in `on()`"
    ],
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 480,
    "kind": "method",
    "name": "on",
    "memberof": "src/util/observer.js~Observer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/observer.js~Observer#on",
    "access": "public",
    "description": "Attach a handler function for an event.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Name of the event to listen to"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The callback to trigger when the event is fired"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ListenerDescriptor"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 482,
    "kind": "method",
    "name": "un",
    "memberof": "src/util/observer.js~Observer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/observer.js~Observer#un",
    "access": "public",
    "description": "Remove an event handler.",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Name of the event the listener that should be\nremoved listens to"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The callback that should be removed"
      }
    ],
    "return": null
  },
  {
    "__docId__": 483,
    "kind": "method",
    "name": "unAll",
    "memberof": "src/util/observer.js~Observer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/observer.js~Observer#unAll",
    "access": "public",
    "description": "Remove all event handlers.",
    "lineNumber": 79,
    "params": [],
    "return": null
  },
  {
    "__docId__": 485,
    "kind": "method",
    "name": "once",
    "memberof": "src/util/observer.js~Observer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/observer.js~Observer#once",
    "access": "public",
    "description": "Attach a handler to an event. The handler is executed at most once per\nevent type.",
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event to listen to"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "The callback that is only to be called once"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ListenerDescriptor"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 486,
    "kind": "method",
    "name": "fireEvent",
    "memberof": "src/util/observer.js~Observer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/observer.js~Observer#fireEvent",
    "access": "public",
    "description": "Manually fire an event",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event to fire manually"
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "The arguments with which to call the listeners"
      }
    ],
    "return": null
  },
  {
    "__docId__": 487,
    "kind": "file",
    "name": "src/util/prevent-click.js",
    "content": "function preventClickHandler(e) {\r\n    e.stopPropagation();\r\n    document.body.removeEventListener('click', preventClickHandler, true);\r\n}\r\n\r\nexport default function preventClick(values) {\r\n    document.body.addEventListener('click', preventClickHandler, true);\r\n}\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/util/prevent-click.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 488,
    "kind": "function",
    "name": "preventClickHandler",
    "memberof": "src/util/prevent-click.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/prevent-click.js~preventClickHandler",
    "access": "public",
    "export": false,
    "importPath": "wavesurfer.js/src/util/prevent-click.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 489,
    "kind": "function",
    "name": "preventClick",
    "memberof": "src/util/prevent-click.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/prevent-click.js~preventClick",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/util/prevent-click.js",
    "importStyle": "preventClick",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 490,
    "kind": "file",
    "name": "src/util/request-animation-frame.js",
    "content": "/**\r\n * Returns the requestAnimationFrame function for the browser, or a shim with\r\n * setTimeout if none is found\r\n *\r\n * @return {function}\r\n */\r\nexport default (\r\n    window.requestAnimationFrame ||\r\n    window.webkitRequestAnimationFrame ||\r\n    window.mozRequestAnimationFrame ||\r\n    window.oRequestAnimationFrame ||\r\n    window.msRequestAnimationFrame ||\r\n    ((callback, element) => setTimeout(callback, 1000 / 60))\r\n).bind(window);\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/util/request-animation-frame.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 491,
    "kind": "file",
    "name": "src/util/style.js",
    "content": "/**\r\n * Apply a map of styles to an element\r\n *\r\n * @param {HTMLElement} el The element that the styles will be applied to\r\n * @param {Object} styles The map of propName: attribute, both are used as-is\r\n *\r\n * @return {HTMLElement} el\r\n */\r\nexport default function style(el, styles) {\r\n    Object.keys(styles).forEach(prop => {\r\n        if (el.style[prop] !== styles[prop]) {\r\n            el.style[prop] = styles[prop];\r\n        }\r\n    });\r\n    return el;\r\n}\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/util/style.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 492,
    "kind": "function",
    "name": "style",
    "memberof": "src/util/style.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/style.js~style",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/util/style.js",
    "importStyle": "style",
    "description": "Apply a map of styles to an element",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "el",
        "description": "The element that the styles will be applied to"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "styles",
        "description": "The map of propName: attribute, both are used as-is"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": "el"
    }
  },
  {
    "__docId__": 493,
    "kind": "file",
    "name": "src/wavesurfer.js",
    "content": "import * as util from './util';\r\nimport MultiCanvas from './drawer.multicanvas';\r\nimport WebAudio from './webaudio';\r\nimport MediaElement from './mediaelement';\r\nimport PeakCache from './peakcache';\r\n\r\n/*\r\n * This work is licensed under a BSD-3-Clause License.\r\n */\r\n\r\n/** @external {HTMLElement} https://developer.mozilla.org/en/docs/Web/API/HTMLElement */\r\n/** @external {OfflineAudioContext} https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext */\r\n/** @external {File} https://developer.mozilla.org/en-US/docs/Web/API/File */\r\n/** @external {Blob} https://developer.mozilla.org/en-US/docs/Web/API/Blob */\r\n/** @external {CanvasRenderingContext2D} https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D */\r\n/** @external {MediaStreamConstraints} https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints */\r\n/** @external {AudioNode} https://developer.mozilla.org/de/docs/Web/API/AudioNode */\r\n\r\n/**\r\n * @typedef {Object} WavesurferParams\r\n * @property {AudioContext} audioContext=null Use your own previously\r\n * initialized AudioContext or leave blank.\r\n * @property {number} audioRate=1 Speed at which to play audio. Lower number is\r\n * slower.\r\n * @property {ScriptProcessorNode} audioScriptProcessor=null Use your own previously\r\n * initialized ScriptProcessorNode or leave blank.\r\n * @property {boolean} autoCenter=true If a scrollbar is present, center the\r\n * waveform around the progress\r\n * @property {string} backend='WebAudio' `'WebAudio'|'MediaElement'` In most cases\r\n * you don't have to set this manually. MediaElement is a fallback for\r\n * unsupported browsers.\r\n * @property {number} barHeight=1 The height of the wave\r\n * @property {number} barGap=null The optional spacing between bars of the wave,\r\n * if not provided will be calculated in legacy format.\r\n * @property {boolean} closeAudioContext=false Close and nullify all audio\r\n * contexts when the destroy method is called.\r\n * @property {!string|HTMLElement} container CSS selector or HTML element where\r\n * the waveform should be drawn. This is the only required parameter.\r\n * @property {string} cursorColor='#333' The fill color of the cursor indicating\r\n * the playhead position.\r\n * @property {number} cursorWidth=1 Measured in pixels.\r\n * @property {boolean} fillParent=true Whether to fill the entire container or\r\n * draw only according to `minPxPerSec`.\r\n * @property {boolean} forceDecode=false Force decoding of audio using web audio\r\n * when zooming to get a more detailed waveform.\r\n * @property {number} height=128 The height of the waveform. Measured in\r\n * pixels.\r\n * @property {boolean} hideScrollbar=false Whether to hide the horizontal\r\n * scrollbar when one would normally be shown.\r\n * @property {boolean} interact=true Whether the mouse interaction will be\r\n * enabled at initialization. You can switch this parameter at any time later\r\n * on.\r\n * @property {boolean} loopSelection=true (Use with regions plugin) Enable\r\n * looping of selected regions\r\n * @property {number} maxCanvasWidth=4000 Maximum width of a single canvas in\r\n * pixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\r\n * even integer). If the waveform is longer than this value, additional canvases\r\n * will be used to render the waveform, which is useful for very large waveforms\r\n * that may be too wide for browsers to draw on a single canvas.\r\n * @property {boolean} mediaControls=false (Use with backend `MediaElement`)\r\n * this enables the native controls for the media element\r\n * @property {string} mediaType='audio' (Use with backend `MediaElement`)\r\n * `'audio'|'video'`\r\n * @property {number} minPxPerSec=20 Minimum number of pixels per second of\r\n * audio.\r\n * @property {boolean} normalize=false If true, normalize by the maximum peak\r\n * instead of 1.0.\r\n * @property {boolean} partialRender=false Use the PeakCache to improve\r\n * rendering speed of large waveforms\r\n * @property {number} pixelRatio=window.devicePixelRatio The pixel ratio used to\r\n * calculate display\r\n * @property {PluginDefinition[]} plugins=[] An array of plugin definitions to\r\n * register during instantiation, they will be directly initialised unless they\r\n * are added with the `deferInit` property set to true.\r\n * @property {string} progressColor='#555' The fill color of the part of the\r\n * waveform behind the cursor.\r\n * @property {boolean} removeMediaElementOnDestroy=true Set to false to keep the\r\n * media element in the DOM when the player is destroyed. This is useful when\r\n * reusing an existing media element via the `loadMediaElement` method.\r\n * @property {Object} renderer=MultiCanvas Can be used to inject a custom\r\n * renderer.\r\n * @property {boolean|number} responsive=false If set to `true` resize the\r\n * waveform, when the window is resized. This is debounced with a `100ms`\r\n * timeout by default. If this parameter is a number it represents that timeout.\r\n * @property {boolean} scrollParent=false Whether to scroll the container with a\r\n * lengthy waveform. Otherwise the waveform is shrunk to the container width\r\n * (see fillParent).\r\n * @property {number} skipLength=2 Number of seconds to skip with the\r\n * skipForward() and skipBackward() methods.\r\n * @property {boolean} splitChannels=false Render with seperate waveforms for\r\n * the channels of the audio\r\n * @property {string} waveColor='#999' The fill color of the waveform after the\r\n * cursor.\r\n * @property {object} xhr={} XHR options.\r\n */\r\n\r\n/**\r\n * @typedef {Object} PluginDefinition\r\n * @desc The Object used to describe a plugin\r\n * @example wavesurfer.addPlugin(pluginDefinition);\r\n * @property {string} name The name of the plugin, the plugin instance will be\r\n * added as a property to the wavesurfer instance under this name\r\n * @property {?Object} staticProps The properties that should be added to the\r\n * wavesurfer instance as static properties\r\n * @property {?boolean} deferInit Don't initialise plugin\r\n * automatically\r\n * @property {Object} params={} The plugin parameters, they are the first parameter\r\n * passed to the plugin class constructor function\r\n * @property {PluginClass} instance The plugin instance factory, is called with\r\n * the dependency specified in extends. Returns the plugin class.\r\n */\r\n\r\n/**\r\n * @interface PluginClass\r\n *\r\n * @desc This is the interface which is implemented by all plugin classes. Note\r\n * that this only turns into an observer after being passed through\r\n * `wavesurfer.addPlugin`.\r\n *\r\n * @extends {Observer}\r\n */\r\nclass PluginClass {\r\n    /**\r\n     * Plugin definition factory\r\n     *\r\n     * This function must be used to create a plugin definition which can be\r\n     * used by wavesurfer to correctly instantiate the plugin.\r\n     *\r\n     * @param  {Object} params={} The plugin params (specific to the plugin)\r\n     * @return {PluginDefinition} an object representing the plugin\r\n     */\r\n    create(params) {}\r\n    /**\r\n     * Construct the plugin\r\n     *\r\n     * @param {Object} ws The wavesurfer instance\r\n     * @param {Object} params={} The plugin params (specific to the plugin)\r\n     */\r\n    constructor(ws, params) {}\r\n    /**\r\n     * Initialise the plugin\r\n     *\r\n     * Start doing something. This is called by\r\n     * `wavesurfer.initPlugin(pluginName)`\r\n     */\r\n    init() {}\r\n    /**\r\n     * Destroy the plugin instance\r\n     *\r\n     * Stop doing something. This is called by\r\n     * `wavesurfer.destroyPlugin(pluginName)`\r\n     */\r\n    destroy() {}\r\n}\r\n\r\n/**\r\n * WaveSurfer core library class\r\n *\r\n * @extends {Observer}\r\n * @example\r\n * const params = {\r\n *   container: '#waveform',\r\n *   waveColor: 'violet',\r\n *   progressColor: 'purple'\r\n * };\r\n *\r\n * // initialise like this\r\n * const wavesurfer = WaveSurfer.create(params);\r\n *\r\n * // or like this ...\r\n * const wavesurfer = new WaveSurfer(params);\r\n * wavesurfer.init();\r\n *\r\n * // load audio file\r\n * wavesurfer.load('example/media/demo.wav');\r\n */\r\nexport default class WaveSurfer extends util.Observer {\r\n    /** @private */\r\n    defaultParams = {\r\n        audioContext: null,\r\n        audioRate: 1,\r\n        autoCenter: true,\r\n        backend: 'WebAudio',\r\n        barHeight: 1,\r\n        barGap: null,\r\n        container: null,\r\n        cursorColor: '#333',\r\n        cursorWidth: 1,\r\n        dragSelection: true,\r\n        fillParent: true,\r\n        forceDecode: false,\r\n        height: 128,\r\n        hideScrollbar: false,\r\n        interact: true,\r\n        loopSelection: true,\r\n        maxCanvasWidth: 4000,\r\n        mediaContainer: null,\r\n        mediaControls: false,\r\n        mediaType: 'audio',\r\n        minPxPerSec: 20,\r\n        normalize: false,\r\n        partialRender: false,\r\n        pixelRatio:\r\n            window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI,\r\n        plugins: [],\r\n        progressColor: '#555',\r\n        removeMediaElementOnDestroy: true,\r\n        renderer: MultiCanvas,\r\n        responsive: false,\r\n        scrollParent: false,\r\n        skipLength: 2,\r\n        splitChannels: false,\r\n        waveColor: '#999',\r\n        xhr: {}\r\n    };\r\n\r\n    /** @private */\r\n    backends = {\r\n        MediaElement,\r\n        WebAudio\r\n    };\r\n\r\n    /**\r\n     * Instantiate this class, call its `init` function and returns it\r\n     *\r\n     * @param {WavesurferParams} params\r\n     * @return {Object} WaveSurfer instance\r\n     * @example const wavesurfer = WaveSurfer.create(params);\r\n     */\r\n    static create(params) {\r\n        const wavesurfer = new WaveSurfer(params);\r\n        return wavesurfer.init();\r\n    }\r\n\r\n    /**\r\n     * The library version number is available as a static property of the\r\n     * WaveSurfer class\r\n     *\r\n     * @type {String}\r\n     * @example\r\n     * console.log('Using wavesurfer.js ' + WaveSurfer.VERSION);\r\n     */\r\n    static VERSION = __VERSION__;\r\n\r\n    /**\r\n     * Functions in the `util` property are available as a prototype property to\r\n     * all instances\r\n     *\r\n     * @type {Object}\r\n     * @example\r\n     * const wavesurfer = WaveSurfer.create(params);\r\n     * wavesurfer.util.style(myElement, { background: 'blue' });\r\n     */\r\n    util = util;\r\n\r\n    /**\r\n     * Functions in the `util` property are available as a static property of the\r\n     * WaveSurfer class\r\n     *\r\n     * @type {Object}\r\n     * @example\r\n     * WaveSurfer.util.style(myElement, { background: 'blue' });\r\n     */\r\n    static util = util;\r\n\r\n    /**\r\n     * Initialise wavesurfer instance\r\n     *\r\n     * @param {WavesurferParams} params Instantiation options for wavesurfer\r\n     * @example\r\n     * const wavesurfer = new WaveSurfer(params);\r\n     * @returns {this}\r\n     */\r\n    constructor(params) {\r\n        super();\r\n        /**\r\n         * Extract relevant parameters (or defaults)\r\n         * @private\r\n         */\r\n        this.params = util.extend({}, this.defaultParams, params);\r\n\r\n        /** @private */\r\n        this.container =\r\n            'string' == typeof params.container\r\n                ? document.querySelector(this.params.container)\r\n                : this.params.container;\r\n\r\n        if (!this.container) {\r\n            throw new Error('Container element not found');\r\n        }\r\n\r\n        if (this.params.mediaContainer == null) {\r\n            /** @private */\r\n            this.mediaContainer = this.container;\r\n        } else if (typeof this.params.mediaContainer == 'string') {\r\n            /** @private */\r\n            this.mediaContainer = document.querySelector(\r\n                this.params.mediaContainer\r\n            );\r\n        } else {\r\n            /** @private */\r\n            this.mediaContainer = this.params.mediaContainer;\r\n        }\r\n\r\n        if (!this.mediaContainer) {\r\n            throw new Error('Media Container element not found');\r\n        }\r\n\r\n        if (this.params.maxCanvasWidth <= 1) {\r\n            throw new Error('maxCanvasWidth must be greater than 1');\r\n        } else if (this.params.maxCanvasWidth % 2 == 1) {\r\n            throw new Error('maxCanvasWidth must be an even number');\r\n        }\r\n\r\n        /**\r\n         * @private Used to save the current volume when muting so we can\r\n         * restore once unmuted\r\n         * @type {number}\r\n         */\r\n        this.savedVolume = 0;\r\n\r\n        /**\r\n         * @private The current muted state\r\n         * @type {boolean}\r\n         */\r\n        this.isMuted = false;\r\n\r\n        /**\r\n         * @private Will hold a list of event descriptors that need to be\r\n         * cancelled on subsequent loads of audio\r\n         * @type {Object[]}\r\n         */\r\n        this.tmpEvents = [];\r\n\r\n        /**\r\n         * @private Holds any running audio downloads\r\n         * @type {Observer}\r\n         */\r\n        this.currentAjax = null;\r\n        /** @private */\r\n        this.arraybuffer = null;\r\n        /** @private */\r\n        this.drawer = null;\r\n        /** @private */\r\n        this.backend = null;\r\n        /** @private */\r\n        this.peakCache = null;\r\n\r\n        // cache constructor objects\r\n        if (typeof this.params.renderer !== 'function') {\r\n            throw new Error('Renderer parameter is invalid');\r\n        }\r\n        /**\r\n         * @private The uninitialised Drawer class\r\n         */\r\n        this.Drawer = this.params.renderer;\r\n        /**\r\n         * @private The uninitialised Backend class\r\n         */\r\n        this.Backend = this.backends[this.params.backend];\r\n\r\n        /**\r\n         * @private map of plugin names that are currently initialised\r\n         */\r\n        this.initialisedPluginList = {};\r\n        /** @private */\r\n        this.isDestroyed = false;\r\n        /** @private */\r\n        this.isReady = false;\r\n\r\n        // responsive debounced event listener. If this.params.responsive is not\r\n        // set, this is never called. Use 100ms or this.params.responsive as\r\n        // timeout for the debounce function.\r\n        let prevWidth = 0;\r\n        this._onResize = util.debounce(() => {\r\n            if (\r\n                prevWidth != this.drawer.wrapper.clientWidth &&\r\n                !this.params.scrollParent\r\n            ) {\r\n                prevWidth = this.drawer.wrapper.clientWidth;\r\n                this.drawer.fireEvent('redraw');\r\n            }\r\n        }, typeof this.params.responsive === 'number' ? this.params.responsive : 100);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Initialise the wave\r\n     *\r\n     * @example\r\n     * var wavesurfer = new WaveSurfer(params);\r\n     * wavesurfer.init();\r\n     * @return {this}\r\n     */\r\n    init() {\r\n        this.registerPlugins(this.params.plugins);\r\n        this.createDrawer();\r\n        this.createBackend();\r\n        this.createPeakCache();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add and initialise array of plugins (if `plugin.deferInit` is falsey),\r\n     * this function is called in the init function of wavesurfer\r\n     *\r\n     * @param {PluginDefinition[]} plugins An array of plugin definitions\r\n     * @emits {WaveSurfer#plugins-registered} Called with the array of plugin definitions\r\n     * @return {this}\r\n     */\r\n    registerPlugins(plugins) {\r\n        // first instantiate all the plugins\r\n        plugins.forEach(plugin => this.addPlugin(plugin));\r\n\r\n        // now run the init functions\r\n        plugins.forEach(plugin => {\r\n            // call init function of the plugin if deferInit is falsey\r\n            // in that case you would manually use initPlugins()\r\n            if (!plugin.deferInit) {\r\n                this.initPlugin(plugin.name);\r\n            }\r\n        });\r\n        this.fireEvent('plugins-registered', plugins);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add a plugin object to wavesurfer\r\n     *\r\n     * @param {PluginDefinition} plugin A plugin definition\r\n     * @emits {WaveSurfer#plugin-added} Called with the name of the plugin that was added\r\n     * @example wavesurfer.addPlugin(WaveSurfer.minimap());\r\n     * @return {this}\r\n     */\r\n    addPlugin(plugin) {\r\n        if (!plugin.name) {\r\n            throw new Error('Plugin does not have a name!');\r\n        }\r\n        if (!plugin.instance) {\r\n            throw new Error(\r\n                `Plugin ${plugin.name} does not have an instance property!`\r\n            );\r\n        }\r\n\r\n        // staticProps properties are applied to wavesurfer instance\r\n        if (plugin.staticProps) {\r\n            Object.keys(plugin.staticProps).forEach(pluginStaticProp => {\r\n                /**\r\n                 * Properties defined in a plugin definition's `staticProps` property are added as\r\n                 * staticProps properties of the WaveSurfer instance\r\n                 */\r\n                this[pluginStaticProp] = plugin.staticProps[pluginStaticProp];\r\n            });\r\n        }\r\n\r\n        const Instance = plugin.instance;\r\n\r\n        // turn the plugin instance into an observer\r\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\r\n            util.Observer.prototype\r\n        );\r\n        observerPrototypeKeys.forEach(key => {\r\n            Instance.prototype[key] = util.Observer.prototype[key];\r\n        });\r\n\r\n        /**\r\n         * Instantiated plugin classes are added as a property of the wavesurfer\r\n         * instance\r\n         * @type {Object}\r\n         */\r\n        this[plugin.name] = new Instance(plugin.params || {}, this);\r\n        this.fireEvent('plugin-added', plugin.name);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Initialise a plugin\r\n     *\r\n     * @param {string} name A plugin name\r\n     * @emits WaveSurfer#plugin-initialised\r\n     * @example wavesurfer.initPlugin('minimap');\r\n     * @return {this}\r\n     */\r\n    initPlugin(name) {\r\n        if (!this[name]) {\r\n            throw new Error(`Plugin ${name} has not been added yet!`);\r\n        }\r\n        if (this.initialisedPluginList[name]) {\r\n            // destroy any already initialised plugins\r\n            this.destroyPlugin(name);\r\n        }\r\n        this[name].init();\r\n        this.initialisedPluginList[name] = true;\r\n        this.fireEvent('plugin-initialised', name);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Destroy a plugin\r\n     *\r\n     * @param {string} name A plugin name\r\n     * @emits WaveSurfer#plugin-destroyed\r\n     * @example wavesurfer.destroyPlugin('minimap');\r\n     * @returns {this}\r\n     */\r\n    destroyPlugin(name) {\r\n        if (!this[name]) {\r\n            throw new Error(\r\n                `Plugin ${name} has not been added yet and cannot be destroyed!`\r\n            );\r\n        }\r\n        if (!this.initialisedPluginList[name]) {\r\n            throw new Error(\r\n                `Plugin ${name} is not active and cannot be destroyed!`\r\n            );\r\n        }\r\n        if (typeof this[name].destroy !== 'function') {\r\n            throw new Error(`Plugin ${name} does not have a destroy function!`);\r\n        }\r\n\r\n        this[name].destroy();\r\n        delete this.initialisedPluginList[name];\r\n        this.fireEvent('plugin-destroyed', name);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Destroy all initialised plugins. Convenience function to use when\r\n     * wavesurfer is removed\r\n     *\r\n     * @private\r\n     */\r\n    destroyAllPlugins() {\r\n        Object.keys(this.initialisedPluginList).forEach(name =>\r\n            this.destroyPlugin(name)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Create the drawer and draw the waveform\r\n     *\r\n     * @private\r\n     * @emits WaveSurfer#drawer-created\r\n     */\r\n    createDrawer() {\r\n        this.drawer = new this.Drawer(this.container, this.params);\r\n        this.drawer.init();\r\n        this.fireEvent('drawer-created', this.drawer);\r\n\r\n        if (this.params.responsive !== false) {\r\n            window.addEventListener('resize', this._onResize, true);\r\n            window.addEventListener('orientationchange', this._onResize, true);\r\n        }\r\n\r\n        this.drawer.on('redraw', () => {\r\n            this.drawBuffer();\r\n            this.drawer.progress(this.backend.getPlayedPercents());\r\n        });\r\n\r\n        // Click-to-seek\r\n        this.drawer.on('click', (e, progress) => {\r\n            setTimeout(() => this.seekTo(progress), 0);\r\n        });\r\n\r\n        // Relay the scroll event from the drawer\r\n        this.drawer.on('scroll', e => {\r\n            if (this.params.partialRender) {\r\n                this.drawBuffer();\r\n            }\r\n            this.fireEvent('scroll', e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create the backend\r\n     *\r\n     * @private\r\n     * @emits WaveSurfer#backend-created\r\n     */\r\n    createBackend() {\r\n        if (this.backend) {\r\n            this.backend.destroy();\r\n        }\r\n\r\n        // Back compat\r\n        if (this.params.backend == 'AudioElement') {\r\n            this.params.backend = 'MediaElement';\r\n        }\r\n\r\n        if (\r\n            this.params.backend == 'WebAudio' &&\r\n            !this.Backend.prototype.supportsWebAudio.call(null)\r\n        ) {\r\n            this.params.backend = 'MediaElement';\r\n        }\r\n\r\n        this.backend = new this.Backend(this.params);\r\n        this.backend.init();\r\n        this.fireEvent('backend-created', this.backend);\r\n\r\n        this.backend.on('finish', () => this.fireEvent('finish'));\r\n        this.backend.on('play', () => this.fireEvent('play'));\r\n        this.backend.on('pause', () => this.fireEvent('pause'));\r\n\r\n        this.backend.on('audioprocess', time => {\r\n            this.drawer.progress(this.backend.getPlayedPercents());\r\n            this.fireEvent('audioprocess', time);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create the peak cache\r\n     *\r\n     * @private\r\n     */\r\n    createPeakCache() {\r\n        if (this.params.partialRender) {\r\n            this.peakCache = new PeakCache();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the duration of the audio clip\r\n     *\r\n     * @example const duration = wavesurfer.getDuration();\r\n     * @return {number} Duration in seconds\r\n     */\r\n    getDuration() {\r\n        return this.backend.getDuration();\r\n    }\r\n\r\n    /**\r\n     * Get the current playback position\r\n     *\r\n     * @example const currentTime = wavesurfer.getCurrentTime();\r\n     * @return {number} Playback position in seconds\r\n     */\r\n    getCurrentTime() {\r\n        return this.backend.getCurrentTime();\r\n    }\r\n\r\n    /**\r\n     * Set the current play time in seconds.\r\n     *\r\n     * @param {number} seconds A positive number in seconds. E.g. 10 means 10\r\n     * seconds, 60 means 1 minute\r\n     */\r\n    setCurrentTime(seconds) {\r\n        if (seconds >= this.getDuration()) {\r\n            this.seekTo(1);\r\n        } else {\r\n            this.seekTo(seconds / this.getDuration());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts playback from the current position. Optional start and end\r\n     * measured in seconds can be used to set the range of audio to play.\r\n     *\r\n     * @param {?number} start Position to start at\r\n     * @param {?number} end Position to end at\r\n     * @emits WaveSurfer#interaction\r\n     * @return {Promise}\r\n     * @example\r\n     * // play from second 1 to 5\r\n     * wavesurfer.play(1, 5);\r\n     */\r\n    play(start, end) {\r\n        this.fireEvent('interaction', () => this.play(start, end));\r\n        return this.backend.play(start, end);\r\n    }\r\n\r\n    /**\r\n     * Stops playback\r\n     *\r\n     * @example wavesurfer.pause();\r\n     * @return {Promise}\r\n     */\r\n    pause() {\r\n        if (!this.backend.isPaused()) {\r\n            return this.backend.pause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Toggle playback\r\n     *\r\n     * @example wavesurfer.playPause();\r\n     * @return {Promise}\r\n     */\r\n    playPause() {\r\n        return this.backend.isPaused() ? this.play() : this.pause();\r\n    }\r\n\r\n    /**\r\n     * Get the current playback state\r\n     *\r\n     * @example const isPlaying = wavesurfer.isPlaying();\r\n     * @return {boolean} False if paused, true if playing\r\n     */\r\n    isPlaying() {\r\n        return !this.backend.isPaused();\r\n    }\r\n\r\n    /**\r\n     * Skip backward\r\n     *\r\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\r\n     * is used\r\n     * @example wavesurfer.skipBackward();\r\n     */\r\n    skipBackward(seconds) {\r\n        this.skip(-seconds || -this.params.skipLength);\r\n    }\r\n\r\n    /**\r\n     * Skip forward\r\n     *\r\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\r\n     * is used\r\n     * @example wavesurfer.skipForward();\r\n     */\r\n    skipForward(seconds) {\r\n        this.skip(seconds || this.params.skipLength);\r\n    }\r\n\r\n    /**\r\n     * Skip a number of seconds from the current position (use a negative value\r\n     * to go backwards).\r\n     *\r\n     * @param {number} offset Amount to skip back or forwards\r\n     * @example\r\n     * // go back 2 seconds\r\n     * wavesurfer.skip(-2);\r\n     */\r\n    skip(offset) {\r\n        const duration = this.getDuration() || 1;\r\n        let position = this.getCurrentTime() || 0;\r\n        position = Math.max(0, Math.min(duration, position + (offset || 0)));\r\n        this.seekAndCenter(position / duration);\r\n    }\r\n\r\n    /**\r\n     * Seeks to a position and centers the view\r\n     *\r\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\r\n     * @example\r\n     * // seek and go to the middle of the audio\r\n     * wavesurfer.seekTo(0.5);\r\n     */\r\n    seekAndCenter(progress) {\r\n        this.seekTo(progress);\r\n        this.drawer.recenter(progress);\r\n    }\r\n\r\n    /**\r\n     * Seeks to a position\r\n     *\r\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\r\n     * @emits WaveSurfer#interaction\r\n     * @emits WaveSurfer#seek\r\n     * @example\r\n     * // seek to the middle of the audio\r\n     * wavesurfer.seekTo(0.5);\r\n     */\r\n    seekTo(progress) {\r\n        // return an error if progress is not a number between 0 and 1\r\n        if (\r\n            typeof progress !== 'number' ||\r\n            !isFinite(progress) ||\r\n            progress < 0 ||\r\n            progress > 1\r\n        ) {\r\n            return console.error(\r\n                'Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!'\r\n            );\r\n        }\r\n        this.fireEvent('interaction', () => this.seekTo(progress));\r\n\r\n        const paused = this.backend.isPaused();\r\n        // avoid draw wrong position while playing backward seeking\r\n        if (!paused) {\r\n            this.backend.pause();\r\n        }\r\n        // avoid small scrolls while paused seeking\r\n        const oldScrollParent = this.params.scrollParent;\r\n        this.params.scrollParent = false;\r\n        this.backend.seekTo(progress * this.getDuration());\r\n        this.drawer.progress(progress);\r\n\r\n        if (!paused) {\r\n            this.backend.play();\r\n        }\r\n        this.params.scrollParent = oldScrollParent;\r\n        this.fireEvent('seek', progress);\r\n    }\r\n\r\n    /**\r\n     * Stops and goes to the beginning.\r\n     *\r\n     * @example wavesurfer.stop();\r\n     */\r\n    stop() {\r\n        this.pause();\r\n        this.seekTo(0);\r\n        this.drawer.progress(0);\r\n    }\r\n\r\n    /**\r\n     * Set the playback volume.\r\n     *\r\n     * @param {string} deviceId String value representing underlying output device\r\n     */\r\n    setSinkId(deviceId) {\r\n        return this.backend.setSinkId(deviceId);\r\n    }\r\n\r\n    /**\r\n     * Set the playback volume.\r\n     *\r\n     * @param {number} newVolume A value between 0 and 1, 0 being no\r\n     * volume and 1 being full volume.\r\n     * @emits WaveSurfer#volume\r\n     */\r\n    setVolume(newVolume) {\r\n        this.backend.setVolume(newVolume);\r\n        this.fireEvent('volume', newVolume);\r\n    }\r\n\r\n    /**\r\n     * Get the playback volume.\r\n     *\r\n     * @return {number} A value between 0 and 1, 0 being no\r\n     * volume and 1 being full volume.\r\n     */\r\n    getVolume() {\r\n        return this.backend.getVolume();\r\n    }\r\n\r\n    /**\r\n     * Set the playback rate.\r\n     *\r\n     * @param {number} rate A positive number. E.g. 0.5 means half the normal\r\n     * speed, 2 means double speed and so on.\r\n     * @example wavesurfer.setPlaybackRate(2);\r\n     */\r\n    setPlaybackRate(rate) {\r\n        this.backend.setPlaybackRate(rate);\r\n    }\r\n\r\n    /**\r\n     * Get the playback rate.\r\n     *\r\n     * @return {number}\r\n     */\r\n    getPlaybackRate() {\r\n        return this.backend.getPlaybackRate();\r\n    }\r\n\r\n    /**\r\n     * Toggle the volume on and off. It not currenly muted it will save the\r\n     * current volume value and turn the volume off. If currently muted then it\r\n     * will restore the volume to the saved value, and then rest the saved\r\n     * value.\r\n     *\r\n     * @example wavesurfer.toggleMute();\r\n     */\r\n    toggleMute() {\r\n        this.setMute(!this.isMuted);\r\n    }\r\n\r\n    /**\r\n     * Enable or disable muted audio\r\n     *\r\n     * @param {boolean} mute\r\n     * @emits WaveSurfer#volume\r\n     * @emits WaveSurfer#mute\r\n     * @example\r\n     * // unmute\r\n     * wavesurfer.setMute(false);\r\n     */\r\n    setMute(mute) {\r\n        // ignore all muting requests if the audio is already in that state\r\n        if (mute === this.isMuted) {\r\n            this.fireEvent('mute', this.isMuted);\r\n            return;\r\n        }\r\n\r\n        if (mute) {\r\n            // If currently not muted then save current volume,\r\n            // turn off the volume and update the mute properties\r\n            this.savedVolume = this.backend.getVolume();\r\n            this.backend.setVolume(0);\r\n            this.isMuted = true;\r\n            this.fireEvent('volume', 0);\r\n        } else {\r\n            // If currently muted then restore to the saved volume\r\n            // and update the mute properties\r\n            this.backend.setVolume(this.savedVolume);\r\n            this.isMuted = false;\r\n            this.fireEvent('volume', this.savedVolume);\r\n        }\r\n        this.fireEvent('mute', this.isMuted);\r\n    }\r\n\r\n    /**\r\n     * Get the current mute status.\r\n     *\r\n     * @example const isMuted = wavesurfer.getMute();\r\n     * @return {boolean}\r\n     */\r\n    getMute() {\r\n        return this.isMuted;\r\n    }\r\n\r\n    /**\r\n     * Get the current ready status.\r\n     *\r\n     * @example const isReady = wavesurfer.isReady();\r\n     * @return {boolean}\r\n     */\r\n    isReady() {\r\n        return this.isReady;\r\n    }\r\n\r\n    /**\r\n     * Get the list of current set filters as an array.\r\n     *\r\n     * Filters must be set with setFilters method first\r\n     *\r\n     * @return {array}\r\n     */\r\n    getFilters() {\r\n        return this.backend.filters || [];\r\n    }\r\n\r\n    /**\r\n     * Toggles `scrollParent` and redraws\r\n     *\r\n     * @example wavesurfer.toggleScroll();\r\n     */\r\n    toggleScroll() {\r\n        this.params.scrollParent = !this.params.scrollParent;\r\n        this.drawBuffer();\r\n    }\r\n\r\n    /**\r\n     * Toggle mouse interaction\r\n     *\r\n     * @example wavesurfer.toggleInteraction();\r\n     */\r\n    toggleInteraction() {\r\n        this.params.interact = !this.params.interact;\r\n    }\r\n\r\n    /**\r\n     * Get the fill color of the waveform after the cursor.\r\n     *\r\n     * @return {string} A CSS color string.\r\n     */\r\n    getWaveColor() {\r\n        return this.params.waveColor;\r\n    }\r\n\r\n    /**\r\n     * Set the fill color of the waveform after the cursor.\r\n     *\r\n     * @param {string} color A CSS color string.\r\n     * @example wavesurfer.setWaveColor('#ddd');\r\n     */\r\n    setWaveColor(color) {\r\n        this.params.waveColor = color;\r\n        this.drawBuffer();\r\n    }\r\n\r\n    /**\r\n     * Get the fill color of the waveform behind the cursor.\r\n     *\r\n     * @return {string} A CSS color string.\r\n     */\r\n    getProgressColor() {\r\n        return this.params.progressColor;\r\n    }\r\n\r\n    /**\r\n     * Set the fill color of the waveform behind the cursor.\r\n     *\r\n     * @param {string} color A CSS color string.\r\n     * @example wavesurfer.setProgressColor('#400');\r\n     */\r\n    setProgressColor(color) {\r\n        this.params.progressColor = color;\r\n        this.drawBuffer();\r\n    }\r\n\r\n    /**\r\n     * Get the fill color of the cursor indicating the playhead\r\n     * position.\r\n     *\r\n     * @return {string} A CSS color string.\r\n     */\r\n    getCursorColor() {\r\n        return this.params.cursorColor;\r\n    }\r\n\r\n    /**\r\n     * Set the fill color of the cursor indicating the playhead\r\n     * position.\r\n     *\r\n     * @param {string} color A CSS color string.\r\n     * @example wavesurfer.setCursorColor('#222');\r\n     */\r\n    setCursorColor(color) {\r\n        this.params.cursorColor = color;\r\n        this.drawer.updateCursor();\r\n    }\r\n\r\n    /**\r\n     * Get the height of the waveform.\r\n     *\r\n     * @return {number} Height measured in pixels.\r\n     */\r\n    getHeight() {\r\n        return this.params.height;\r\n    }\r\n\r\n    /**\r\n     * Set the height of the waveform.\r\n     *\r\n     * @param {number} height Height measured in pixels.\r\n     * @example wavesurfer.setHeight(200);\r\n     */\r\n    setHeight(height) {\r\n        this.params.height = height;\r\n        this.drawer.setHeight(height * this.params.pixelRatio);\r\n        this.drawBuffer();\r\n    }\r\n\r\n    /**\r\n     * Get the correct peaks for current wave viewport and render wave\r\n     *\r\n     * @private\r\n     * @emits WaveSurfer#redraw\r\n     */\r\n    drawBuffer() {\r\n        const nominalWidth = Math.round(\r\n            this.getDuration() *\r\n                this.params.minPxPerSec *\r\n                this.params.pixelRatio\r\n        );\r\n        const parentWidth = this.drawer.getWidth();\r\n        let width = nominalWidth;\r\n        let start = this.drawer.getScrollX();\r\n        let end = Math.max(start + parentWidth, width);\r\n        // Fill container\r\n        if (\r\n            this.params.fillParent &&\r\n            (!this.params.scrollParent || nominalWidth < parentWidth)\r\n        ) {\r\n            width = parentWidth;\r\n            start = 0;\r\n            end = width;\r\n        }\r\n\r\n        let peaks;\r\n        if (this.params.partialRender) {\r\n            const newRanges = this.peakCache.addRangeToPeakCache(\r\n                width,\r\n                start,\r\n                end\r\n            );\r\n            let i;\r\n            for (i = 0; i < newRanges.length; i++) {\r\n                peaks = this.backend.getPeaks(\r\n                    width,\r\n                    newRanges[i][0],\r\n                    newRanges[i][1]\r\n                );\r\n                this.drawer.drawPeaks(\r\n                    peaks,\r\n                    width,\r\n                    newRanges[i][0],\r\n                    newRanges[i][1]\r\n                );\r\n            }\r\n        } else {\r\n            peaks = this.backend.getPeaks(width, start, end);\r\n            this.drawer.drawPeaks(peaks, width, start, end);\r\n        }\r\n        this.fireEvent('redraw', peaks, width);\r\n    }\r\n\r\n    /**\r\n     * Horizontally zooms the waveform in and out. It also changes the parameter\r\n     * `minPxPerSec` and enables the `scrollParent` option. Calling the function\r\n     * with a falsey parameter will reset the zoom state.\r\n     *\r\n     * @param {?number} pxPerSec Number of horizontal pixels per second of\r\n     * audio, if none is set the waveform returns to unzoomed state\r\n     * @emits WaveSurfer#zoom\r\n     * @example wavesurfer.zoom(20);\r\n     */\r\n    zoom(pxPerSec) {\r\n        if (!pxPerSec) {\r\n            this.params.minPxPerSec = this.defaultParams.minPxPerSec;\r\n            this.params.scrollParent = false;\r\n        } else {\r\n            this.params.minPxPerSec = pxPerSec;\r\n            this.params.scrollParent = true;\r\n        }\r\n\r\n        this.drawBuffer();\r\n        this.drawer.progress(this.backend.getPlayedPercents());\r\n\r\n        this.drawer.recenter(this.getCurrentTime() / this.getDuration());\r\n        this.fireEvent('zoom', pxPerSec);\r\n    }\r\n\r\n    /**\r\n     * Decode buffer and load\r\n     *\r\n     * @private\r\n     * @param {ArrayBuffer} arraybuffer\r\n     */\r\n    loadArrayBuffer(arraybuffer) {\r\n        this.decodeArrayBuffer(arraybuffer, data => {\r\n            if (!this.isDestroyed) {\r\n                this.loadDecodedBuffer(data);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Directly load an externally decoded AudioBuffer\r\n     *\r\n     * @private\r\n     * @param {AudioBuffer} buffer\r\n     * @emits WaveSurfer#ready\r\n     */\r\n    loadDecodedBuffer(buffer) {\r\n        this.backend.load(buffer);\r\n        this.drawBuffer();\r\n        this.fireEvent('ready');\r\n        this.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Loads audio data from a Blob or File object\r\n     *\r\n     * @param {Blob|File} blob Audio data\r\n     * @example\r\n     */\r\n    loadBlob(blob) {\r\n        // Create file reader\r\n        const reader = new FileReader();\r\n        reader.addEventListener('progress', e => this.onProgress(e));\r\n        reader.addEventListener('load', e =>\r\n            this.loadArrayBuffer(e.target.result)\r\n        );\r\n        reader.addEventListener('error', () =>\r\n            this.fireEvent('error', 'Error reading file')\r\n        );\r\n        reader.readAsArrayBuffer(blob);\r\n        this.empty();\r\n    }\r\n\r\n    /**\r\n     * Loads audio and re-renders the waveform.\r\n     *\r\n     * @param {string|HTMLMediaElement} url The url of the audio file or the\r\n     * audio element with the audio\r\n     * @param {?number[]|number[][]} peaks Wavesurfer does not have to decode\r\n     * the audio to render the waveform if this is specified\r\n     * @param {?string} preload (Use with backend `MediaElement`)\r\n     * `'none'|'metadata'|'auto'` Preload attribute for the media element\r\n     * @param {?number} duration The duration of the audio. This is used to\r\n     * render the peaks data in the correct size for the audio duration (as\r\n     * befits the current minPxPerSec and zoom value) without having to decode\r\n     * the audio.\r\n     * @example\r\n     * // using ajax or media element to load (depending on backend)\r\n     * wavesurfer.load('http://example.com/demo.wav');\r\n     *\r\n     * // setting preload attribute with media element backend and supplying\r\n     * peaks wavesurfer.load(\r\n     *   'http://example.com/demo.wav',\r\n     *   [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\r\n     *   true,\r\n     * );\r\n     */\r\n    load(url, peaks, preload, duration) {\r\n        this.empty();\r\n\r\n        if (preload) {\r\n            // check whether the preload attribute will be usable and if not log\r\n            // a warning listing the reasons why not and nullify the variable\r\n            const preloadIgnoreReasons = {\r\n                \"Preload is not 'auto', 'none' or 'metadata'\":\r\n                    ['auto', 'metadata', 'none'].indexOf(preload) === -1,\r\n                'Peaks are not provided': !peaks,\r\n                'Backend is not of type MediaElement':\r\n                    this.params.backend !== 'MediaElement',\r\n                'Url is not of type string': typeof url !== 'string'\r\n            };\r\n            const activeReasons = Object.keys(preloadIgnoreReasons).filter(\r\n                reason => preloadIgnoreReasons[reason]\r\n            );\r\n            if (activeReasons.length) {\r\n                console.warn(\r\n                    'Preload parameter of wavesurfer.load will be ignored because:\\n\\t- ' +\r\n                        activeReasons.join('\\n\\t- ')\r\n                );\r\n                // stop invalid values from being used\r\n                preload = null;\r\n            }\r\n        }\r\n\r\n        switch (this.params.backend) {\r\n            case 'WebAudio':\r\n                return this.loadBuffer(url, peaks, duration);\r\n            case 'MediaElement':\r\n                return this.loadMediaElement(url, peaks, preload, duration);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads audio using Web Audio buffer backend.\r\n     *\r\n     * @private\r\n     * @param {string} url\r\n     * @param {?number[]|number[][]} peaks\r\n     * @param {?number} duration\r\n     */\r\n    loadBuffer(url, peaks, duration) {\r\n        const load = action => {\r\n            if (action) {\r\n                this.tmpEvents.push(this.once('ready', action));\r\n            }\r\n            return this.getArrayBuffer(url, data => this.loadArrayBuffer(data));\r\n        };\r\n\r\n        if (peaks) {\r\n            this.backend.setPeaks(peaks, duration);\r\n            this.drawBuffer();\r\n            this.tmpEvents.push(this.once('interaction', load));\r\n        } else {\r\n            return load();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Either create a media element, or load an existing media element.\r\n     *\r\n     * @private\r\n     * @param {string|HTMLMediaElement} urlOrElt Either a path to a media file, or an\r\n     * existing HTML5 Audio/Video Element\r\n     * @param {number[]|number[][]} peaks Array of peaks. Required to bypass web audio\r\n     * dependency\r\n     * @param {?boolean} preload Set to true if the preload attribute of the\r\n     * audio element should be enabled\r\n     * @param {?number} duration\r\n     */\r\n    loadMediaElement(urlOrElt, peaks, preload, duration) {\r\n        let url = urlOrElt;\r\n\r\n        if (typeof urlOrElt === 'string') {\r\n            this.backend.load(url, this.mediaContainer, peaks, preload);\r\n        } else {\r\n            const elt = urlOrElt;\r\n            this.backend.loadElt(elt, peaks);\r\n\r\n            // If peaks are not provided,\r\n            // url = element.src so we can get peaks with web audio\r\n            url = elt.src;\r\n        }\r\n\r\n        this.tmpEvents.push(\r\n            this.backend.once('canplay', () => {\r\n                this.drawBuffer();\r\n                this.fireEvent('ready');\r\n                this.isReady = true;\r\n            }),\r\n            this.backend.once('error', err => this.fireEvent('error', err))\r\n        );\r\n\r\n        // If no pre-decoded peaks provided or pre-decoded peaks are\r\n        // provided with forceDecode flag, attempt to download the\r\n        // audio file and decode it with Web Audio.\r\n        if (peaks) {\r\n            this.backend.setPeaks(peaks, duration);\r\n        }\r\n\r\n        if (\r\n            (!peaks || this.params.forceDecode) &&\r\n            this.backend.supportsWebAudio()\r\n        ) {\r\n            this.getArrayBuffer(url, arraybuffer => {\r\n                this.decodeArrayBuffer(arraybuffer, buffer => {\r\n                    this.backend.buffer = buffer;\r\n                    this.backend.setPeaks(null);\r\n                    this.drawBuffer();\r\n                    this.fireEvent('waveform-ready');\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Decode an array buffer and pass data to a callback\r\n     *\r\n     * @private\r\n     * @param {Object} arraybuffer\r\n     * @param {function} callback\r\n     */\r\n    decodeArrayBuffer(arraybuffer, callback) {\r\n        this.arraybuffer = arraybuffer;\r\n\r\n        this.backend.decodeArrayBuffer(\r\n            arraybuffer,\r\n            data => {\r\n                // Only use the decoded data if we haven't been destroyed or\r\n                // another decode started in the meantime\r\n                if (!this.isDestroyed && this.arraybuffer == arraybuffer) {\r\n                    callback(data);\r\n                    this.arraybuffer = null;\r\n                }\r\n            },\r\n            () => this.fireEvent('error', 'Error decoding audiobuffer')\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Load an array buffer by ajax and pass to a callback\r\n     *\r\n     * @param {string} url\r\n     * @param {function} callback\r\n     * @private\r\n     */\r\n    getArrayBuffer(url, callback) {\r\n        const ajax = util.ajax({\r\n            url: url,\r\n            responseType: 'arraybuffer',\r\n            xhr: this.params.xhr\r\n        });\r\n\r\n        this.currentAjax = ajax;\r\n\r\n        this.tmpEvents.push(\r\n            ajax.on('progress', e => {\r\n                this.onProgress(e);\r\n            }),\r\n            ajax.on('success', (data, e) => {\r\n                callback(data);\r\n                this.currentAjax = null;\r\n            }),\r\n            ajax.on('error', e => {\r\n                this.fireEvent('error', 'XHR error: ' + e.target.statusText);\r\n                this.currentAjax = null;\r\n            })\r\n        );\r\n\r\n        return ajax;\r\n    }\r\n\r\n    /**\r\n     * Called while the audio file is loading\r\n     *\r\n     * @private\r\n     * @param {Event} e\r\n     * @emits WaveSurfer#loading\r\n     */\r\n    onProgress(e) {\r\n        let percentComplete;\r\n        if (e.lengthComputable) {\r\n            percentComplete = e.loaded / e.total;\r\n        } else {\r\n            // Approximate progress with an asymptotic\r\n            // function, and assume downloads in the 1-3 MB range.\r\n            percentComplete = e.loaded / (e.loaded + 1000000);\r\n        }\r\n        this.fireEvent('loading', Math.round(percentComplete * 100), e.target);\r\n    }\r\n\r\n    /**\r\n     * Exports PCM data into a JSON array and opens in a new window.\r\n     *\r\n     * @param {number} length=1024 The scale in which to export the peaks. (Integer)\r\n     * @param {number} accuracy=10000 (Integer)\r\n     * @param {?boolean} noWindow Set to true to disable opening a new\r\n     * window with the JSON\r\n     * @param {number} start\r\n     * @todo Update exportPCM to work with new getPeaks signature\r\n     * @return {string} JSON of peaks\r\n     */\r\n    exportPCM(length, accuracy, noWindow, start) {\r\n        length = length || 1024;\r\n        start = start || 0;\r\n        accuracy = accuracy || 10000;\r\n        noWindow = noWindow || false;\r\n        const peaks = this.backend.getPeaks(length, start);\r\n        const arr = [].map.call(\r\n            peaks,\r\n            val => Math.round(val * accuracy) / accuracy\r\n        );\r\n        const json = JSON.stringify(arr);\r\n        if (!noWindow) {\r\n            window.open(\r\n                'data:application/json;charset=utf-8,' +\r\n                    encodeURIComponent(json)\r\n            );\r\n        }\r\n        return json;\r\n    }\r\n\r\n    /**\r\n     * Save waveform image as data URI.\r\n     *\r\n     * The default format is `image/png`. Other supported types are\r\n     * `image/jpeg` and `image/webp`.\r\n     *\r\n     * @param {string} format='image/png'\r\n     * @param {number} quality=1\r\n     * @return {string} data URI of image\r\n     */\r\n    exportImage(format, quality) {\r\n        if (!format) {\r\n            format = 'image/png';\r\n        }\r\n        if (!quality) {\r\n            quality = 1;\r\n        }\r\n\r\n        return this.drawer.getImage(format, quality);\r\n    }\r\n\r\n    /**\r\n     * Cancel any ajax request currently in progress\r\n     */\r\n    cancelAjax() {\r\n        if (this.currentAjax) {\r\n            this.currentAjax.xhr.abort();\r\n            this.currentAjax = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    clearTmpEvents() {\r\n        this.tmpEvents.forEach(e => e.un());\r\n    }\r\n\r\n    /**\r\n     * Display empty waveform.\r\n     */\r\n    empty() {\r\n        if (!this.backend.isPaused()) {\r\n            this.stop();\r\n            this.backend.disconnectSource();\r\n        }\r\n        this.isReady = false;\r\n        this.cancelAjax();\r\n        this.clearTmpEvents();\r\n        this.drawer.progress(0);\r\n        this.drawer.setWidth(0);\r\n        this.drawer.drawPeaks({ length: this.drawer.getWidth() }, 0);\r\n    }\r\n\r\n    /**\r\n     * Remove events, elements and disconnect WebAudio nodes.\r\n     *\r\n     * @emits WaveSurfer#destroy\r\n     */\r\n    destroy() {\r\n        this.destroyAllPlugins();\r\n        this.fireEvent('destroy');\r\n        this.cancelAjax();\r\n        this.clearTmpEvents();\r\n        this.unAll();\r\n        if (this.params.responsive !== false) {\r\n            window.removeEventListener('resize', this._onResize, true);\r\n            window.removeEventListener(\r\n                'orientationchange',\r\n                this._onResize,\r\n                true\r\n            );\r\n        }\r\n        this.backend.destroy();\r\n        this.drawer.destroy();\r\n        this.isDestroyed = true;\r\n        this.isReady = false;\r\n        this.arraybuffer = null;\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/wavesurfer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 494,
    "kind": "external",
    "name": "HTMLElement",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/HTMLElement",
    "memberof": "src/wavesurfer.js",
    "static": true,
    "longname": "src/wavesurfer.js~HTMLElement",
    "access": "public",
    "description": null
  },
  {
    "__docId__": 495,
    "kind": "external",
    "name": "OfflineAudioContext",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext",
    "memberof": "src/wavesurfer.js",
    "static": true,
    "longname": "src/wavesurfer.js~OfflineAudioContext",
    "access": "public",
    "description": null
  },
  {
    "__docId__": 496,
    "kind": "external",
    "name": "File",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/File",
    "memberof": "src/wavesurfer.js",
    "static": true,
    "longname": "src/wavesurfer.js~File",
    "access": "public",
    "description": null
  },
  {
    "__docId__": 497,
    "kind": "external",
    "name": "Blob",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Blob",
    "memberof": "src/wavesurfer.js",
    "static": true,
    "longname": "src/wavesurfer.js~Blob",
    "access": "public",
    "description": null
  },
  {
    "__docId__": 498,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "src/wavesurfer.js",
    "static": true,
    "longname": "src/wavesurfer.js~CanvasRenderingContext2D",
    "access": "public",
    "description": null
  },
  {
    "__docId__": 499,
    "kind": "external",
    "name": "MediaStreamConstraints",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints",
    "memberof": "src/wavesurfer.js",
    "static": true,
    "longname": "src/wavesurfer.js~MediaStreamConstraints",
    "access": "public",
    "description": null
  },
  {
    "__docId__": 500,
    "kind": "external",
    "name": "AudioNode",
    "externalLink": "https://developer.mozilla.org/de/docs/Web/API/AudioNode",
    "memberof": "src/wavesurfer.js",
    "static": true,
    "longname": "src/wavesurfer.js~AudioNode",
    "access": "public",
    "description": null
  },
  {
    "__docId__": 501,
    "kind": "typedef",
    "name": "WavesurferParams",
    "memberof": "src/wavesurfer.js",
    "static": true,
    "longname": "src/wavesurfer.js~WavesurferParams",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "AudioContext"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "audioContext",
        "description": "Use your own previously\ninitialized AudioContext or leave blank."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "audioRate",
        "description": "Speed at which to play audio. Lower number is\nslower."
      },
      {
        "nullable": null,
        "types": [
          "ScriptProcessorNode"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "audioScriptProcessor",
        "description": "Use your own previously\ninitialized ScriptProcessorNode or leave blank."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "autoCenter",
        "description": "If a scrollbar is present, center the\nwaveform around the progress"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'WebAudio'",
        "defaultRaw": "'WebAudio'",
        "name": "backend",
        "description": "`'WebAudio'|'MediaElement'` In most cases\nyou don't have to set this manually. MediaElement is a fallback for\nunsupported browsers."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "barHeight",
        "description": "The height of the wave"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "barGap",
        "description": "The optional spacing between bars of the wave,\nif not provided will be calculated in legacy format."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "closeAudioContext",
        "description": "Close and nullify all audio\ncontexts when the destroy method is called."
      },
      {
        "nullable": false,
        "types": [
          "string",
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": "CSS selector or HTML element where\nthe waveform should be drawn. This is the only required parameter."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'#333'",
        "defaultRaw": "'#333'",
        "name": "cursorColor",
        "description": "The fill color of the cursor indicating\nthe playhead position."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cursorWidth",
        "description": "Measured in pixels."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "fillParent",
        "description": "Whether to fill the entire container or\ndraw only according to `minPxPerSec`."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "forceDecode",
        "description": "Force decoding of audio using web audio\nwhen zooming to get a more detailed waveform."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "128",
        "defaultRaw": 128,
        "name": "height",
        "description": "The height of the waveform. Measured in\npixels."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "hideScrollbar",
        "description": "Whether to hide the horizontal\nscrollbar when one would normally be shown."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "interact",
        "description": "Whether the mouse interaction will be\nenabled at initialization. You can switch this parameter at any time later\non."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "loopSelection",
        "description": "(Use with regions plugin) Enable\nlooping of selected regions"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "4000",
        "defaultRaw": 4000,
        "name": "maxCanvasWidth",
        "description": "Maximum width of a single canvas in\npixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\neven integer). If the waveform is longer than this value, additional canvases\nwill be used to render the waveform, which is useful for very large waveforms\nthat may be too wide for browsers to draw on a single canvas."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "mediaControls",
        "description": "(Use with backend `MediaElement`)\nthis enables the native controls for the media element"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'audio'",
        "defaultRaw": "'audio'",
        "name": "mediaType",
        "description": "(Use with backend `MediaElement`)\n`'audio'|'video'`"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "20",
        "defaultRaw": 20,
        "name": "minPxPerSec",
        "description": "Minimum number of pixels per second of\naudio."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "normalize",
        "description": "If true, normalize by the maximum peak\ninstead of 1.0."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "partialRender",
        "description": "Use the PeakCache to improve\nrendering speed of large waveforms"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "window.devicePixelRatio",
        "defaultRaw": "window.devicePixelRatio",
        "name": "pixelRatio",
        "description": "The pixel ratio used to\ncalculate display"
      },
      {
        "nullable": null,
        "types": [
          "PluginDefinition[]"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "plugins",
        "description": "An array of plugin definitions to\nregister during instantiation, they will be directly initialised unless they\nare added with the `deferInit` property set to true."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'#555'",
        "defaultRaw": "'#555'",
        "name": "progressColor",
        "description": "The fill color of the part of the\nwaveform behind the cursor."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "removeMediaElementOnDestroy",
        "description": "Set to false to keep the\nmedia element in the DOM when the player is destroyed. This is useful when\nreusing an existing media element via the `loadMediaElement` method."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "MultiCanvas",
        "defaultRaw": "MultiCanvas",
        "name": "renderer",
        "description": "Can be used to inject a custom\nrenderer."
      },
      {
        "nullable": null,
        "types": [
          "boolean",
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "responsive",
        "description": "If set to `true` resize the\nwaveform, when the window is resized. This is debounced with a `100ms`\ntimeout by default. If this parameter is a number it represents that timeout."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "scrollParent",
        "description": "Whether to scroll the container with a\nlengthy waveform. Otherwise the waveform is shrunk to the container width\n(see fillParent)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "skipLength",
        "description": "Number of seconds to skip with the\nskipForward() and skipBackward() methods."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "splitChannels",
        "description": "Render with seperate waveforms for\nthe channels of the audio"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'#999'",
        "defaultRaw": "'#999'",
        "name": "waveColor",
        "description": "The fill color of the waveform after the\ncursor."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "xhr",
        "description": "XHR options."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "WavesurferParams"
    }
  },
  {
    "__docId__": 502,
    "kind": "typedef",
    "name": "PluginDefinition",
    "memberof": "src/wavesurfer.js",
    "static": true,
    "longname": "src/wavesurfer.js~PluginDefinition",
    "access": "public",
    "description": "The Object used to describe a plugin",
    "examples": [
      "wavesurfer.addPlugin(pluginDefinition);"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin, the plugin instance will be\nadded as a property to the wavesurfer instance under this name"
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "staticProps",
        "description": "The properties that should be added to the\nwavesurfer instance as static properties"
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "deferInit",
        "description": "Don't initialise plugin\nautomatically"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "params",
        "description": "The plugin parameters, they are the first parameter\npassed to the plugin class constructor function"
      },
      {
        "nullable": null,
        "types": [
          "PluginClass"
        ],
        "spread": false,
        "optional": false,
        "name": "instance",
        "description": "The plugin instance factory, is called with\nthe dependency specified in extends. Returns the plugin class."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "PluginDefinition"
    }
  },
  {
    "__docId__": 503,
    "kind": "class",
    "name": "PluginClass",
    "memberof": "src/wavesurfer.js",
    "static": true,
    "longname": "src/wavesurfer.js~PluginClass",
    "access": "public",
    "export": false,
    "importPath": "wavesurfer.js/src/wavesurfer.js",
    "importStyle": null,
    "description": "This is the interface which is implemented by all plugin classes. Note\nthat this only turns into an observer after being passed through\n`wavesurfer.addPlugin`.",
    "lineNumber": 122,
    "interface": false,
    "extends": [
      "Observer"
    ],
    "ignore": true
  },
  {
    "__docId__": 504,
    "kind": "method",
    "name": "create",
    "memberof": "src/wavesurfer.js~PluginClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~PluginClass#create",
    "access": "public",
    "description": "Plugin definition factory\n\nThis function must be used to create a plugin definition which can be\nused by wavesurfer to correctly instantiate the plugin.",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "params",
        "description": "The plugin params (specific to the plugin)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PluginDefinition"
      ],
      "spread": false,
      "description": "an object representing the plugin"
    }
  },
  {
    "__docId__": 505,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/wavesurfer.js~PluginClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~PluginClass#constructor",
    "access": "public",
    "description": "Construct the plugin",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "ws",
        "description": "The wavesurfer instance"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "params",
        "description": "The plugin params (specific to the plugin)"
      }
    ]
  },
  {
    "__docId__": 506,
    "kind": "method",
    "name": "init",
    "memberof": "src/wavesurfer.js~PluginClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~PluginClass#init",
    "access": "public",
    "description": "Initialise the plugin\n\nStart doing something. This is called by\n`wavesurfer.initPlugin(pluginName)`",
    "lineNumber": 146,
    "params": [],
    "return": null
  },
  {
    "__docId__": 507,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/wavesurfer.js~PluginClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~PluginClass#destroy",
    "access": "public",
    "description": "Destroy the plugin instance\n\nStop doing something. This is called by\n`wavesurfer.destroyPlugin(pluginName)`",
    "lineNumber": 153,
    "params": [],
    "return": null
  },
  {
    "__docId__": 508,
    "kind": "class",
    "name": "WaveSurfer",
    "memberof": "src/wavesurfer.js",
    "static": true,
    "longname": "src/wavesurfer.js~WaveSurfer",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/wavesurfer.js",
    "importStyle": "WaveSurfer",
    "description": "WaveSurfer core library class",
    "examples": [
      "const params = {\n  container: '#waveform',\n  waveColor: 'violet',\n  progressColor: 'purple'\n};\n\n// initialise like this\nconst wavesurfer = WaveSurfer.create(params);\n\n// or like this ...\nconst wavesurfer = new WaveSurfer(params);\nwavesurfer.init();\n\n// load audio file\nwavesurfer.load('example/media/demo.wav');"
    ],
    "lineNumber": 177,
    "interface": false,
    "extends": [
      "Observer"
    ]
  },
  {
    "__docId__": 509,
    "kind": "member",
    "name": "defaultParams",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#defaultParams",
    "access": "private",
    "description": null,
    "lineNumber": 179,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 510,
    "kind": "member",
    "name": "backends",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#backends",
    "access": "private",
    "description": null,
    "lineNumber": 218,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 511,
    "kind": "method",
    "name": "create",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/wavesurfer.js~WaveSurfer.create",
    "access": "public",
    "description": "Instantiate this class, call its `init` function and returns it",
    "examples": [
      "const wavesurfer = WaveSurfer.create(params);"
    ],
    "lineNumber": 230,
    "params": [
      {
        "nullable": null,
        "types": [
          "WavesurferParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "WaveSurfer instance"
    }
  },
  {
    "__docId__": 512,
    "kind": "member",
    "name": "VERSION",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": true,
    "longname": "src/wavesurfer.js~WaveSurfer.VERSION",
    "access": "public",
    "description": "The library version number is available as a static property of the\nWaveSurfer class",
    "examples": [
      "console.log('Using wavesurfer.js ' + WaveSurfer.VERSION);"
    ],
    "lineNumber": 243,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 513,
    "kind": "member",
    "name": "util",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#util",
    "access": "public",
    "description": "Functions in the `util` property are available as a prototype property to\nall instances",
    "examples": [
      "const wavesurfer = WaveSurfer.create(params);\nwavesurfer.util.style(myElement, { background: 'blue' });"
    ],
    "lineNumber": 254,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 514,
    "kind": "member",
    "name": "util",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": true,
    "longname": "src/wavesurfer.js~WaveSurfer.util",
    "access": "public",
    "description": "Functions in the `util` property are available as a static property of the\nWaveSurfer class",
    "examples": [
      "WaveSurfer.util.style(myElement, { background: 'blue' });"
    ],
    "lineNumber": 264,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 515,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#constructor",
    "access": "public",
    "description": "Initialise wavesurfer instance",
    "examples": [
      "const wavesurfer = new WaveSurfer(params);"
    ],
    "lineNumber": 274,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{this}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "WavesurferParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Instantiation options for wavesurfer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 516,
    "kind": "member",
    "name": "params",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#params",
    "access": "private",
    "description": "Extract relevant parameters (or defaults)",
    "lineNumber": 280,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 517,
    "kind": "member",
    "name": "container",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#container",
    "access": "private",
    "description": null,
    "lineNumber": 283,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 518,
    "kind": "member",
    "name": "mediaContainer",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#mediaContainer",
    "access": "private",
    "description": null,
    "lineNumber": 294,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 521,
    "kind": "member",
    "name": "savedVolume",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#savedVolume",
    "access": "private",
    "description": "",
    "lineNumber": 320,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 522,
    "kind": "member",
    "name": "isMuted",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#isMuted",
    "access": "private",
    "description": "",
    "lineNumber": 326,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 523,
    "kind": "member",
    "name": "tmpEvents",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#tmpEvents",
    "access": "private",
    "description": "",
    "lineNumber": 333,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 524,
    "kind": "member",
    "name": "currentAjax",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#currentAjax",
    "access": "private",
    "description": "",
    "lineNumber": 339,
    "type": {
      "nullable": null,
      "types": [
        "Observer"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 525,
    "kind": "member",
    "name": "arraybuffer",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#arraybuffer",
    "access": "private",
    "description": null,
    "lineNumber": 341,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 526,
    "kind": "member",
    "name": "drawer",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#drawer",
    "access": "private",
    "description": null,
    "lineNumber": 343,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 527,
    "kind": "member",
    "name": "backend",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#backend",
    "access": "private",
    "description": null,
    "lineNumber": 345,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 528,
    "kind": "member",
    "name": "peakCache",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#peakCache",
    "access": "private",
    "description": null,
    "lineNumber": 347,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 529,
    "kind": "member",
    "name": "Drawer",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#Drawer",
    "access": "private",
    "description": "",
    "lineNumber": 356,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 530,
    "kind": "member",
    "name": "Backend",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#Backend",
    "access": "private",
    "description": "",
    "lineNumber": 360,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 531,
    "kind": "member",
    "name": "initialisedPluginList",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#initialisedPluginList",
    "access": "private",
    "description": "",
    "lineNumber": 365,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 532,
    "kind": "member",
    "name": "isDestroyed",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#isDestroyed",
    "access": "private",
    "description": null,
    "lineNumber": 367,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 534,
    "kind": "member",
    "name": "_onResize",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#_onResize",
    "access": "private",
    "description": null,
    "lineNumber": 375,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 535,
    "kind": "method",
    "name": "init",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#init",
    "access": "public",
    "description": "Initialise the wave",
    "examples": [
      "var wavesurfer = new WaveSurfer(params);\nwavesurfer.init();"
    ],
    "lineNumber": 396,
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 536,
    "kind": "method",
    "name": "registerPlugins",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#registerPlugins",
    "access": "public",
    "description": "Add and initialise array of plugins (if `plugin.deferInit` is falsey),\nthis function is called in the init function of wavesurfer",
    "lineNumber": 412,
    "params": [
      {
        "nullable": null,
        "types": [
          "PluginDefinition[]"
        ],
        "spread": false,
        "optional": false,
        "name": "plugins",
        "description": "An array of plugin definitions"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    },
    "emits": [
      {
        "types": [
          "WaveSurfer#plugins-registered"
        ],
        "description": "Called with the array of plugin definitions"
      }
    ]
  },
  {
    "__docId__": 537,
    "kind": "method",
    "name": "addPlugin",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#addPlugin",
    "access": "public",
    "description": "Add a plugin object to wavesurfer",
    "examples": [
      "wavesurfer.addPlugin(WaveSurfer.minimap());"
    ],
    "lineNumber": 436,
    "params": [
      {
        "nullable": null,
        "types": [
          "PluginDefinition"
        ],
        "spread": false,
        "optional": false,
        "name": "plugin",
        "description": "A plugin definition"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    },
    "emits": [
      {
        "types": [
          "WaveSurfer#plugin-added"
        ],
        "description": "Called with the name of the plugin that was added"
      }
    ]
  },
  {
    "__docId__": 538,
    "kind": "member",
    "name": "[pluginStaticProp]",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#[pluginStaticProp]",
    "access": "public",
    "description": "Properties defined in a plugin definition's `staticProps` property are added as\nstaticProps properties of the WaveSurfer instance",
    "lineNumber": 453,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 539,
    "kind": "member",
    "name": "[plugin.name]",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#[plugin.name]",
    "access": "public",
    "description": "Instantiated plugin classes are added as a property of the wavesurfer\ninstance",
    "lineNumber": 472,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 540,
    "kind": "method",
    "name": "initPlugin",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#initPlugin",
    "access": "public",
    "description": "Initialise a plugin",
    "examples": [
      "wavesurfer.initPlugin('minimap');"
    ],
    "lineNumber": 485,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "A plugin name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    },
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#plugin-initialised"
      }
    ]
  },
  {
    "__docId__": 541,
    "kind": "method",
    "name": "destroyPlugin",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#destroyPlugin",
    "access": "public",
    "description": "Destroy a plugin",
    "examples": [
      "wavesurfer.destroyPlugin('minimap');"
    ],
    "lineNumber": 507,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{this}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "A plugin name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    },
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#plugin-destroyed"
      }
    ]
  },
  {
    "__docId__": 542,
    "kind": "method",
    "name": "destroyAllPlugins",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#destroyAllPlugins",
    "access": "private",
    "description": "Destroy all initialised plugins. Convenience function to use when\nwavesurfer is removed",
    "lineNumber": 534,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 543,
    "kind": "method",
    "name": "createDrawer",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#createDrawer",
    "access": "private",
    "description": "Create the drawer and draw the waveform",
    "lineNumber": 546,
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#drawer-created"
      }
    ],
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 545,
    "kind": "method",
    "name": "createBackend",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#createBackend",
    "access": "private",
    "description": "Create the backend",
    "lineNumber": 581,
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#backend-created"
      }
    ],
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 547,
    "kind": "method",
    "name": "createPeakCache",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#createPeakCache",
    "access": "private",
    "description": "Create the peak cache",
    "lineNumber": 617,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 549,
    "kind": "method",
    "name": "getDuration",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getDuration",
    "access": "public",
    "description": "Get the duration of the audio clip",
    "examples": [
      "const duration = wavesurfer.getDuration();"
    ],
    "lineNumber": 629,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Duration in seconds"
    },
    "params": []
  },
  {
    "__docId__": 550,
    "kind": "method",
    "name": "getCurrentTime",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getCurrentTime",
    "access": "public",
    "description": "Get the current playback position",
    "examples": [
      "const currentTime = wavesurfer.getCurrentTime();"
    ],
    "lineNumber": 639,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Playback position in seconds"
    },
    "params": []
  },
  {
    "__docId__": 551,
    "kind": "method",
    "name": "setCurrentTime",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#setCurrentTime",
    "access": "public",
    "description": "Set the current play time in seconds.",
    "lineNumber": 649,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seconds",
        "description": "A positive number in seconds. E.g. 10 means 10\nseconds, 60 means 1 minute"
      }
    ],
    "return": null
  },
  {
    "__docId__": 552,
    "kind": "method",
    "name": "play",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#play",
    "access": "public",
    "description": "Starts playback from the current position. Optional start and end\nmeasured in seconds can be used to set the range of audio to play.",
    "examples": [
      "// play from second 1 to 5\nwavesurfer.play(1, 5);"
    ],
    "lineNumber": 669,
    "params": [
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Position to start at"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Position to end at"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#interaction"
      }
    ]
  },
  {
    "__docId__": 553,
    "kind": "method",
    "name": "pause",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#pause",
    "access": "public",
    "description": "Stops playback",
    "examples": [
      "wavesurfer.pause();"
    ],
    "lineNumber": 680,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 554,
    "kind": "method",
    "name": "playPause",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#playPause",
    "access": "public",
    "description": "Toggle playback",
    "examples": [
      "wavesurfer.playPause();"
    ],
    "lineNumber": 692,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 555,
    "kind": "method",
    "name": "isPlaying",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#isPlaying",
    "access": "public",
    "description": "Get the current playback state",
    "examples": [
      "const isPlaying = wavesurfer.isPlaying();"
    ],
    "lineNumber": 702,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "False if paused, true if playing"
    },
    "params": []
  },
  {
    "__docId__": 556,
    "kind": "method",
    "name": "skipBackward",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#skipBackward",
    "access": "public",
    "description": "Skip backward",
    "examples": [
      "wavesurfer.skipBackward();"
    ],
    "lineNumber": 713,
    "params": [
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seconds",
        "description": "Amount to skip back, if not specified `skipLength`\nis used"
      }
    ],
    "return": null
  },
  {
    "__docId__": 557,
    "kind": "method",
    "name": "skipForward",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#skipForward",
    "access": "public",
    "description": "Skip forward",
    "examples": [
      "wavesurfer.skipForward();"
    ],
    "lineNumber": 724,
    "params": [
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seconds",
        "description": "Amount to skip back, if not specified `skipLength`\nis used"
      }
    ],
    "return": null
  },
  {
    "__docId__": 558,
    "kind": "method",
    "name": "skip",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#skip",
    "access": "public",
    "description": "Skip a number of seconds from the current position (use a negative value\nto go backwards).",
    "examples": [
      "// go back 2 seconds\nwavesurfer.skip(-2);"
    ],
    "lineNumber": 737,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "offset",
        "description": "Amount to skip back or forwards"
      }
    ],
    "return": null
  },
  {
    "__docId__": 559,
    "kind": "method",
    "name": "seekAndCenter",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#seekAndCenter",
    "access": "public",
    "description": "Seeks to a position and centers the view",
    "examples": [
      "// seek and go to the middle of the audio\nwavesurfer.seekTo(0.5);"
    ],
    "lineNumber": 752,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "progress",
        "description": "Between 0 (=beginning) and 1 (=end)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 560,
    "kind": "method",
    "name": "seekTo",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#seekTo",
    "access": "public",
    "description": "Seeks to a position",
    "examples": [
      "// seek to the middle of the audio\nwavesurfer.seekTo(0.5);"
    ],
    "lineNumber": 767,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "progress",
        "description": "Between 0 (=beginning) and 1 (=end)"
      }
    ],
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#interaction"
      },
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#seek"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 561,
    "kind": "method",
    "name": "stop",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#stop",
    "access": "public",
    "description": "Stops and goes to the beginning.",
    "examples": [
      "wavesurfer.stop();"
    ],
    "lineNumber": 804,
    "params": [],
    "return": null
  },
  {
    "__docId__": 562,
    "kind": "method",
    "name": "setSinkId",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#setSinkId",
    "access": "public",
    "description": "Set the playback volume.",
    "lineNumber": 815,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": "String value representing underlying output device"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 563,
    "kind": "method",
    "name": "setVolume",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#setVolume",
    "access": "public",
    "description": "Set the playback volume.",
    "lineNumber": 826,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newVolume",
        "description": "A value between 0 and 1, 0 being no\nvolume and 1 being full volume."
      }
    ],
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#volume"
      }
    ],
    "return": null
  },
  {
    "__docId__": 564,
    "kind": "method",
    "name": "getVolume",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getVolume",
    "access": "public",
    "description": "Get the playback volume.",
    "lineNumber": 837,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A value between 0 and 1, 0 being no\nvolume and 1 being full volume."
    },
    "params": []
  },
  {
    "__docId__": 565,
    "kind": "method",
    "name": "setPlaybackRate",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#setPlaybackRate",
    "access": "public",
    "description": "Set the playback rate.",
    "examples": [
      "wavesurfer.setPlaybackRate(2);"
    ],
    "lineNumber": 848,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "rate",
        "description": "A positive number. E.g. 0.5 means half the normal\nspeed, 2 means double speed and so on."
      }
    ],
    "return": null
  },
  {
    "__docId__": 566,
    "kind": "method",
    "name": "getPlaybackRate",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getPlaybackRate",
    "access": "public",
    "description": "Get the playback rate.",
    "lineNumber": 857,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 567,
    "kind": "method",
    "name": "toggleMute",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#toggleMute",
    "access": "public",
    "description": "Toggle the volume on and off. It not currenly muted it will save the\ncurrent volume value and turn the volume off. If currently muted then it\nwill restore the volume to the saved value, and then rest the saved\nvalue.",
    "examples": [
      "wavesurfer.toggleMute();"
    ],
    "lineNumber": 869,
    "params": [],
    "return": null
  },
  {
    "__docId__": 568,
    "kind": "method",
    "name": "setMute",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#setMute",
    "access": "public",
    "description": "Enable or disable muted audio",
    "examples": [
      "// unmute\nwavesurfer.setMute(false);"
    ],
    "lineNumber": 883,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "mute",
        "description": ""
      }
    ],
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#volume"
      },
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#mute"
      }
    ],
    "return": null
  },
  {
    "__docId__": 572,
    "kind": "method",
    "name": "getMute",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getMute",
    "access": "public",
    "description": "Get the current mute status.",
    "examples": [
      "const isMuted = wavesurfer.getMute();"
    ],
    "lineNumber": 913,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 573,
    "kind": "method",
    "name": "isReady",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#isReady",
    "access": "public",
    "description": "Get the current ready status.",
    "examples": [
      "const isReady = wavesurfer.isReady();"
    ],
    "lineNumber": 923,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 574,
    "kind": "method",
    "name": "getFilters",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getFilters",
    "access": "public",
    "description": "Get the list of current set filters as an array.\n\nFilters must be set with setFilters method first",
    "lineNumber": 934,
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 575,
    "kind": "method",
    "name": "toggleScroll",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#toggleScroll",
    "access": "public",
    "description": "Toggles `scrollParent` and redraws",
    "examples": [
      "wavesurfer.toggleScroll();"
    ],
    "lineNumber": 943,
    "params": [],
    "return": null
  },
  {
    "__docId__": 576,
    "kind": "method",
    "name": "toggleInteraction",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#toggleInteraction",
    "access": "public",
    "description": "Toggle mouse interaction",
    "examples": [
      "wavesurfer.toggleInteraction();"
    ],
    "lineNumber": 953,
    "params": [],
    "return": null
  },
  {
    "__docId__": 577,
    "kind": "method",
    "name": "getWaveColor",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getWaveColor",
    "access": "public",
    "description": "Get the fill color of the waveform after the cursor.",
    "lineNumber": 962,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A CSS color string."
    },
    "params": []
  },
  {
    "__docId__": 578,
    "kind": "method",
    "name": "setWaveColor",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#setWaveColor",
    "access": "public",
    "description": "Set the fill color of the waveform after the cursor.",
    "examples": [
      "wavesurfer.setWaveColor('#ddd');"
    ],
    "lineNumber": 972,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "A CSS color string."
      }
    ],
    "return": null
  },
  {
    "__docId__": 579,
    "kind": "method",
    "name": "getProgressColor",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getProgressColor",
    "access": "public",
    "description": "Get the fill color of the waveform behind the cursor.",
    "lineNumber": 982,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A CSS color string."
    },
    "params": []
  },
  {
    "__docId__": 580,
    "kind": "method",
    "name": "setProgressColor",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#setProgressColor",
    "access": "public",
    "description": "Set the fill color of the waveform behind the cursor.",
    "examples": [
      "wavesurfer.setProgressColor('#400');"
    ],
    "lineNumber": 992,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "A CSS color string."
      }
    ],
    "return": null
  },
  {
    "__docId__": 581,
    "kind": "method",
    "name": "getCursorColor",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getCursorColor",
    "access": "public",
    "description": "Get the fill color of the cursor indicating the playhead\nposition.",
    "lineNumber": 1003,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A CSS color string."
    },
    "params": []
  },
  {
    "__docId__": 582,
    "kind": "method",
    "name": "setCursorColor",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#setCursorColor",
    "access": "public",
    "description": "Set the fill color of the cursor indicating the playhead\nposition.",
    "examples": [
      "wavesurfer.setCursorColor('#222');"
    ],
    "lineNumber": 1014,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "A CSS color string."
      }
    ],
    "return": null
  },
  {
    "__docId__": 583,
    "kind": "method",
    "name": "getHeight",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getHeight",
    "access": "public",
    "description": "Get the height of the waveform.",
    "lineNumber": 1024,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Height measured in pixels."
    },
    "params": []
  },
  {
    "__docId__": 584,
    "kind": "method",
    "name": "setHeight",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#setHeight",
    "access": "public",
    "description": "Set the height of the waveform.",
    "examples": [
      "wavesurfer.setHeight(200);"
    ],
    "lineNumber": 1034,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Height measured in pixels."
      }
    ],
    "return": null
  },
  {
    "__docId__": 585,
    "kind": "method",
    "name": "drawBuffer",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#drawBuffer",
    "access": "private",
    "description": "Get the correct peaks for current wave viewport and render wave",
    "lineNumber": 1046,
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#redraw"
      }
    ],
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 586,
    "kind": "method",
    "name": "zoom",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#zoom",
    "access": "public",
    "description": "Horizontally zooms the waveform in and out. It also changes the parameter\n`minPxPerSec` and enables the `scrollParent` option. Calling the function\nwith a falsey parameter will reset the zoom state.",
    "examples": [
      "wavesurfer.zoom(20);"
    ],
    "lineNumber": 1104,
    "params": [
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pxPerSec",
        "description": "Number of horizontal pixels per second of\naudio, if none is set the waveform returns to unzoomed state"
      }
    ],
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#zoom"
      }
    ],
    "return": null
  },
  {
    "__docId__": 587,
    "kind": "method",
    "name": "loadArrayBuffer",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#loadArrayBuffer",
    "access": "private",
    "description": "Decode buffer and load",
    "lineNumber": 1126,
    "params": [
      {
        "nullable": null,
        "types": [
          "ArrayBuffer"
        ],
        "spread": false,
        "optional": false,
        "name": "arraybuffer",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 588,
    "kind": "method",
    "name": "loadDecodedBuffer",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#loadDecodedBuffer",
    "access": "private",
    "description": "Directly load an externally decoded AudioBuffer",
    "lineNumber": 1141,
    "params": [
      {
        "nullable": null,
        "types": [
          "AudioBuffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buffer",
        "description": ""
      }
    ],
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#ready"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 590,
    "kind": "method",
    "name": "loadBlob",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#loadBlob",
    "access": "public",
    "description": "Loads audio data from a Blob or File object",
    "examples": [
      ""
    ],
    "lineNumber": 1154,
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob",
          "File"
        ],
        "spread": false,
        "optional": false,
        "name": "blob",
        "description": "Audio data"
      }
    ],
    "return": null
  },
  {
    "__docId__": 591,
    "kind": "method",
    "name": "load",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#load",
    "access": "public",
    "description": "Loads audio and re-renders the waveform.",
    "examples": [
      "// using ajax or media element to load (depending on backend)\nwavesurfer.load('http://example.com/demo.wav');\n\n// setting preload attribute with media element backend and supplying\npeaks wavesurfer.load(\n  'http://example.com/demo.wav',\n  [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\n  true,\n);"
    ],
    "lineNumber": 1192,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "HTMLMediaElement"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The url of the audio file or the\naudio element with the audio"
      },
      {
        "nullable": true,
        "types": [
          "number[]",
          "number[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Wavesurfer does not have to decode\nthe audio to render the waveform if this is specified"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "preload",
        "description": "(Use with backend `MediaElement`)\n`'none'|'metadata'|'auto'` Preload attribute for the media element"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "The duration of the audio. This is used to\nrender the peaks data in the correct size for the audio duration (as\nbefits the current minPxPerSec and zoom value) without having to decode\nthe audio."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 592,
    "kind": "method",
    "name": "loadBuffer",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#loadBuffer",
    "access": "private",
    "description": "Loads audio using Web Audio buffer backend.",
    "lineNumber": 1235,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "number[]",
          "number[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 593,
    "kind": "method",
    "name": "loadMediaElement",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#loadMediaElement",
    "access": "private",
    "description": "Either create a media element, or load an existing media element.",
    "lineNumber": 1264,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "HTMLMediaElement"
        ],
        "spread": false,
        "optional": false,
        "name": "urlOrElt",
        "description": "Either a path to a media file, or an\nexisting HTML5 Audio/Video Element"
      },
      {
        "nullable": null,
        "types": [
          "number[]",
          "number[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Array of peaks. Required to bypass web audio\ndependency"
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "preload",
        "description": "Set to true if the preload attribute of the\naudio element should be enabled"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 595,
    "kind": "method",
    "name": "decodeArrayBuffer",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#decodeArrayBuffer",
    "access": "private",
    "description": "Decode an array buffer and pass data to a callback",
    "lineNumber": 1316,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "arraybuffer",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 598,
    "kind": "method",
    "name": "getArrayBuffer",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getArrayBuffer",
    "access": "private",
    "description": "Load an array buffer by ajax and pass to a callback",
    "lineNumber": 1340,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 602,
    "kind": "method",
    "name": "onProgress",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#onProgress",
    "access": "private",
    "description": "Called while the audio file is loading",
    "lineNumber": 1373,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#loading"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 603,
    "kind": "method",
    "name": "exportPCM",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#exportPCM",
    "access": "public",
    "description": "Exports PCM data into a JSON array and opens in a new window.",
    "lineNumber": 1396,
    "todo": [
      "Update exportPCM to work with new getPeaks signature"
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "1024",
        "defaultRaw": 1024,
        "name": "length",
        "description": "The scale in which to export the peaks. (Integer)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "10000",
        "defaultRaw": 10000,
        "name": "accuracy",
        "description": "(Integer)"
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noWindow",
        "description": "Set to true to disable opening a new\nwindow with the JSON"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "JSON of peaks"
    }
  },
  {
    "__docId__": 604,
    "kind": "method",
    "name": "exportImage",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#exportImage",
    "access": "public",
    "description": "Save waveform image as data URI.\n\nThe default format is `image/png`. Other supported types are\n`image/jpeg` and `image/webp`.",
    "lineNumber": 1426,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'image/png'",
        "defaultRaw": "'image/png'",
        "name": "format",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "quality",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "data URI of image"
    }
  },
  {
    "__docId__": 605,
    "kind": "method",
    "name": "cancelAjax",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#cancelAjax",
    "access": "public",
    "description": "Cancel any ajax request currently in progress",
    "lineNumber": 1440,
    "params": [],
    "return": null
  },
  {
    "__docId__": 607,
    "kind": "method",
    "name": "clearTmpEvents",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#clearTmpEvents",
    "access": "private",
    "description": "",
    "lineNumber": 1450,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 608,
    "kind": "method",
    "name": "empty",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#empty",
    "access": "public",
    "description": "Display empty waveform.",
    "lineNumber": 1457,
    "params": [],
    "return": null
  },
  {
    "__docId__": 610,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#destroy",
    "access": "public",
    "description": "Remove events, elements and disconnect WebAudio nodes.",
    "lineNumber": 1475,
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#destroy"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 614,
    "kind": "file",
    "name": "src/webaudio.js",
    "content": "import * as util from './util';\r\n\r\n// using consts to prevent someone writing the string wrong\r\nconst PLAYING = 'playing';\r\nconst PAUSED = 'paused';\r\nconst FINISHED = 'finished';\r\n\r\n/**\r\n * WebAudio backend\r\n *\r\n * @extends {Observer}\r\n */\r\nexport default class WebAudio extends util.Observer {\r\n    /** @private */\r\n    static scriptBufferSize = 256;\r\n    /** @private */\r\n    audioContext = null;\r\n    /** @private */\r\n    offlineAudioContext = null;\r\n    /** @private */\r\n    stateBehaviors = {\r\n        [PLAYING]: {\r\n            init() {\r\n                this.addOnAudioProcess();\r\n            },\r\n            getPlayedPercents() {\r\n                const duration = this.getDuration();\r\n                return this.getCurrentTime() / duration || 0;\r\n            },\r\n            getCurrentTime() {\r\n                return this.startPosition + this.getPlayedTime();\r\n            }\r\n        },\r\n        [PAUSED]: {\r\n            init() {\r\n                this.removeOnAudioProcess();\r\n            },\r\n            getPlayedPercents() {\r\n                const duration = this.getDuration();\r\n                return this.getCurrentTime() / duration || 0;\r\n            },\r\n            getCurrentTime() {\r\n                return this.startPosition;\r\n            }\r\n        },\r\n        [FINISHED]: {\r\n            init() {\r\n                this.removeOnAudioProcess();\r\n                this.fireEvent('finish');\r\n            },\r\n            getPlayedPercents() {\r\n                return 1;\r\n            },\r\n            getCurrentTime() {\r\n                return this.getDuration();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Does the browser support this backend\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    supportsWebAudio() {\r\n        return !!(window.AudioContext || window.webkitAudioContext);\r\n    }\r\n\r\n    /**\r\n     * Get the audio context used by this backend or create one\r\n     *\r\n     * @return {AudioContext}\r\n     */\r\n    getAudioContext() {\r\n        if (!window.WaveSurferAudioContext) {\r\n            window.WaveSurferAudioContext = new (window.AudioContext ||\r\n                window.webkitAudioContext)();\r\n        }\r\n        return window.WaveSurferAudioContext;\r\n    }\r\n\r\n    /**\r\n     * Get the offline audio context used by this backend or create one\r\n     *\r\n     * @param {number} sampleRate\r\n     * @return {OfflineAudioContext}\r\n     */\r\n    getOfflineAudioContext(sampleRate) {\r\n        if (!window.WaveSurferOfflineAudioContext) {\r\n            window.WaveSurferOfflineAudioContext = new (window.OfflineAudioContext ||\r\n                window.webkitOfflineAudioContext)(1, 2, sampleRate);\r\n        }\r\n        return window.WaveSurferOfflineAudioContext;\r\n    }\r\n\r\n    /**\r\n     * Construct the backend\r\n     *\r\n     * @param {WavesurferParams} params\r\n     */\r\n    constructor(params) {\r\n        super();\r\n        /** @private */\r\n        this.params = params;\r\n        /** @private */\r\n        this.ac = params.audioContext || this.getAudioContext();\r\n        /**@private */\r\n        this.lastPlay = this.ac.currentTime;\r\n        /** @private */\r\n        this.startPosition = 0;\r\n        /** @private  */\r\n        this.scheduledPause = null;\r\n        /** @private */\r\n        this.states = {\r\n            [PLAYING]: Object.create(this.stateBehaviors[PLAYING]),\r\n            [PAUSED]: Object.create(this.stateBehaviors[PAUSED]),\r\n            [FINISHED]: Object.create(this.stateBehaviors[FINISHED])\r\n        };\r\n        /** @private */\r\n        this.analyser = null;\r\n        /** @private */\r\n        this.buffer = null;\r\n        /** @private */\r\n        this.filters = [];\r\n        /** @private */\r\n        this.gainNode = null;\r\n        /** @private */\r\n        this.mergedPeaks = null;\r\n        /** @private */\r\n        this.offlineAc = null;\r\n        /** @private */\r\n        this.peaks = null;\r\n        /** @private */\r\n        this.playbackRate = 1;\r\n        /** @private */\r\n        this.analyser = null;\r\n        /** @private */\r\n        this.scriptNode = null;\r\n        /** @private */\r\n        this.source = null;\r\n        /** @private */\r\n        this.splitPeaks = [];\r\n        /** @private */\r\n        this.state = null;\r\n        /** @private */\r\n        this.explicitDuration = null;\r\n    }\r\n\r\n    /**\r\n     * Initialise the backend, called in `wavesurfer.createBackend()`\r\n     */\r\n    init() {\r\n        this.createVolumeNode();\r\n        this.createScriptNode();\r\n        this.createAnalyserNode();\r\n\r\n        this.setState(PAUSED);\r\n        this.setPlaybackRate(this.params.audioRate);\r\n        this.setLength(0);\r\n    }\r\n\r\n    /** @private */\r\n    disconnectFilters() {\r\n        if (this.filters) {\r\n            this.filters.forEach(filter => {\r\n                filter && filter.disconnect();\r\n            });\r\n            this.filters = null;\r\n            // Reconnect direct path\r\n            this.analyser.connect(this.gainNode);\r\n        }\r\n    }\r\n\r\n    /** @private */\r\n    setState(state) {\r\n        if (this.state !== this.states[state]) {\r\n            this.state = this.states[state];\r\n            this.state.init.call(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unpacked `setFilters()`\r\n     *\r\n     * @param {...AudioNode} filters\r\n     */\r\n    setFilter(...filters) {\r\n        this.setFilters(filters);\r\n    }\r\n\r\n    /**\r\n     * Insert custom Web Audio nodes into the graph\r\n     *\r\n     * @param {AudioNode[]} filters Packed filters array\r\n     * @example\r\n     * const lowpass = wavesurfer.backend.ac.createBiquadFilter();\r\n     * wavesurfer.backend.setFilter(lowpass);\r\n     */\r\n    setFilters(filters) {\r\n        // Remove existing filters\r\n        this.disconnectFilters();\r\n\r\n        // Insert filters if filter array not empty\r\n        if (filters && filters.length) {\r\n            this.filters = filters;\r\n\r\n            // Disconnect direct path before inserting filters\r\n            this.analyser.disconnect();\r\n\r\n            // Connect each filter in turn\r\n            filters\r\n                .reduce((prev, curr) => {\r\n                    prev.connect(curr);\r\n                    return curr;\r\n                }, this.analyser)\r\n                .connect(this.gainNode);\r\n        }\r\n    }\r\n\r\n    /** @private */\r\n    createScriptNode() {\r\n        if (this.params.audioScriptProcessor) {\r\n            this.scriptNode = this.params.audioScriptProcessor;\r\n        } else {\r\n            if (this.ac.createScriptProcessor) {\r\n                this.scriptNode = this.ac.createScriptProcessor(\r\n                    WebAudio.scriptBufferSize\r\n                );\r\n            } else {\r\n                this.scriptNode = this.ac.createJavaScriptNode(\r\n                    WebAudio.scriptBufferSize\r\n                );\r\n            }\r\n        }\r\n        this.scriptNode.connect(this.ac.destination);\r\n    }\r\n\r\n    /** @private */\r\n    addOnAudioProcess() {\r\n        this.scriptNode.onaudioprocess = () => {\r\n            const time = this.getCurrentTime();\r\n\r\n            if (time >= this.getDuration()) {\r\n                this.setState(FINISHED);\r\n                this.fireEvent('pause');\r\n            } else if (time >= this.scheduledPause) {\r\n                this.pause();\r\n            } else if (this.state === this.states[PLAYING]) {\r\n                this.fireEvent('audioprocess', time);\r\n            }\r\n        };\r\n    }\r\n\r\n    /** @private */\r\n    removeOnAudioProcess() {\r\n        this.scriptNode.onaudioprocess = null;\r\n    }\r\n\r\n    /** @private */\r\n    createAnalyserNode() {\r\n        this.analyser = this.ac.createAnalyser();\r\n        this.analyser.connect(this.gainNode);\r\n    }\r\n\r\n    /**\r\n     * Create the gain node needed to control the playback volume.\r\n     *\r\n     * @private\r\n     */\r\n    createVolumeNode() {\r\n        // Create gain node using the AudioContext\r\n        if (this.ac.createGain) {\r\n            this.gainNode = this.ac.createGain();\r\n        } else {\r\n            this.gainNode = this.ac.createGainNode();\r\n        }\r\n        // Add the gain node to the graph\r\n        this.gainNode.connect(this.ac.destination);\r\n    }\r\n\r\n    /**\r\n     * Set the sink id for the media player\r\n     *\r\n     * @param {string} deviceId String value representing audio device id.\r\n     */\r\n    setSinkId(deviceId) {\r\n        if (deviceId) {\r\n            /**\r\n             * The webaudio API doesn't currently support setting the device\r\n             * output. Here we create an HTMLAudioElement, connect the\r\n             * webaudio stream to that element and setSinkId there.\r\n             */\r\n            let audio = new window.Audio();\r\n            if (!audio.setSinkId) {\r\n                return Promise.reject(\r\n                    new Error('setSinkId is not supported in your browser')\r\n                );\r\n            }\r\n            audio.autoplay = true;\r\n            var dest = this.ac.createMediaStreamDestination();\r\n            this.gainNode.disconnect();\r\n            this.gainNode.connect(dest);\r\n            audio.srcObject = dest.stream;\r\n\r\n            return audio.setSinkId(deviceId);\r\n        } else {\r\n            return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the audio volume\r\n     *\r\n     * @param {number} value A floating point value between 0 and 1.\r\n     */\r\n    setVolume(value) {\r\n        this.gainNode.gain.setValueAtTime(value, this.ac.currentTime);\r\n    }\r\n\r\n    /**\r\n     * Get the current volume\r\n     *\r\n     * @return {number} value A floating point value between 0 and 1.\r\n     */\r\n    getVolume() {\r\n        return this.gainNode.gain.value;\r\n    }\r\n\r\n    /** @private */\r\n    decodeArrayBuffer(arraybuffer, callback, errback) {\r\n        if (!this.offlineAc) {\r\n            this.offlineAc = this.getOfflineAudioContext(\r\n                this.ac ? this.ac.sampleRate : 44100\r\n            );\r\n        }\r\n        this.offlineAc.decodeAudioData(\r\n            arraybuffer,\r\n            data => callback(data),\r\n            errback\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Set pre-decoded peaks\r\n     *\r\n     * @param {number[]|number[][]} peaks\r\n     * @param {?number} duration\r\n     */\r\n    setPeaks(peaks, duration) {\r\n        this.explicitDuration = duration;\r\n        this.peaks = peaks;\r\n    }\r\n\r\n    /**\r\n     * Set the rendered length (different from the length of the audio).\r\n     *\r\n     * @param {number} length\r\n     */\r\n    setLength(length) {\r\n        // No resize, we can preserve the cached peaks.\r\n        if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) {\r\n            return;\r\n        }\r\n\r\n        this.splitPeaks = [];\r\n        this.mergedPeaks = [];\r\n        // Set the last element of the sparse array so the peak arrays are\r\n        // appropriately sized for other calculations.\r\n        const channels = this.buffer ? this.buffer.numberOfChannels : 1;\r\n        let c;\r\n        for (c = 0; c < channels; c++) {\r\n            this.splitPeaks[c] = [];\r\n            this.splitPeaks[c][2 * (length - 1)] = 0;\r\n            this.splitPeaks[c][2 * (length - 1) + 1] = 0;\r\n        }\r\n        this.mergedPeaks[2 * (length - 1)] = 0;\r\n        this.mergedPeaks[2 * (length - 1) + 1] = 0;\r\n    }\r\n\r\n    /**\r\n     * Compute the max and min value of the waveform when broken into <length> subranges.\r\n     *\r\n     * @param {number} length How many subranges to break the waveform into.\r\n     * @param {number} first First sample in the required range.\r\n     * @param {number} last Last sample in the required range.\r\n     * @return {number[]|number[][]} Array of 2*<length> peaks or array of arrays of\r\n     * peaks consisting of (max, min) values for each subrange.\r\n     */\r\n    getPeaks(length, first, last) {\r\n        if (this.peaks) {\r\n            return this.peaks;\r\n        }\r\n\r\n        first = first || 0;\r\n        last = last || length - 1;\r\n\r\n        this.setLength(length);\r\n\r\n        /**\r\n         * The following snippet fixes a buffering data issue on the Safari\r\n         * browser which returned undefined It creates the missing buffer based\r\n         * on 1 channel, 4096 samples and the sampleRate from the current\r\n         * webaudio context 4096 samples seemed to be the best fit for rendering\r\n         * will review this code once a stable version of Safari TP is out\r\n         */\r\n        if (!this.buffer.length) {\r\n            const newBuffer = this.createBuffer(1, 4096, this.sampleRate);\r\n            this.buffer = newBuffer.buffer;\r\n        }\r\n\r\n        const sampleSize = this.buffer.length / length;\r\n        const sampleStep = ~~(sampleSize / 10) || 1;\r\n        const channels = this.buffer.numberOfChannels;\r\n        let c;\r\n\r\n        for (c = 0; c < channels; c++) {\r\n            const peaks = this.splitPeaks[c];\r\n            const chan = this.buffer.getChannelData(c);\r\n            let i;\r\n\r\n            for (i = first; i <= last; i++) {\r\n                const start = ~~(i * sampleSize);\r\n                const end = ~~(start + sampleSize);\r\n                let min = 0;\r\n                let max = 0;\r\n                let j;\r\n\r\n                for (j = start; j < end; j += sampleStep) {\r\n                    const value = chan[j];\r\n\r\n                    if (value > max) {\r\n                        max = value;\r\n                    }\r\n\r\n                    if (value < min) {\r\n                        min = value;\r\n                    }\r\n                }\r\n\r\n                peaks[2 * i] = max;\r\n                peaks[2 * i + 1] = min;\r\n\r\n                if (c == 0 || max > this.mergedPeaks[2 * i]) {\r\n                    this.mergedPeaks[2 * i] = max;\r\n                }\r\n\r\n                if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\r\n                    this.mergedPeaks[2 * i + 1] = min;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\r\n    }\r\n\r\n    /**\r\n     * Get the position from 0 to 1\r\n     *\r\n     * @return {number}\r\n     */\r\n    getPlayedPercents() {\r\n        return this.state.getPlayedPercents.call(this);\r\n    }\r\n\r\n    /** @private */\r\n    disconnectSource() {\r\n        if (this.source) {\r\n            this.source.disconnect();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This is called when wavesurfer is destroyed\r\n     */\r\n    destroy() {\r\n        if (!this.isPaused()) {\r\n            this.pause();\r\n        }\r\n        this.unAll();\r\n        this.buffer = null;\r\n        this.disconnectFilters();\r\n        this.disconnectSource();\r\n        this.gainNode.disconnect();\r\n        this.scriptNode.disconnect();\r\n        this.analyser.disconnect();\r\n\r\n        // close the audioContext if closeAudioContext option is set to true\r\n        if (this.params.closeAudioContext) {\r\n            // check if browser supports AudioContext.close()\r\n            if (\r\n                typeof this.ac.close === 'function' &&\r\n                this.ac.state != 'closed'\r\n            ) {\r\n                this.ac.close();\r\n            }\r\n            // clear the reference to the audiocontext\r\n            this.ac = null;\r\n            // clear the actual audiocontext, either passed as param or the\r\n            // global singleton\r\n            if (!this.params.audioContext) {\r\n                window.WaveSurferAudioContext = null;\r\n            } else {\r\n                this.params.audioContext = null;\r\n            }\r\n            // clear the offlineAudioContext\r\n            window.WaveSurferOfflineAudioContext = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loaded a decoded audio buffer\r\n     *\r\n     * @param {Object} buffer\r\n     */\r\n    load(buffer) {\r\n        this.startPosition = 0;\r\n        this.lastPlay = this.ac.currentTime;\r\n        this.buffer = buffer;\r\n        this.createSource();\r\n    }\r\n\r\n    /** @private */\r\n    createSource() {\r\n        this.disconnectSource();\r\n        this.source = this.ac.createBufferSource();\r\n\r\n        // adjust for old browsers\r\n        this.source.start = this.source.start || this.source.noteGrainOn;\r\n        this.source.stop = this.source.stop || this.source.noteOff;\r\n\r\n        this.source.playbackRate.setValueAtTime(\r\n            this.playbackRate,\r\n            this.ac.currentTime\r\n        );\r\n        this.source.buffer = this.buffer;\r\n        this.source.connect(this.analyser);\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    isPaused() {\r\n        return this.state !== this.states[PLAYING];\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.getDuration()`\r\n     *\r\n     * @return {number}\r\n     */\r\n    getDuration() {\r\n        if (!this.buffer) {\r\n            if (this.explicitDuration) {\r\n                return this.explicitDuration;\r\n            }\r\n            return 0;\r\n        }\r\n        return this.buffer.duration;\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.seekTo()`\r\n     *\r\n     * @param {number} start Position to start at in seconds\r\n     * @param {number} end Position to end at in seconds\r\n     * @return {{start: number, end: number}}\r\n     */\r\n    seekTo(start, end) {\r\n        if (!this.buffer) {\r\n            return;\r\n        }\r\n\r\n        this.scheduledPause = null;\r\n\r\n        if (start == null) {\r\n            start = this.getCurrentTime();\r\n            if (start >= this.getDuration()) {\r\n                start = 0;\r\n            }\r\n        }\r\n        if (end == null) {\r\n            end = this.getDuration();\r\n        }\r\n\r\n        this.startPosition = start;\r\n        this.lastPlay = this.ac.currentTime;\r\n\r\n        if (this.state === this.states[FINISHED]) {\r\n            this.setState(PAUSED);\r\n        }\r\n\r\n        return {\r\n            start: start,\r\n            end: end\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get the playback position in seconds\r\n     *\r\n     * @return {number}\r\n     */\r\n    getPlayedTime() {\r\n        return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Plays the loaded audio region.\r\n     *\r\n     * @param {number} start Start offset in seconds, relative to the beginning\r\n     * of a clip.\r\n     * @param {number} end When to stop relative to the beginning of a clip.\r\n     */\r\n    play(start, end) {\r\n        if (!this.buffer) {\r\n            return;\r\n        }\r\n\r\n        // need to re-create source on each playback\r\n        this.createSource();\r\n\r\n        const adjustedTime = this.seekTo(start, end);\r\n\r\n        start = adjustedTime.start;\r\n        end = adjustedTime.end;\r\n\r\n        this.scheduledPause = end;\r\n\r\n        this.source.start(0, start, end - start);\r\n\r\n        if (this.ac.state == 'suspended') {\r\n            this.ac.resume && this.ac.resume();\r\n        }\r\n\r\n        this.setState(PLAYING);\r\n\r\n        this.fireEvent('play');\r\n    }\r\n\r\n    /**\r\n     * Pauses the loaded audio.\r\n     */\r\n    pause() {\r\n        this.scheduledPause = null;\r\n\r\n        this.startPosition += this.getPlayedTime();\r\n        this.source && this.source.stop(0);\r\n\r\n        this.setState(PAUSED);\r\n\r\n        this.fireEvent('pause');\r\n    }\r\n\r\n    /**\r\n     * Returns the current time in seconds relative to the audioclip's\r\n     * duration.\r\n     *\r\n     * @return {number}\r\n     */\r\n    getCurrentTime() {\r\n        return this.state.getCurrentTime.call(this);\r\n    }\r\n\r\n    /**\r\n     * Returns the current playback rate. (0=no playback, 1=normal playback)\r\n     *\r\n     * @return {number}\r\n     */\r\n    getPlaybackRate() {\r\n        return this.playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Set the audio source playback rate.\r\n     *\r\n     * @param {number} value\r\n     */\r\n    setPlaybackRate(value) {\r\n        value = value || 1;\r\n        if (this.isPaused()) {\r\n            this.playbackRate = value;\r\n        } else {\r\n            this.pause();\r\n            this.playbackRate = value;\r\n            this.play();\r\n        }\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/src/webaudio.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 615,
    "kind": "variable",
    "name": "PLAYING",
    "memberof": "src/webaudio.js",
    "static": true,
    "longname": "src/webaudio.js~PLAYING",
    "access": "public",
    "export": false,
    "importPath": "wavesurfer.js/src/webaudio.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 616,
    "kind": "variable",
    "name": "PAUSED",
    "memberof": "src/webaudio.js",
    "static": true,
    "longname": "src/webaudio.js~PAUSED",
    "access": "public",
    "export": false,
    "importPath": "wavesurfer.js/src/webaudio.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 617,
    "kind": "variable",
    "name": "FINISHED",
    "memberof": "src/webaudio.js",
    "static": true,
    "longname": "src/webaudio.js~FINISHED",
    "access": "public",
    "export": false,
    "importPath": "wavesurfer.js/src/webaudio.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 618,
    "kind": "class",
    "name": "WebAudio",
    "memberof": "src/webaudio.js",
    "static": true,
    "longname": "src/webaudio.js~WebAudio",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/webaudio.js",
    "importStyle": "WebAudio",
    "description": "WebAudio backend",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "Observer"
    ]
  },
  {
    "__docId__": 619,
    "kind": "member",
    "name": "scriptBufferSize",
    "memberof": "src/webaudio.js~WebAudio",
    "static": true,
    "longname": "src/webaudio.js~WebAudio.scriptBufferSize",
    "access": "private",
    "description": null,
    "lineNumber": 15,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 620,
    "kind": "member",
    "name": "audioContext",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#audioContext",
    "access": "private",
    "description": null,
    "lineNumber": 17,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 621,
    "kind": "member",
    "name": "offlineAudioContext",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#offlineAudioContext",
    "access": "private",
    "description": null,
    "lineNumber": 19,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 622,
    "kind": "member",
    "name": "stateBehaviors",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#stateBehaviors",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 623,
    "kind": "method",
    "name": "supportsWebAudio",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#supportsWebAudio",
    "access": "public",
    "description": "Does the browser support this backend",
    "lineNumber": 65,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 624,
    "kind": "method",
    "name": "getAudioContext",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#getAudioContext",
    "access": "public",
    "description": "Get the audio context used by this backend or create one",
    "lineNumber": 74,
    "return": {
      "nullable": null,
      "types": [
        "AudioContext"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 625,
    "kind": "method",
    "name": "getOfflineAudioContext",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#getOfflineAudioContext",
    "access": "public",
    "description": "Get the offline audio context used by this backend or create one",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sampleRate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "OfflineAudioContext"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 626,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#constructor",
    "access": "public",
    "description": "Construct the backend",
    "lineNumber": 101,
    "params": [
      {
        "nullable": null,
        "types": [
          "WavesurferParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 627,
    "kind": "member",
    "name": "params",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#params",
    "access": "private",
    "description": null,
    "lineNumber": 104,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 628,
    "kind": "member",
    "name": "ac",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#ac",
    "access": "private",
    "description": null,
    "lineNumber": 106,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 629,
    "kind": "member",
    "name": "lastPlay",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#lastPlay",
    "access": "private",
    "description": null,
    "lineNumber": 108,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 630,
    "kind": "member",
    "name": "startPosition",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#startPosition",
    "access": "private",
    "description": null,
    "lineNumber": 110,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 631,
    "kind": "member",
    "name": "scheduledPause",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#scheduledPause",
    "access": "private",
    "description": null,
    "lineNumber": 112,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 632,
    "kind": "member",
    "name": "states",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#states",
    "access": "private",
    "description": null,
    "lineNumber": 114,
    "ignore": true,
    "type": {
      "types": [
        "{\"PLAYING\": *, \"PAUSED\": *, \"FINISHED\": *}"
      ]
    }
  },
  {
    "__docId__": 633,
    "kind": "member",
    "name": "analyser",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#analyser",
    "access": "private",
    "description": null,
    "lineNumber": 120,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 634,
    "kind": "member",
    "name": "buffer",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#buffer",
    "access": "private",
    "description": null,
    "lineNumber": 122,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 635,
    "kind": "member",
    "name": "filters",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#filters",
    "access": "private",
    "description": null,
    "lineNumber": 124,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 636,
    "kind": "member",
    "name": "gainNode",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#gainNode",
    "access": "private",
    "description": null,
    "lineNumber": 126,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 637,
    "kind": "member",
    "name": "mergedPeaks",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#mergedPeaks",
    "access": "private",
    "description": null,
    "lineNumber": 128,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 638,
    "kind": "member",
    "name": "offlineAc",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#offlineAc",
    "access": "private",
    "description": null,
    "lineNumber": 130,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 639,
    "kind": "member",
    "name": "peaks",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#peaks",
    "access": "private",
    "description": null,
    "lineNumber": 132,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 640,
    "kind": "member",
    "name": "playbackRate",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#playbackRate",
    "access": "private",
    "description": null,
    "lineNumber": 134,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 642,
    "kind": "member",
    "name": "scriptNode",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#scriptNode",
    "access": "private",
    "description": null,
    "lineNumber": 138,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 643,
    "kind": "member",
    "name": "source",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#source",
    "access": "private",
    "description": null,
    "lineNumber": 140,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 644,
    "kind": "member",
    "name": "splitPeaks",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#splitPeaks",
    "access": "private",
    "description": null,
    "lineNumber": 142,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 645,
    "kind": "member",
    "name": "state",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#state",
    "access": "private",
    "description": null,
    "lineNumber": 144,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 646,
    "kind": "member",
    "name": "explicitDuration",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#explicitDuration",
    "access": "private",
    "description": null,
    "lineNumber": 146,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 647,
    "kind": "method",
    "name": "init",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#init",
    "access": "public",
    "description": "Initialise the backend, called in `wavesurfer.createBackend()`",
    "lineNumber": 152,
    "params": [],
    "return": null
  },
  {
    "__docId__": 648,
    "kind": "method",
    "name": "disconnectFilters",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#disconnectFilters",
    "access": "private",
    "description": null,
    "lineNumber": 163,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 650,
    "kind": "method",
    "name": "setState",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#setState",
    "access": "private",
    "description": null,
    "lineNumber": 175,
    "ignore": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 652,
    "kind": "method",
    "name": "setFilter",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#setFilter",
    "access": "public",
    "description": "Unpacked `setFilters()`",
    "lineNumber": 187,
    "params": [
      {
        "nullable": null,
        "types": [
          "...AudioNode"
        ],
        "spread": true,
        "optional": false,
        "name": "filters",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 653,
    "kind": "method",
    "name": "setFilters",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#setFilters",
    "access": "public",
    "description": "Insert custom Web Audio nodes into the graph",
    "examples": [
      "const lowpass = wavesurfer.backend.ac.createBiquadFilter();\nwavesurfer.backend.setFilter(lowpass);"
    ],
    "lineNumber": 199,
    "params": [
      {
        "nullable": null,
        "types": [
          "AudioNode[]"
        ],
        "spread": false,
        "optional": false,
        "name": "filters",
        "description": "Packed filters array"
      }
    ],
    "return": null
  },
  {
    "__docId__": 655,
    "kind": "method",
    "name": "createScriptNode",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#createScriptNode",
    "access": "private",
    "description": null,
    "lineNumber": 221,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 659,
    "kind": "method",
    "name": "addOnAudioProcess",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#addOnAudioProcess",
    "access": "private",
    "description": null,
    "lineNumber": 239,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 660,
    "kind": "method",
    "name": "removeOnAudioProcess",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#removeOnAudioProcess",
    "access": "private",
    "description": null,
    "lineNumber": 255,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 661,
    "kind": "method",
    "name": "createAnalyserNode",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#createAnalyserNode",
    "access": "private",
    "description": null,
    "lineNumber": 260,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 663,
    "kind": "method",
    "name": "createVolumeNode",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#createVolumeNode",
    "access": "private",
    "description": "Create the gain node needed to control the playback volume.",
    "lineNumber": 270,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 666,
    "kind": "method",
    "name": "setSinkId",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#setSinkId",
    "access": "public",
    "description": "Set the sink id for the media player",
    "lineNumber": 286,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": "String value representing audio device id."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 667,
    "kind": "method",
    "name": "setVolume",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#setVolume",
    "access": "public",
    "description": "Set the audio volume",
    "lineNumber": 316,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "A floating point value between 0 and 1."
      }
    ],
    "return": null
  },
  {
    "__docId__": 668,
    "kind": "method",
    "name": "getVolume",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#getVolume",
    "access": "public",
    "description": "Get the current volume",
    "lineNumber": 325,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "value A floating point value between 0 and 1."
    },
    "params": []
  },
  {
    "__docId__": 669,
    "kind": "method",
    "name": "decodeArrayBuffer",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#decodeArrayBuffer",
    "access": "private",
    "description": null,
    "lineNumber": 330,
    "ignore": true,
    "params": [
      {
        "name": "arraybuffer",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      },
      {
        "name": "errback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 671,
    "kind": "method",
    "name": "setPeaks",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#setPeaks",
    "access": "public",
    "description": "Set pre-decoded peaks",
    "lineNumber": 349,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]",
          "number[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 674,
    "kind": "method",
    "name": "setLength",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#setLength",
    "access": "public",
    "description": "Set the rendered length (different from the length of the audio).",
    "lineNumber": 359,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 677,
    "kind": "method",
    "name": "getPeaks",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#getPeaks",
    "access": "public",
    "description": "Compute the max and min value of the waveform when broken into <length> subranges.",
    "lineNumber": 389,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "How many subranges to break the waveform into."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "first",
        "description": "First sample in the required range."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "last",
        "description": "Last sample in the required range."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]",
        "number[][]"
      ],
      "spread": false,
      "description": "Array of 2*<length> peaks or array of arrays of\npeaks consisting of (max, min) values for each subrange."
    }
  },
  {
    "__docId__": 679,
    "kind": "method",
    "name": "getPlayedPercents",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#getPlayedPercents",
    "access": "public",
    "description": "Get the position from 0 to 1",
    "lineNumber": 461,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 680,
    "kind": "method",
    "name": "disconnectSource",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#disconnectSource",
    "access": "private",
    "description": null,
    "lineNumber": 466,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 681,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#destroy",
    "access": "public",
    "description": "This is called when wavesurfer is destroyed",
    "lineNumber": 475,
    "params": [],
    "return": null
  },
  {
    "__docId__": 684,
    "kind": "method",
    "name": "load",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#load",
    "access": "public",
    "description": "Loaded a decoded audio buffer",
    "lineNumber": 515,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "buffer",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 688,
    "kind": "method",
    "name": "createSource",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#createSource",
    "access": "private",
    "description": null,
    "lineNumber": 523,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 690,
    "kind": "method",
    "name": "isPaused",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#isPaused",
    "access": "public",
    "description": "Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`",
    "lineNumber": 544,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 691,
    "kind": "method",
    "name": "getDuration",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#getDuration",
    "access": "public",
    "description": "Used by `wavesurfer.getDuration()`",
    "lineNumber": 553,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 692,
    "kind": "method",
    "name": "seekTo",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#seekTo",
    "access": "public",
    "description": "Used by `wavesurfer.seekTo()`",
    "lineNumber": 570,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Position to start at in seconds"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Position to end at in seconds"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{start: number, end: number}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 696,
    "kind": "method",
    "name": "getPlayedTime",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#getPlayedTime",
    "access": "public",
    "description": "Get the playback position in seconds",
    "lineNumber": 605,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 697,
    "kind": "method",
    "name": "play",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#play",
    "access": "public",
    "description": "Plays the loaded audio region.",
    "lineNumber": 616,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Start offset in seconds, relative to the beginning\nof a clip."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "When to stop relative to the beginning of a clip."
      }
    ],
    "return": null
  },
  {
    "__docId__": 699,
    "kind": "method",
    "name": "pause",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#pause",
    "access": "public",
    "description": "Pauses the loaded audio.",
    "lineNumber": 645,
    "params": [],
    "return": null
  },
  {
    "__docId__": 703,
    "kind": "method",
    "name": "getCurrentTime",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#getCurrentTime",
    "access": "public",
    "description": "Returns the current time in seconds relative to the audioclip's\nduration.",
    "lineNumber": 662,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 704,
    "kind": "method",
    "name": "getPlaybackRate",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#getPlaybackRate",
    "access": "public",
    "description": "Returns the current playback rate. (0=no playback, 1=normal playback)",
    "lineNumber": 671,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 705,
    "kind": "method",
    "name": "setPlaybackRate",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#setPlaybackRate",
    "access": "public",
    "description": "Set the audio source playback rate.",
    "lineNumber": 680,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# [wavesurfer.js](https://wavesurfer-js.org)\r\n\r\n# Read below how to update to version 2!\r\n\r\n[![npm version](https://img.shields.io/npm/v/wavesurfer.js.svg?style=flat)](https://www.npmjs.com/package/wavesurfer.js)\r\n![npm](https://img.shields.io/npm/dm/wavesurfer.js.svg) [![Join the chat at https://gitter.im/katspaugh/wavesurfer.js](https://badges.gitter.im/katspaugh/wavesurfer.js.svg)](https://gitter.im/katspaugh/wavesurfer.js?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\nInteractive navigable audio visualization using Web Audio and Canvas.\r\n\r\n[![Screenshot](https://raw.githubusercontent.com/katspaugh/wavesurfer.js/gh-pages/example/screenshot.png \"Screenshot\")](https://wavesurfer-js.org)\r\n\r\nSee a [tutorial](https://wavesurfer-js.org/docs) and [examples](https://wavesurfer-js.org/examples) on [wavesurfer-js.org](https://wavesurfer-js.org).\r\n\r\n## Browser support\r\nwavesurfer.js works only in [modern browsers supporting Web Audio](http://caniuse.com/audio-api).\r\n\r\nIt will fallback to Audio Element in other browsers (without graphics). You can also try [wavesurfer.swf](https://github.com/laurentvd/wavesurfer.swf) which is a Flash-based fallback.\r\n\r\n## FAQ\r\n### Can the audio start playing before the waveform is drawn?\r\nYes, if you use the `backend: 'MediaElement'` option. See here: https://wavesurfer-js.org/example/audio-element/. The audio will start playing as you press play. A thin line will be displayed until the whole audio file is downloaded and decoded to draw the waveform.\r\n\r\n### Can drawing be done as file loads?\r\nNo. Web Audio needs the whole file to decode it in the browser. You can however load pre-decoded waveform data to draw the waveform immediately. See here: https://wavesurfer-js.org/example/audio-element/ (the \"Pre-recoded Peaks\" section).\r\n\r\n## API in examples\r\n\r\nChoose a container:\r\n```html\r\n<div id=\"waveform\"></div>\r\n```\r\nCreate an instance, passing the container selector and [options](https://wavesurfer-js.org/docs/options.html):\r\n\r\n```javascript\r\nvar wavesurfer = WaveSurfer.create({\r\n    container: '#waveform',\r\n    waveColor: 'violet',\r\n    progressColor: 'purple'\r\n});\r\n```\r\n\r\nSubscribe to some [events](https://wavesurfer-js.org/docs/events.html):\r\n\r\n```javascript\r\nwavesurfer.on('ready', function () {\r\n    wavesurfer.play();\r\n});\r\n```\r\n\r\nLoad an audio file from a URL:\r\n\r\n```javascript\r\nwavesurfer.load('example/media/demo.wav');\r\n```\r\n\r\n## Documentation\r\n\r\nSee the documentation on all available [methods](https://wavesurfer-js.org/docs/methods.html), [options](https://wavesurfer-js.org/docs/options.html) and [events](https://wavesurfer-js.org/docs/events.html) on the [homepage](https://wavesurfer-js.org/docs/).\r\n\r\n**Note on version 2**: The wavesurfer.js core library and the plugins were refactored to be modular so it can be used with a module bundler. (You can still use wavesurfer without, e.g. with `<script>` tags) The code was also updated to ES6/ES7 syntax and is transpiled with babel and webpack. Read below how to update your code.\r\n\r\n## Upgrading to version 2\r\n\r\nThe API has mostly stayed the same but there are some changes to consider:\r\n\r\n1. **MultiCanvas renderer is now the default:** It provides all functionality of the Canvas renderer. – Most likely you can simply remove the renderer option – The Canvas renderer has been removed. (The `renderer` option still exists but wavesurfer expects it to be a renderer object, not merely a string.)\r\n\r\n2. **Constructor functions instead of object constructors**\r\n\r\n```javascript\r\n// Old:\r\nvar wavesurfer = Object.create(WaveSurfer);\r\nWavesurfer.init(options);\r\n\r\n// New:\r\nvar wavesurfer = WaveSurfer.create(options);\r\n// ... or\r\nvar wavesurfer = new WaveSurfer(options);\r\nwavesurfer.init();\r\n```\r\n\r\n3. **New plugin API:** Previously all plugins had their own initialisation API. The new API replaces all these different ways to do the same thing with one plugin API built into the core library. Plugins are now added as a property of the wavesurfer configuration object during creation. You don't need to initialise the plugins yourself anymore. Below is an example of initialising wavesurfer with plugins (Note the different ways to import the library at the top):\r\n\r\n```javascript\r\n// EITHER - accessing modules with <script> tags\r\nvar WaveSurfer = window.WaveSurfer;\r\nvar TimelinePlugin = window.WaveSurfer.timeline;\r\nvar MinimapPlugin = window.WaveSurfer.minimap;\r\n\r\n// OR - importing as es6 module\r\nimport WaveSurfer from 'wavesurfer.js';\r\nimport TimelinePlugin from 'wavesurfer.js/dist/plugin/wavesurfer.timeline.min.js';\r\nimport MinimapPlugin from 'wavesurfer.js/dist/plugin/wavesurfer.minimap.min.js';\r\n\r\n// OR - importing as require.js/commonjs modules\r\nvar WaveSurfer = require('wavesurfer.js');\r\nvar TimelinePlugin = require('wavesurfer.js/dist/plugin/wavesurfer.timeline.min.js');\r\nvar MinimapPlugin = require('wavesurfer.js/dist/plugin/wavesurfer.minimap.min.js');\r\n\r\n// ... initialising waveform with plugins\r\nvar wavesurfer = WaveSurfer.create({\r\n    container: '#waveform',\r\n    waveColor: 'violet',\r\n    plugins: [\r\n        TimelinePlugin.create({\r\n            container: '#wave-timeline'\r\n        }),\r\n        MinimapPlugin.create()\r\n    ]\r\n});\r\n```\r\n\r\n**Note:** Read more about the plugin API in the documentation.\r\n\r\n## Using with a module bundler\r\n\r\nWavesurfer can be used with a module system like this:\r\n```javascript\r\n// import\r\nimport WaveSurfer from 'wavesurfer.js';\r\n\r\n// commonjs/requirejs\r\nvar WaveSurfer = require('wavesurfer.js');\r\n\r\n// amd\r\ndefine(['WaveSurfer'], function(WaveSurfer) {\r\n  // ... code\r\n});\r\n\r\n```\r\n\r\n## Related projects\r\n\r\nFor a list of  projects using wavesurfer.js, check out\r\n[the projects page](https://wavesurfer-js.org/projects/).\r\n\r\n## Development\r\n\r\n[![npm version](https://img.shields.io/npm/v/wavesurfer.js.svg?style=flat)](https://www.npmjs.com/package/wavesurfer.js)\r\n[![npm](https://img.shields.io/npm/dm/wavesurfer.js.svg)]()\r\n[![Build Status](https://travis-ci.org/katspaugh/wavesurfer.js.svg?branch=master)](https://travis-ci.org/katspaugh/wavesurfer.js)\r\n[![Coverage Status](https://coveralls.io/repos/github/katspaugh/wavesurfer.js/badge.svg)](https://coveralls.io/github/katspaugh/wavesurfer.js)\r\n\r\nInstall development dependencies:\r\n\r\n```\r\nnpm install\r\n```\r\nDevelopment tasks automatically rebuild certain parts of the library when files are changed (`start` – wavesurfer, `start:plugins` – plugins). Start a dev task and go to `localhost:8080/example/` to test the current build.\r\n\r\nStart development server for core library:\r\n\r\n```\r\nnpm run start\r\n```\r\n\r\nStart development server for plugins:\r\n\r\n```\r\nnpm run start:plugins\r\n```\r\n\r\nBuild all the files. (generated files are placed in the `dist` directory.)\r\n\r\n```\r\nnpm run build\r\n```\r\n\r\nRunning tests only:\r\n\r\n```\r\nnpm run test\r\n```\r\n\r\nBuild documentation with esdoc (generated files are placed in the `doc` directory.)\r\n```\r\nnpm run doc\r\n```\r\n\r\n## Editing documentation\r\nThe homepage and documentation files are maintained in the [`gh-pages` branch](https://github.com/katspaugh/wavesurfer.js/tree/gh-pages). Contributions to the documentation are especially welcome.\r\n\r\n## Credits\r\n\r\nInitial idea by [Alex Khokhulin](https://github.com/xoxulin). Many\r\nthanks to\r\n[the awesome contributors](https://github.com/katspaugh/wavesurfer.js/contributors)!\r\n\r\n## License\r\n\r\n[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\r\n\r\nThis work is licensed under a\r\n[BSD 3-Clause License](https://opensource.org/licenses/BSD-3-Clause).\r\n",
    "longname": "C:\\Git Projects\\wavesurfer.js\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"wavesurfer.js\",\r\n  \"version\": \"2.0.6\",\r\n  \"description\": \"Interactive navigable audio visualization using Web Audio and Canvas\",\r\n  \"main\": \"dist/wavesurfer.min.js\",\r\n  \"directories\": {\r\n    \"example\": \"example\"\r\n  },\r\n  \"scripts\": {\r\n    \"start\": \"npm run build:plugins && npm run build:htmlinit && webpack-dev-server --config ./build-config/webpack.dev.main.js\",\r\n    \"start:htmlinit\": \"npm run build:main && npm run build:plugins && webpack-dev-server --config ./build-config/webpack.dev.htmlinit.js\",\r\n    \"start:plugins\": \"npm run build:main && npm run build:htmlinit && webpack-dev-server --config ./build-config/webpack.dev.plugins.js\",\r\n    \"build\": \"npm run build:normal && npm run build:minified\",\r\n    \"build:main\": \"webpack --config ./build-config/webpack.prod.main.js\",\r\n    \"build:main:min\": \"webpack --config ./build-config/webpack.prod.main.min.js\",\r\n    \"build:plugins\": \"webpack --config ./build-config/webpack.prod.plugins.js\",\r\n    \"build:plugins:min\": \"webpack --config ./build-config/webpack.prod.plugins.min.js\",\r\n    \"build:htmlinit\": \"webpack --config ./build-config/webpack.prod.htmlinit.js\",\r\n    \"build:htmlinit:min\": \"webpack --config ./build-config/webpack.prod.htmlinit.min.js\",\r\n    \"build:normal\": \"npm run build:main && npm run build:plugins && npm run build:htmlinit\",\r\n    \"build:minified\": \"npm run build:main:min && npm run build:plugins:min && npm run build:htmlinit:min\",\r\n    \"format\": \"prettier 'src/**/*.js*' 'example/**/*.js*' 'spec/**/*.js*' 'website/**/*.js*' 'build-config/**/*.js' karma.conf.js --write\",\r\n    \"lint\": \"npm run lint:js && npm run lint:html\",\r\n    \"lint:js\": \"eslint src example spec\",\r\n    \"lint:html\": \"htmlhint example\",\r\n    \"lint-and-format-staged\": \"lint-staged\",\r\n    \"doc\": \"esdoc\",\r\n    \"test\": \"karma start karma.conf.js\",\r\n    \"prepublishOnly\": \"not-in-install && npm run build || in-install\"\r\n  },\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git://github.com/katspaugh/wavesurfer.js.git\"\r\n  },\r\n  \"author\": \"\",\r\n  \"license\": \"BSD-3-Clause\",\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/katspaugh/wavesurfer.js/issues\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"babel-core\": \"^6.26.3\",\r\n    \"babel-eslint\": \"^8.2.6\",\r\n    \"babel-loader\": \"^7.1.5\",\r\n    \"babel-plugin-add-module-exports\": \"^0.2.1\",\r\n    \"babel-plugin-istanbul\": \"^4.1.6\",\r\n    \"babel-plugin-transform-class-properties\": \"^6.24.1\",\r\n    \"babel-preset-env\": \"^1.7.0\",\r\n    \"babel-register\": \"^6.26.0\",\r\n    \"debounce\": \"^1.2.0\",\r\n    \"esdoc\": \"^1.1.0\",\r\n    \"esdoc-accessor-plugin\": \"^1.0.0\",\r\n    \"esdoc-brand-plugin\": \"^1.0.1\",\r\n    \"esdoc-coverage-plugin\": \"^1.1.0\",\r\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\r\n    \"esdoc-integrate-test-plugin\": \"^1.0.0\",\r\n    \"esdoc-standard-plugin\": \"^1.0.0\",\r\n    \"eslint\": \"^5.4.0\",\r\n    \"eslint-config-prettier\": \"^3.0.1\",\r\n    \"eslint-loader\": \"^2.1.0\",\r\n    \"eslint-plugin-prettier\": \"^2.6.2\",\r\n    \"htmlhint\": \"^0.9.13\",\r\n    \"in-publish\": \"^2.0.0\",\r\n    \"jasmine-core\": \"^3.2.1\",\r\n    \"karma\": \"^3.0.0\",\r\n    \"karma-chrome-launcher\": \"2.2.0\",\r\n    \"karma-coverage\": \"^1.1.2\",\r\n    \"karma-coveralls\": \"^2.0.0\",\r\n    \"karma-firefox-launcher\": \"^1.1.0\",\r\n    \"karma-jasmine\": \"1.1.2\",\r\n    \"karma-jasmine-matchers\": \"3.8.3\",\r\n    \"karma-verbose-reporter\": \"0.0.6\",\r\n    \"karma-webpack\": \"^4.0.0-beta.0\",\r\n    \"lint-staged\": \"^7.2.2\",\r\n    \"load-script\": \"^1.0.0\",\r\n    \"pre-commit\": \"^1.2.2\",\r\n    \"prettier\": \"^1.14.2\",\r\n    \"uglifyjs-webpack-plugin\": \"^1.3.0\",\r\n    \"webpack\": \"^4.16.5\",\r\n    \"webpack-cli\": \"^3.1.0\",\r\n    \"webpack-dev-server\": \"3\",\r\n    \"webpack-merge\": \"^4.1.4\"\r\n  },\r\n  \"homepage\": \"https://github.com/katspaugh/wavesurfer.js\",\r\n  \"pre-commit\": \"lint-and-format-staged\",\r\n  \"lint-staged\": {\r\n    \"*.js\": [\r\n      \"prettier\",\r\n      \"eslint\"\r\n    ],\r\n    \"*.html\": [\r\n      \"htmlhint\"\r\n    ]\r\n  }\r\n}\r\n",
    "longname": "C:\\Git Projects\\wavesurfer.js\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 708,
    "kind": "testFile",
    "name": "spec/peakcache.spec.js",
    "content": "/* eslint-env jasmine */\r\nimport PeakCache from '../src/peakcache';\r\n\r\ndescribe('PeakCache:', function() {\r\n    var peakcache;\r\n    var test_length = 200;\r\n    var test_length2 = 300;\r\n    var test_start = 50;\r\n    var test_end = 100;\r\n    var test_start2 = 100;\r\n    var test_end2 = 120;\r\n    var test_start3 = 120;\r\n    var test_end3 = 150;\r\n\r\n    var window_size = 20;\r\n\r\n    function __createPeakCache() {\r\n        peakcache = new PeakCache();\r\n    }\r\n\r\n    beforeEach(function(done) {\r\n        __createPeakCache();\r\n        done();\r\n    });\r\n\r\n    /** @test {PeakCache#addRangeToPeakCache} */\r\n    it('empty cache returns full range', function() {\r\n        var newranges = peakcache.addRangeToPeakCache(\r\n            test_length,\r\n            test_start,\r\n            test_end\r\n        );\r\n        expect(newranges.length).toEqual(1);\r\n        expect(newranges[0][0]).toEqual(test_start);\r\n        expect(newranges[0][1]).toEqual(test_end);\r\n    });\r\n\r\n    /** @test {PeakCache#addRangeToPeakCache} */\r\n    it('different length clears cache', function() {\r\n        peakcache.addRangeToPeakCache(test_length, test_start, test_end);\r\n        var newranges = peakcache.addRangeToPeakCache(\r\n            test_length2,\r\n            test_start,\r\n            test_end\r\n        );\r\n        expect(newranges.length).toEqual(1);\r\n        expect(newranges[0][0]).toEqual(test_start);\r\n        expect(newranges[0][1]).toEqual(test_end);\r\n    });\r\n\r\n    /** @test {PeakCache#addRangeToPeakCache} */\r\n    it('consecutive calls return no ranges', function() {\r\n        peakcache.addRangeToPeakCache(test_length, test_start, test_end);\r\n        var newranges = peakcache.addRangeToPeakCache(\r\n            test_length,\r\n            test_start,\r\n            test_end\r\n        );\r\n        expect(newranges.length).toEqual(0);\r\n    });\r\n\r\n    /** @test {PeakCache#addRangeToPeakCache} */\r\n    it('sliding window returns window sized range', function() {\r\n        var newranges = peakcache.addRangeToPeakCache(\r\n            test_length,\r\n            test_start,\r\n            test_end\r\n        );\r\n        expect(newranges.length).toEqual(1);\r\n        expect(newranges[0][0]).toEqual(test_start);\r\n        expect(newranges[0][1]).toEqual(test_end);\r\n        newranges = peakcache.addRangeToPeakCache(\r\n            test_length,\r\n            test_start + window_size,\r\n            test_end + window_size\r\n        );\r\n        expect(newranges.length).toEqual(1);\r\n        expect(newranges[0][0]).toEqual(test_end);\r\n        expect(newranges[0][1]).toEqual(test_end + window_size);\r\n        newranges = peakcache.addRangeToPeakCache(\r\n            test_length,\r\n            test_start + window_size * 2,\r\n            test_end + window_size * 2\r\n        );\r\n        expect(newranges.length).toEqual(1);\r\n        expect(newranges[0][0]).toEqual(test_end + window_size);\r\n        expect(newranges[0][1]).toEqual(test_end + window_size * 2);\r\n    });\r\n\r\n    /** @test {PeakCache#addRangeToPeakCache} */\r\n    /** @test {PeakCache#getCacheRanges} */\r\n    it('disjoint set creates two ranges', function() {\r\n        peakcache.addRangeToPeakCache(test_length, test_start, test_end);\r\n        peakcache.addRangeToPeakCache(test_length, test_start3, test_end3);\r\n        var ranges = peakcache.getCacheRanges();\r\n        expect(ranges.length).toEqual(2);\r\n        expect(ranges[0][0]).toEqual(test_start);\r\n        expect(ranges[0][1]).toEqual(test_end);\r\n        expect(ranges[1][0]).toEqual(test_start3);\r\n        expect(ranges[1][1]).toEqual(test_end3);\r\n    });\r\n\r\n    /** @test {PeakCache#addRangeToPeakCache} */\r\n    /** @test {PeakCache#getCacheRanges} */\r\n    it('filling in disjoint sets coalesces', function() {\r\n        peakcache.addRangeToPeakCache(test_length, test_start, test_end);\r\n        peakcache.addRangeToPeakCache(test_length, test_start3, test_end3);\r\n        var newranges = peakcache.addRangeToPeakCache(\r\n            test_length,\r\n            test_start,\r\n            test_end3\r\n        );\r\n        expect(newranges.length).toEqual(1);\r\n        expect(newranges[0][0]).toEqual(test_end);\r\n        expect(newranges[0][1]).toEqual(test_start3);\r\n        var ranges = peakcache.getCacheRanges();\r\n        expect(ranges.length).toEqual(1);\r\n        expect(ranges[0][0]).toEqual(test_start);\r\n        expect(ranges[0][1]).toEqual(test_end3);\r\n    });\r\n\r\n    /** @test {PeakCache#addRangeToPeakCache} */\r\n    /** @test {PeakCache#getCacheRanges} */\r\n    it('filling in disjoint sets coalesces / edge cases', function() {\r\n        peakcache.addRangeToPeakCache(test_length, test_start, test_end);\r\n        peakcache.addRangeToPeakCache(test_length, test_start3, test_end3);\r\n        var newranges = peakcache.addRangeToPeakCache(\r\n            test_length,\r\n            test_start2,\r\n            test_end2\r\n        );\r\n        expect(newranges.length).toEqual(1);\r\n        expect(newranges[0][0]).toEqual(test_end);\r\n        expect(newranges[0][1]).toEqual(test_start3);\r\n        var ranges = peakcache.getCacheRanges();\r\n        expect(ranges.length).toEqual(1);\r\n        expect(ranges[0][0]).toEqual(test_start);\r\n        expect(ranges[0][1]).toEqual(test_end3);\r\n    });\r\n});\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/spec/peakcache.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 709,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "spec/peakcache.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "spec/peakcache.spec.js~describe0",
    "access": null,
    "description": "PeakCache:",
    "lineNumber": 4
  },
  {
    "__docId__": 710,
    "kind": "test",
    "name": "it1",
    "testId": 1,
    "memberof": "spec/peakcache.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/peakcache.spec.js~describe0.it1",
    "access": null,
    "description": "empty cache returns full range",
    "lineNumber": 27,
    "testTargets": [
      "PeakCache#addRangeToPeakCache"
    ]
  },
  {
    "__docId__": 711,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "spec/peakcache.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/peakcache.spec.js~describe0.it2",
    "access": null,
    "description": "different length clears cache",
    "lineNumber": 39,
    "testTargets": [
      "PeakCache#addRangeToPeakCache"
    ]
  },
  {
    "__docId__": 712,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "spec/peakcache.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/peakcache.spec.js~describe0.it3",
    "access": null,
    "description": "consecutive calls return no ranges",
    "lineNumber": 52,
    "testTargets": [
      "PeakCache#addRangeToPeakCache"
    ]
  },
  {
    "__docId__": 713,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "spec/peakcache.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/peakcache.spec.js~describe0.it4",
    "access": null,
    "description": "sliding window returns window sized range",
    "lineNumber": 63,
    "testTargets": [
      "PeakCache#addRangeToPeakCache"
    ]
  },
  {
    "__docId__": 714,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "spec/peakcache.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/peakcache.spec.js~describe0.it5",
    "access": null,
    "description": "disjoint set creates two ranges",
    "lineNumber": 92,
    "testTargets": [
      "PeakCache#getCacheRanges"
    ]
  },
  {
    "__docId__": 715,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "spec/peakcache.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/peakcache.spec.js~describe0.it6",
    "access": null,
    "description": "filling in disjoint sets coalesces",
    "lineNumber": 105,
    "testTargets": [
      "PeakCache#getCacheRanges"
    ]
  },
  {
    "__docId__": 716,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "spec/peakcache.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/peakcache.spec.js~describe0.it7",
    "access": null,
    "description": "filling in disjoint sets coalesces / edge cases",
    "lineNumber": 124,
    "testTargets": [
      "PeakCache#getCacheRanges"
    ]
  },
  {
    "__docId__": 717,
    "kind": "testFile",
    "name": "spec/plugin-api.spec.js",
    "content": "/* eslint-env jasmine */\r\nimport WaveSurfer from '../src/wavesurfer.js';\r\n\r\nimport TestHelpers from './test-helpers.js';\r\n\r\n/** @test {WaveSurfer} */\r\ndescribe('WaveSurfer/plugin API:', () => {\r\n    jasmine.DEFAULT_TIMEOUT_INTERVAL = 10000;\r\n\r\n    let waveformDiv;\r\n    let dummyPlugin;\r\n    let wavesurfer;\r\n\r\n    // clean up after each test\r\n    afterEach(done => {\r\n        if (wavesurfer !== undefined) {\r\n            wavesurfer.destroy();\r\n            waveformDiv.parentNode.removeChild(waveformDiv);\r\n        }\r\n        done();\r\n    });\r\n\r\n    // utility function to generate a mock plugin object\r\n    function mockPlugin(name, deferInit = false) {\r\n        class MockPlugin {\r\n            constructor(params, ws) {\r\n                this.ws = ws;\r\n                // using the instance factory unfortunately makes it\r\n                // difficult to use the spyOn function, so we use this\r\n                // instead\r\n                this.isInitialised = false;\r\n            }\r\n            init() {\r\n                this.isInitialised = true;\r\n            }\r\n            destroy() {}\r\n        }\r\n        return {\r\n            name,\r\n            deferInit,\r\n            staticProps: {\r\n                [`${name}Static`]: 'static property value'\r\n            },\r\n            instance: MockPlugin\r\n        };\r\n    }\r\n\r\n    // utility function to generate wavesurfer instances for testing\r\n    function __createWaveform(options = {}) {\r\n        waveformDiv = document.createElement('div');\r\n        document.getElementsByTagName('body')[0].appendChild(waveformDiv);\r\n\r\n        wavesurfer = WaveSurfer.create(\r\n            Object.assign(\r\n                {\r\n                    container: waveformDiv\r\n                },\r\n                options\r\n            )\r\n        );\r\n        wavesurfer.load(TestHelpers.EXAMPLE_FILE_PATH);\r\n    }\r\n\r\n    // plugin methods\r\n    /** @test {WaveSurfer#addPlugin} */\r\n    it('addPlugin adds staticProps and correctly builds and instantiates plugin class', () => {\r\n        dummyPlugin = mockPlugin('dummy');\r\n        __createWaveform();\r\n        wavesurfer.addPlugin(dummyPlugin);\r\n\r\n        expect(wavesurfer.dummyStatic).toEqual(\r\n            dummyPlugin.staticProps.dummyStatic\r\n        );\r\n        expect(wavesurfer.dummy.ws).toEqual(wavesurfer);\r\n        expect(typeof Object.getPrototypeOf(wavesurfer.dummy).on).toEqual(\r\n            'function'\r\n        );\r\n\r\n        dummyPlugin = {};\r\n        expect(function() {\r\n            wavesurfer.addPlugin(dummyPlugin);\r\n        }).toThrow(new Error('Plugin does not have a name!'));\r\n\r\n        dummyPlugin.name = 'foo';\r\n        expect(function() {\r\n            wavesurfer.addPlugin(dummyPlugin);\r\n        }).toThrow(new Error('Plugin foo does not have an instance property!'));\r\n    });\r\n\r\n    /** @test {WaveSurfer#initPlugin} */\r\n    it('initPlugin calls init function of the plugin and adds its name to the initialisedPluginList', () => {\r\n        dummyPlugin = mockPlugin('dummy');\r\n        __createWaveform();\r\n        wavesurfer.addPlugin(dummyPlugin);\r\n        spyOn(wavesurfer.dummy, 'init');\r\n        wavesurfer.initPlugin('dummy');\r\n\r\n        expect(wavesurfer.dummy.init).toHaveBeenCalled();\r\n        expect(wavesurfer.initialisedPluginList.dummy).toBeTrue();\r\n\r\n        expect(function() {\r\n            wavesurfer.initPlugin('foo');\r\n        }).toThrow(new Error('Plugin foo has not been added yet!'));\r\n    });\r\n\r\n    /** @test {WaveSurfer#destroyPlugin} */\r\n    it('destroyPlugin calls plugin destroy function and removes the plugin name from the initialisedPluginList', () => {\r\n        dummyPlugin = mockPlugin('dummy');\r\n        __createWaveform();\r\n        wavesurfer.addPlugin(dummyPlugin);\r\n        wavesurfer.initPlugin('dummy');\r\n        spyOn(wavesurfer.dummy, 'destroy');\r\n        wavesurfer.destroyPlugin('dummy');\r\n\r\n        expect(wavesurfer.dummy.destroy).toHaveBeenCalled();\r\n        expect(wavesurfer.initialisedPluginList.dummy).toBeUndefined();\r\n\r\n        expect(function() {\r\n            wavesurfer.destroyPlugin('foo');\r\n        }).toThrow(\r\n            new Error(\r\n                'Plugin foo has not been added yet and cannot be destroyed!'\r\n            )\r\n        );\r\n    });\r\n\r\n    // auto-adding and initialising of plugins (registerPlugins)\r\n    /** @test {WaveSurfer#registerPlugins} */\r\n    it('registerPlugin adds a plugin but does not call plugin init function if the plugin property deferInit is truethy', () => {\r\n        dummyPlugin = mockPlugin('dummy', true);\r\n        __createWaveform({\r\n            plugins: [dummyPlugin]\r\n        });\r\n        expect(wavesurfer.dummyStatic).toEqual(\r\n            dummyPlugin.staticProps.dummyStatic\r\n        );\r\n        expect(wavesurfer.dummy.ws).toEqual(wavesurfer);\r\n        expect(wavesurfer.dummy.isInitialised).toBeFalse();\r\n    });\r\n\r\n    /** @test {WaveSurfer#registerPlugins} */\r\n    it('registerPlugin adds a plugin ands calls plugin init function if the plugin property deferInit is falsey', () => {\r\n        dummyPlugin = mockPlugin('dummy');\r\n        __createWaveform({\r\n            plugins: [dummyPlugin]\r\n        });\r\n        expect(wavesurfer.dummyStatic).toEqual(\r\n            dummyPlugin.staticProps.dummyStatic\r\n        );\r\n        expect(wavesurfer.dummy.ws).toEqual(wavesurfer);\r\n        expect(wavesurfer.dummy.isInitialised).toBeTrue();\r\n    });\r\n});\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/spec/plugin-api.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 718,
    "kind": "test",
    "name": "describe8",
    "testId": 8,
    "memberof": "spec/plugin-api.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "spec/plugin-api.spec.js~describe8",
    "access": null,
    "description": "WaveSurfer/plugin API:",
    "lineNumber": 7,
    "testTargets": [
      "WaveSurfer"
    ]
  },
  {
    "__docId__": 719,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "spec/plugin-api.spec.js~describe8",
    "testDepth": 1,
    "static": true,
    "longname": "spec/plugin-api.spec.js~describe8.it9",
    "access": null,
    "description": "addPlugin adds staticProps and correctly builds and instantiates plugin class",
    "lineNumber": 66,
    "testTargets": [
      "WaveSurfer#addPlugin"
    ]
  },
  {
    "__docId__": 720,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "spec/plugin-api.spec.js~describe8",
    "testDepth": 1,
    "static": true,
    "longname": "spec/plugin-api.spec.js~describe8.it10",
    "access": null,
    "description": "initPlugin calls init function of the plugin and adds its name to the initialisedPluginList",
    "lineNumber": 91,
    "testTargets": [
      "WaveSurfer#initPlugin"
    ]
  },
  {
    "__docId__": 721,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "spec/plugin-api.spec.js~describe8",
    "testDepth": 1,
    "static": true,
    "longname": "spec/plugin-api.spec.js~describe8.it11",
    "access": null,
    "description": "destroyPlugin calls plugin destroy function and removes the plugin name from the initialisedPluginList",
    "lineNumber": 107,
    "testTargets": [
      "WaveSurfer#destroyPlugin"
    ]
  },
  {
    "__docId__": 722,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "spec/plugin-api.spec.js~describe8",
    "testDepth": 1,
    "static": true,
    "longname": "spec/plugin-api.spec.js~describe8.it12",
    "access": null,
    "description": "registerPlugin adds a plugin but does not call plugin init function if the plugin property deferInit is truethy",
    "lineNumber": 129,
    "testTargets": [
      "WaveSurfer#registerPlugins"
    ]
  },
  {
    "__docId__": 723,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "spec/plugin-api.spec.js~describe8",
    "testDepth": 1,
    "static": true,
    "longname": "spec/plugin-api.spec.js~describe8.it13",
    "access": null,
    "description": "registerPlugin adds a plugin ands calls plugin init function if the plugin property deferInit is falsey",
    "lineNumber": 142,
    "testTargets": [
      "WaveSurfer#registerPlugins"
    ]
  },
  {
    "__docId__": 724,
    "kind": "testFile",
    "name": "spec/util.spec.js",
    "content": "/* eslint-env jasmine */\r\n\r\nimport WaveSurfer from '../src/wavesurfer.js';\r\n\r\nimport TestHelpers from './test-helpers.js';\r\n\r\n/** @test {util.ajax} */\r\ndescribe('util.ajax:', function() {\r\n    var defaultUrl = TestHelpers.EXAMPLE_FILE_PATH;\r\n\r\n    it('can load an arraybuffer', function(done) {\r\n        var options = {\r\n            url: defaultUrl,\r\n            responseType: 'arraybuffer'\r\n        };\r\n        var instance = WaveSurfer.util.ajax(options);\r\n        instance.on('success', (data, e) => {\r\n            // url\r\n            expect(e.target.responseURL).toContain(options.url);\r\n\r\n            // responseType\r\n            expect(instance.xhr.responseType).toBe(options.responseType);\r\n\r\n            // returned data is an arraybuffer\r\n            expect(data).toEqual(jasmine.any(ArrayBuffer));\r\n\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('fires the error event when the file is not found', function(done) {\r\n        var options = {\r\n            url: '/foo/bar'\r\n        };\r\n        var instance = WaveSurfer.util.ajax(options);\r\n        instance.on('error', e => {\r\n            // url\r\n            expect(e.target.responseURL).toContain(options.url);\r\n\r\n            // error message\r\n            expect(e.target.statusText).toBe('Not Found');\r\n            expect(e.target.status).toBe(404);\r\n\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('fires the progress event during loading', function(done) {\r\n        var options = {\r\n            url: defaultUrl,\r\n            responseType: 'arraybuffer'\r\n        };\r\n        var instance = WaveSurfer.util.ajax(options);\r\n        instance.on('progress', e => {\r\n            // url\r\n            expect(e.target.responseURL).toContain(options.url);\r\n\r\n            // progress message\r\n            expect(e.target.statusText).toBe('OK');\r\n            expect(e.target.status).toBe(200);\r\n\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('accepts custom request headers and credentials', function(done) {\r\n        var options = {\r\n            url: defaultUrl,\r\n            responseType: 'arraybuffer',\r\n            xhr: {\r\n                withCredentials: true,\r\n                requestHeaders: [\r\n                    {\r\n                        key: 'Authorization',\r\n                        value: 'my-token'\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n        var instance = WaveSurfer.util.ajax(options);\r\n        instance.on('success', (data, e) => {\r\n            // with credentials\r\n            expect(e.target.withCredentials).toBeTrue();\r\n\r\n            // XXX: find a way to retrieve request headers\r\n            done();\r\n        });\r\n    });\r\n});\r\n\r\n/** @test {util} */\r\ndescribe('util:', function() {\r\n    /** @test {extend} */\r\n    it('extend extends an object shallowly with others', function() {\r\n        var obj = {\r\n            style: {}\r\n        };\r\n        var sources = {\r\n            prop1: 'red',\r\n            prop2: 123\r\n        };\r\n        var result = {\r\n            style: {},\r\n            prop1: 'red',\r\n            prop2: 123\r\n        };\r\n        expect(WaveSurfer.util.extend(obj, sources)).toEqual(result);\r\n    });\r\n\r\n    /** @test {getId} */\r\n    it('getId returns a random string', function() {\r\n        expect(WaveSurfer.util.getId()).toStartWith('wavesurfer_');\r\n    });\r\n\r\n    /** @test {min} */\r\n    it('min returns the smallest number in the provided array', function() {\r\n        expect(WaveSurfer.util.min([0, 1, 1.1, 100, -1])).toEqual(-1);\r\n    });\r\n\r\n    /** @test {min} */\r\n    it('min returns +Infinity for an empty array', function() {\r\n        expect(WaveSurfer.util.min([])).toEqual(+Infinity);\r\n    });\r\n\r\n    /** @test {max} */\r\n    it('max returns the largest number in the provided array', function() {\r\n        expect(WaveSurfer.util.max([0, 1, 1.1, 100, -1])).toEqual(100);\r\n    });\r\n\r\n    /** @test {max} */\r\n    it('max returns -Infinity for an empty array', function() {\r\n        expect(WaveSurfer.util.max([])).toEqual(-Infinity);\r\n    });\r\n\r\n    /** @test {style} */\r\n    it('style applies a map of styles to an element', function() {\r\n        var el = {\r\n            style: {}\r\n        };\r\n        var styles = {\r\n            backgroundcolor: 'red',\r\n            'background-color': 'blue'\r\n        };\r\n        var result = {\r\n            style: styles\r\n        };\r\n        expect(WaveSurfer.util.style(el, styles)).toEqual(result);\r\n    });\r\n});\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/spec/util.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 725,
    "kind": "test",
    "name": "describe14",
    "testId": 14,
    "memberof": "spec/util.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "spec/util.spec.js~describe14",
    "access": null,
    "description": "util.ajax:",
    "lineNumber": 8,
    "testTargets": [
      "util.ajax"
    ]
  },
  {
    "__docId__": 726,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "spec/util.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "spec/util.spec.js~describe14.it15",
    "access": null,
    "description": "can load an arraybuffer",
    "lineNumber": 11
  },
  {
    "__docId__": 727,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "spec/util.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "spec/util.spec.js~describe14.it16",
    "access": null,
    "description": "fires the error event when the file is not found",
    "lineNumber": 31
  },
  {
    "__docId__": 728,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "spec/util.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "spec/util.spec.js~describe14.it17",
    "access": null,
    "description": "fires the progress event during loading",
    "lineNumber": 48
  },
  {
    "__docId__": 729,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "spec/util.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "spec/util.spec.js~describe14.it18",
    "access": null,
    "description": "accepts custom request headers and credentials",
    "lineNumber": 66
  },
  {
    "__docId__": 730,
    "kind": "test",
    "name": "describe19",
    "testId": 19,
    "memberof": "spec/util.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "spec/util.spec.js~describe19",
    "access": null,
    "description": "util:",
    "lineNumber": 92,
    "testTargets": [
      "util"
    ]
  },
  {
    "__docId__": 731,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "spec/util.spec.js~describe19",
    "testDepth": 1,
    "static": true,
    "longname": "spec/util.spec.js~describe19.it20",
    "access": null,
    "description": "extend extends an object shallowly with others",
    "lineNumber": 94,
    "testTargets": [
      "extend"
    ]
  },
  {
    "__docId__": 732,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "spec/util.spec.js~describe19",
    "testDepth": 1,
    "static": true,
    "longname": "spec/util.spec.js~describe19.it21",
    "access": null,
    "description": "getId returns a random string",
    "lineNumber": 111,
    "testTargets": [
      "getId"
    ]
  },
  {
    "__docId__": 733,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "spec/util.spec.js~describe19",
    "testDepth": 1,
    "static": true,
    "longname": "spec/util.spec.js~describe19.it22",
    "access": null,
    "description": "min returns the smallest number in the provided array",
    "lineNumber": 116,
    "testTargets": [
      "min"
    ]
  },
  {
    "__docId__": 734,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "spec/util.spec.js~describe19",
    "testDepth": 1,
    "static": true,
    "longname": "spec/util.spec.js~describe19.it23",
    "access": null,
    "description": "min returns +Infinity for an empty array",
    "lineNumber": 121,
    "testTargets": [
      "min"
    ]
  },
  {
    "__docId__": 735,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "spec/util.spec.js~describe19",
    "testDepth": 1,
    "static": true,
    "longname": "spec/util.spec.js~describe19.it24",
    "access": null,
    "description": "max returns the largest number in the provided array",
    "lineNumber": 126,
    "testTargets": [
      "max"
    ]
  },
  {
    "__docId__": 736,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "spec/util.spec.js~describe19",
    "testDepth": 1,
    "static": true,
    "longname": "spec/util.spec.js~describe19.it25",
    "access": null,
    "description": "max returns -Infinity for an empty array",
    "lineNumber": 131,
    "testTargets": [
      "max"
    ]
  },
  {
    "__docId__": 737,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "spec/util.spec.js~describe19",
    "testDepth": 1,
    "static": true,
    "longname": "spec/util.spec.js~describe19.it26",
    "access": null,
    "description": "style applies a map of styles to an element",
    "lineNumber": 136,
    "testTargets": [
      "style"
    ]
  },
  {
    "__docId__": 738,
    "kind": "testFile",
    "name": "spec/wavesurfer.spec.js",
    "content": "/* eslint-env jasmine */\r\n\r\nimport TestHelpers from './test-helpers.js';\r\nimport WaveSurfer from '../src/wavesurfer.js';\r\n\r\n/** @test {WaveSurfer} */\r\ndescribe('WaveSurfer/playback:', function() {\r\n    var wavesurfer;\r\n    var element;\r\n    var manualDestroy = false;\r\n\r\n    jasmine.DEFAULT_TIMEOUT_INTERVAL = 10000;\r\n\r\n    beforeEach(function(done) {\r\n        var wave = TestHelpers.createWaveform();\r\n        wavesurfer = wave[0];\r\n        element = wave[1];\r\n        wavesurfer.load(TestHelpers.EXAMPLE_FILE_PATH);\r\n\r\n        wavesurfer.on('ready', done);\r\n    });\r\n\r\n    afterEach(function() {\r\n        if (!manualDestroy) {\r\n            wavesurfer.destroy();\r\n            TestHelpers.removeElement(element);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * @test {WaveSurfer#isReady}\r\n     */\r\n    it('should be ready', function() {\r\n        wavesurfer.play();\r\n        expect(wavesurfer.isReady).toBeFalse();\r\n    });\r\n\r\n    /**\r\n     * @test {WaveSurfer#VERSION}\r\n     */\r\n    it('should have version number', function() {\r\n        let version = require('../package.json').version;\r\n        expect(WaveSurfer.VERSION).toEqual(version);\r\n    });\r\n\r\n    /**\r\n     * @test {WaveSurfer#play}\r\n     * @test {WaveSurfer#isPlaying}\r\n     */\r\n    it('should play', function() {\r\n        wavesurfer.play();\r\n\r\n        expect(wavesurfer.isPlaying()).toBeTrue();\r\n    });\r\n\r\n    /**\r\n     * @test {WaveSurfer#play}\r\n     * @test {WaveSurfer#isPlaying}\r\n     * @test {WaveSurfer#pause}\r\n     */\r\n    it('should pause', function() {\r\n        wavesurfer.play();\r\n        expect(wavesurfer.isPlaying()).toBeTrue();\r\n\r\n        wavesurfer.pause();\r\n        expect(wavesurfer.isPlaying()).toBeFalse();\r\n    });\r\n\r\n    /**\r\n     * @test {WaveSurfer#playPause}\r\n     * @test {WaveSurfer#isPlaying}\r\n     */\r\n    it('should play or pause', function() {\r\n        wavesurfer.playPause();\r\n        expect(wavesurfer.isPlaying()).toBeTrue();\r\n\r\n        wavesurfer.playPause();\r\n        expect(wavesurfer.isPlaying()).toBeFalse();\r\n    });\r\n\r\n    /** @test {WaveSurfer#getDuration}  */\r\n    it('should get duration', function() {\r\n        let duration = parseInt(wavesurfer.getDuration(), 10);\r\n        expect(duration).toEqual(TestHelpers.EXAMPLE_FILE_DURATION);\r\n    });\r\n\r\n    /** @test {WaveSurfer#getCurrentTime}  */\r\n    it('should get currentTime', function() {\r\n        // initally zero\r\n        let time = wavesurfer.getCurrentTime();\r\n        expect(time).toEqual(0);\r\n\r\n        // seek to 50%\r\n        wavesurfer.seekTo(0.5);\r\n        time = parseInt(wavesurfer.getCurrentTime(), 10);\r\n        expect(time).toEqual(10);\r\n    });\r\n\r\n    /** @test {WaveSurfer#setCurrentTime}  */\r\n    it('should set currentTime', function() {\r\n        // initally zero\r\n        let time = wavesurfer.getCurrentTime();\r\n        expect(time).toEqual(0);\r\n\r\n        // set to 10 seconds\r\n        wavesurfer.setCurrentTime(10);\r\n        time = wavesurfer.getCurrentTime();\r\n        expect(time).toEqual(10);\r\n\r\n        // set to something higher than duration\r\n        wavesurfer.setCurrentTime(1000);\r\n        time = wavesurfer.getCurrentTime();\r\n        // sets it to end of track\r\n        time = parseInt(wavesurfer.getCurrentTime(), 10);\r\n        expect(time).toEqual(TestHelpers.EXAMPLE_FILE_DURATION);\r\n    });\r\n\r\n    /** @test {WaveSurfer#skipBackward}  */\r\n    it('should skip backward', function() {\r\n        // seek to 50%\r\n        wavesurfer.seekTo(0.5);\r\n\r\n        // skip 4 seconds backward\r\n        wavesurfer.skipBackward(4);\r\n        let time = wavesurfer.getCurrentTime();\r\n        let expectedTime = 6.886938775510204;\r\n        expect(time).toEqual(expectedTime);\r\n\r\n        // skip backward with params.skipLength (default: 2 seconds)\r\n        wavesurfer.skipBackward();\r\n        time = wavesurfer.getCurrentTime();\r\n        expect(time).toEqual(expectedTime - 2);\r\n    });\r\n\r\n    /** @test {WaveSurfer#skipForward}  */\r\n    it('should skip forward', function() {\r\n        // skip 4 seconds forward\r\n        wavesurfer.skipForward(4);\r\n        let time = wavesurfer.getCurrentTime();\r\n        let expectedTime = 3.9999999999999996;\r\n        expect(time).toEqual(expectedTime);\r\n\r\n        // skip forward with params.skipLength (default: 2 seconds)\r\n        wavesurfer.skipForward();\r\n        time = wavesurfer.getCurrentTime();\r\n        expect(time).toEqual(expectedTime + 2);\r\n    });\r\n\r\n    /** @test {WaveSurfer#getPlaybackRate}  */\r\n    it('should get playback rate', function() {\r\n        let rate = wavesurfer.getPlaybackRate();\r\n        expect(rate).toEqual(1);\r\n    });\r\n\r\n    /** @test {WaveSurfer#setPlaybackRate}  */\r\n    it('should set playback rate', function() {\r\n        let rate = 0.5;\r\n        wavesurfer.setPlaybackRate(rate);\r\n\r\n        expect(wavesurfer.getPlaybackRate()).toEqual(rate);\r\n    });\r\n\r\n    /** @test {WaveSurfer#getVolume}  */\r\n    it('should get volume', function() {\r\n        let volume = wavesurfer.getVolume();\r\n        expect(volume).toEqual(1);\r\n    });\r\n\r\n    /** @test {WaveSurfer#setVolume}  */\r\n    it('should set volume', function(done) {\r\n        let targetVolume = 0.5;\r\n\r\n        wavesurfer.once('volume', function(result) {\r\n            expect(result).toEqual(targetVolume);\r\n\r\n            done();\r\n        });\r\n\r\n        wavesurfer.setVolume(targetVolume);\r\n    });\r\n\r\n    /** @test {WaveSurfer#toggleMute}  */\r\n    it('should toggle mute', function() {\r\n        wavesurfer.toggleMute();\r\n        expect(wavesurfer.isMuted).toBeTrue();\r\n\r\n        wavesurfer.toggleMute();\r\n        expect(wavesurfer.isMuted).toBeFalse();\r\n    });\r\n\r\n    /** @test {WaveSurfer#setMute}  */\r\n    it('should set mute', function() {\r\n        wavesurfer.setMute(true);\r\n        expect(wavesurfer.isMuted).toBeTrue();\r\n\r\n        wavesurfer.setMute(false);\r\n        expect(wavesurfer.isMuted).toBeFalse();\r\n    });\r\n\r\n    /** @test {WaveSurfer#getMute}  */\r\n    it('should get mute', function() {\r\n        wavesurfer.setMute(true);\r\n        expect(wavesurfer.getMute()).toBeTrue();\r\n\r\n        wavesurfer.setMute(false);\r\n        expect(wavesurfer.getMute()).toBeFalse();\r\n    });\r\n\r\n    /** @test {WaveSurfer#zoom}  */\r\n    it('should set zoom parameters', function() {\r\n        wavesurfer.zoom(20);\r\n        expect(wavesurfer.params.minPxPerSec).toEqual(20);\r\n        expect(wavesurfer.params.scrollParent).toBe(true);\r\n    });\r\n\r\n    /** @test {WaveSurfer#zoom}  */\r\n    it('should set unzoom parameters', function() {\r\n        wavesurfer.zoom(false);\r\n        expect(wavesurfer.params.minPxPerSec).toEqual(\r\n            wavesurfer.defaultParams.minPxPerSec\r\n        );\r\n        expect(wavesurfer.params.scrollParent).toBe(false);\r\n    });\r\n\r\n    /** @test {WaveSurfer#getWaveColor} */\r\n    it('should allow getting waveColor', function() {\r\n        var waveColor = wavesurfer.getWaveColor();\r\n        expect(waveColor).toEqual('#90F09B');\r\n    });\r\n\r\n    /** @test {WaveSurfer#setWaveColor} */\r\n    it('should allow setting waveColor', function() {\r\n        let color = 'blue';\r\n        wavesurfer.setWaveColor(color);\r\n        var waveColor = wavesurfer.getWaveColor();\r\n\r\n        expect(waveColor).toEqual(color);\r\n    });\r\n\r\n    /** @test {WaveSurfer#getProgressColor} */\r\n    it('should allow getting progressColor', function() {\r\n        var progressColor = wavesurfer.getProgressColor();\r\n        expect(progressColor).toEqual('purple');\r\n    });\r\n\r\n    /** @test {WaveSurfer#setProgressColor} */\r\n    it('should allow setting progressColor', function() {\r\n        wavesurfer.setProgressColor('green');\r\n        var progressColor = wavesurfer.getProgressColor();\r\n\r\n        expect(progressColor).toEqual('green');\r\n    });\r\n\r\n    /** @test {WaveSurfer#getCursorColor} */\r\n    it('should allow getting cursorColor', function() {\r\n        var cursorColor = wavesurfer.getCursorColor();\r\n        expect(cursorColor).toEqual('white');\r\n    });\r\n\r\n    /** @test {WaveSurfer#setCursorColor} */\r\n    it('should allow setting cursorColor', function() {\r\n        wavesurfer.setCursorColor('black');\r\n        var cursorColor = wavesurfer.getCursorColor();\r\n\r\n        expect(cursorColor).toEqual('black');\r\n    });\r\n\r\n    /** @test {WaveSurfer#getHeight} */\r\n    it('should allow getting height', function() {\r\n        var height = wavesurfer.getHeight();\r\n        expect(height).toEqual(128);\r\n    });\r\n\r\n    /** @test {WaveSurfer#setHeight} */\r\n    it('should allow setting height', function() {\r\n        wavesurfer.setHeight(150);\r\n        var height = wavesurfer.getHeight();\r\n\r\n        expect(height).toEqual(150);\r\n    });\r\n\r\n    /** @test {WaveSurfer#exportPCM} */\r\n    it('should return PCM data formatted using JSON.stringify', function() {\r\n        var pcmData = wavesurfer.exportPCM();\r\n        expect(pcmData).toBeNonEmptyString();\r\n    });\r\n\r\n    /** @test {WaveSurfer#getFilters} */\r\n    it('should return the list of current set filters as an array', function() {\r\n        var list = wavesurfer.getFilters();\r\n\r\n        expect(list).toEqual([]);\r\n    });\r\n\r\n    /** @test {WaveSurfer#exportImage} */\r\n    it('should export image data', function() {\r\n        var imgData = wavesurfer.exportImage();\r\n        expect(imgData).toBeNonEmptyString();\r\n    });\r\n\r\n    /** @test {WaveSurfer#destroy} */\r\n    it('should destroy', function(done) {\r\n        manualDestroy = true;\r\n\r\n        wavesurfer.once('destroy', function() {\r\n            TestHelpers.removeElement(element);\r\n            done();\r\n        });\r\n        wavesurfer.destroy();\r\n    });\r\n});\r\n\r\n/** @test {WaveSurfer} */\r\ndescribe('WaveSurfer/errors:', function() {\r\n    var element;\r\n\r\n    beforeEach(function() {\r\n        element = TestHelpers.createElement('test');\r\n    });\r\n\r\n    afterEach(function() {\r\n        TestHelpers.removeElement(element);\r\n    });\r\n\r\n    /**\r\n     * @test {WaveSurfer}\r\n     */\r\n    it('should throw when container element not found', function() {\r\n        expect(function() {\r\n            TestHelpers.createWaveform({\r\n                container: '#foo'\r\n            });\r\n        }).toThrow(new Error('Container element not found'));\r\n    });\r\n\r\n    /**\r\n     * @test {WaveSurfer}\r\n     */\r\n    it('should throw when media container element not found', function() {\r\n        expect(function() {\r\n            TestHelpers.createWaveform({\r\n                container: '#test',\r\n                mediaContainer: '#foo'\r\n            });\r\n        }).toThrow(new Error('Media Container element not found'));\r\n    });\r\n\r\n    /**\r\n     * @test {WaveSurfer}\r\n     */\r\n    it('should throw for invalid maxCanvasWidth param', function() {\r\n        expect(function() {\r\n            TestHelpers.createWaveform({\r\n                container: '#test',\r\n                maxCanvasWidth: 0.5\r\n            });\r\n        }).toThrow(new Error('maxCanvasWidth must be greater than 1'));\r\n\r\n        expect(function() {\r\n            TestHelpers.createWaveform({\r\n                container: '#test',\r\n                maxCanvasWidth: 3\r\n            });\r\n        }).toThrow(new Error('maxCanvasWidth must be an even number'));\r\n    });\r\n\r\n    /**\r\n     * @test {WaveSurfer}\r\n     */\r\n    it('should throw for invalid renderer', function() {\r\n        expect(function() {\r\n            TestHelpers.createWaveform({\r\n                container: '#test',\r\n                renderer: 'foo'\r\n            });\r\n        }).toThrow(new Error('Renderer parameter is invalid'));\r\n    });\r\n});\r\n",
    "static": true,
    "longname": "C:/Git Projects/wavesurfer.js/spec/wavesurfer.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 739,
    "kind": "test",
    "name": "describe27",
    "testId": 27,
    "memberof": "spec/wavesurfer.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27",
    "access": null,
    "description": "WaveSurfer/playback:",
    "lineNumber": 7,
    "testTargets": [
      "WaveSurfer"
    ]
  },
  {
    "__docId__": 740,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it28",
    "access": null,
    "description": "should be ready",
    "lineNumber": 33,
    "testTargets": [
      "WaveSurfer#isReady"
    ]
  },
  {
    "__docId__": 741,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it29",
    "access": null,
    "description": "should have version number",
    "lineNumber": 41,
    "testTargets": [
      "WaveSurfer#VERSION"
    ]
  },
  {
    "__docId__": 742,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it30",
    "access": null,
    "description": "should play",
    "lineNumber": 50,
    "testTargets": [
      "WaveSurfer#play",
      "WaveSurfer#isPlaying"
    ]
  },
  {
    "__docId__": 743,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it31",
    "access": null,
    "description": "should pause",
    "lineNumber": 61,
    "testTargets": [
      "WaveSurfer#play",
      "WaveSurfer#isPlaying",
      "WaveSurfer#pause"
    ]
  },
  {
    "__docId__": 744,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it32",
    "access": null,
    "description": "should play or pause",
    "lineNumber": 73,
    "testTargets": [
      "WaveSurfer#playPause",
      "WaveSurfer#isPlaying"
    ]
  },
  {
    "__docId__": 745,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it33",
    "access": null,
    "description": "should get duration",
    "lineNumber": 82,
    "testTargets": [
      "WaveSurfer#getDuration"
    ]
  },
  {
    "__docId__": 746,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it34",
    "access": null,
    "description": "should get currentTime",
    "lineNumber": 88,
    "testTargets": [
      "WaveSurfer#getCurrentTime"
    ]
  },
  {
    "__docId__": 747,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it35",
    "access": null,
    "description": "should set currentTime",
    "lineNumber": 100,
    "testTargets": [
      "WaveSurfer#setCurrentTime"
    ]
  },
  {
    "__docId__": 748,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it36",
    "access": null,
    "description": "should skip backward",
    "lineNumber": 119,
    "testTargets": [
      "WaveSurfer#skipBackward"
    ]
  },
  {
    "__docId__": 749,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it37",
    "access": null,
    "description": "should skip forward",
    "lineNumber": 136,
    "testTargets": [
      "WaveSurfer#skipForward"
    ]
  },
  {
    "__docId__": 750,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it38",
    "access": null,
    "description": "should get playback rate",
    "lineNumber": 150,
    "testTargets": [
      "WaveSurfer#getPlaybackRate"
    ]
  },
  {
    "__docId__": 751,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it39",
    "access": null,
    "description": "should set playback rate",
    "lineNumber": 156,
    "testTargets": [
      "WaveSurfer#setPlaybackRate"
    ]
  },
  {
    "__docId__": 752,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it40",
    "access": null,
    "description": "should get volume",
    "lineNumber": 164,
    "testTargets": [
      "WaveSurfer#getVolume"
    ]
  },
  {
    "__docId__": 753,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it41",
    "access": null,
    "description": "should set volume",
    "lineNumber": 170,
    "testTargets": [
      "WaveSurfer#setVolume"
    ]
  },
  {
    "__docId__": 754,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it42",
    "access": null,
    "description": "should toggle mute",
    "lineNumber": 183,
    "testTargets": [
      "WaveSurfer#toggleMute"
    ]
  },
  {
    "__docId__": 755,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it43",
    "access": null,
    "description": "should set mute",
    "lineNumber": 192,
    "testTargets": [
      "WaveSurfer#setMute"
    ]
  },
  {
    "__docId__": 756,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it44",
    "access": null,
    "description": "should get mute",
    "lineNumber": 201,
    "testTargets": [
      "WaveSurfer#getMute"
    ]
  },
  {
    "__docId__": 757,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it45",
    "access": null,
    "description": "should set zoom parameters",
    "lineNumber": 210,
    "testTargets": [
      "WaveSurfer#zoom"
    ]
  },
  {
    "__docId__": 758,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it46",
    "access": null,
    "description": "should set unzoom parameters",
    "lineNumber": 217,
    "testTargets": [
      "WaveSurfer#zoom"
    ]
  },
  {
    "__docId__": 759,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it47",
    "access": null,
    "description": "should allow getting waveColor",
    "lineNumber": 226,
    "testTargets": [
      "WaveSurfer#getWaveColor"
    ]
  },
  {
    "__docId__": 760,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it48",
    "access": null,
    "description": "should allow setting waveColor",
    "lineNumber": 232,
    "testTargets": [
      "WaveSurfer#setWaveColor"
    ]
  },
  {
    "__docId__": 761,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it49",
    "access": null,
    "description": "should allow getting progressColor",
    "lineNumber": 241,
    "testTargets": [
      "WaveSurfer#getProgressColor"
    ]
  },
  {
    "__docId__": 762,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it50",
    "access": null,
    "description": "should allow setting progressColor",
    "lineNumber": 247,
    "testTargets": [
      "WaveSurfer#setProgressColor"
    ]
  },
  {
    "__docId__": 763,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it51",
    "access": null,
    "description": "should allow getting cursorColor",
    "lineNumber": 255,
    "testTargets": [
      "WaveSurfer#getCursorColor"
    ]
  },
  {
    "__docId__": 764,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it52",
    "access": null,
    "description": "should allow setting cursorColor",
    "lineNumber": 261,
    "testTargets": [
      "WaveSurfer#setCursorColor"
    ]
  },
  {
    "__docId__": 765,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it53",
    "access": null,
    "description": "should allow getting height",
    "lineNumber": 269,
    "testTargets": [
      "WaveSurfer#getHeight"
    ]
  },
  {
    "__docId__": 766,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it54",
    "access": null,
    "description": "should allow setting height",
    "lineNumber": 275,
    "testTargets": [
      "WaveSurfer#setHeight"
    ]
  },
  {
    "__docId__": 767,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it55",
    "access": null,
    "description": "should return PCM data formatted using JSON.stringify",
    "lineNumber": 283,
    "testTargets": [
      "WaveSurfer#exportPCM"
    ]
  },
  {
    "__docId__": 768,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it56",
    "access": null,
    "description": "should return the list of current set filters as an array",
    "lineNumber": 289,
    "testTargets": [
      "WaveSurfer#getFilters"
    ]
  },
  {
    "__docId__": 769,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it57",
    "access": null,
    "description": "should export image data",
    "lineNumber": 296,
    "testTargets": [
      "WaveSurfer#exportImage"
    ]
  },
  {
    "__docId__": 770,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "spec/wavesurfer.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe27.it58",
    "access": null,
    "description": "should destroy",
    "lineNumber": 302,
    "testTargets": [
      "WaveSurfer#destroy"
    ]
  },
  {
    "__docId__": 771,
    "kind": "test",
    "name": "describe59",
    "testId": 59,
    "memberof": "spec/wavesurfer.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe59",
    "access": null,
    "description": "WaveSurfer/errors:",
    "lineNumber": 314,
    "testTargets": [
      "WaveSurfer"
    ]
  },
  {
    "__docId__": 772,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "spec/wavesurfer.spec.js~describe59",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe59.it60",
    "access": null,
    "description": "should throw when container element not found",
    "lineNumber": 328,
    "testTargets": [
      "WaveSurfer"
    ]
  },
  {
    "__docId__": 773,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "spec/wavesurfer.spec.js~describe59",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe59.it61",
    "access": null,
    "description": "should throw when media container element not found",
    "lineNumber": 339,
    "testTargets": [
      "WaveSurfer"
    ]
  },
  {
    "__docId__": 774,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "spec/wavesurfer.spec.js~describe59",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe59.it62",
    "access": null,
    "description": "should throw for invalid maxCanvasWidth param",
    "lineNumber": 351,
    "testTargets": [
      "WaveSurfer"
    ]
  },
  {
    "__docId__": 775,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "spec/wavesurfer.spec.js~describe59",
    "testDepth": 1,
    "static": true,
    "longname": "spec/wavesurfer.spec.js~describe59.it63",
    "access": null,
    "description": "should throw for invalid renderer",
    "lineNumber": 370,
    "testTargets": [
      "WaveSurfer"
    ]
  }
]