[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/drawer.canvasentry.js",
    "content": "/**\n * @since 3.0.0\n */\n\nimport style from './util/style';\nimport getId from './util/get-id';\n\n/**\n * The `CanvasEntry` class represents an element consisting of a wave `canvas`\n * and an (optional) progress wave `canvas`.\n *\n * The `MultiCanvas` renderer uses one or more `CanvasEntry` instances to\n * render a waveform, depending on the zoom level.\n */\nexport default class CanvasEntry {\n    constructor() {\n        /**\n         * The wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.wave = null;\n        /**\n         * The wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.waveCtx = null;\n        /**\n         * The (optional) progress wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.progress = null;\n        /**\n         * The (optional) progress wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.progressCtx = null;\n        /**\n         * Start of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         * @private\n         */\n        this.start = 0;\n        /**\n         * End of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         * @private\n         */\n        this.end = 1;\n        /**\n         * Unique identifier for this entry\n         *\n         * @type {string}\n         */\n        this.id = getId(this.constructor.name.toLowerCase() + '_');\n    }\n\n    /**\n     * Store the wave canvas element and create the 2D rendering context\n     *\n     * @param {HTMLCanvasElement} element The wave `canvas` element.\n     */\n    initWave(element) {\n        this.wave = element;\n        this.waveCtx = this.wave.getContext('2d');\n    }\n\n    /**\n     * Store the progress wave canvas element and create the 2D rendering\n     * context\n     *\n     * @param {HTMLCanvasElement} element The progress wave `canvas` element.\n     */\n    initProgress(element) {\n        this.progress = element;\n        this.progressCtx = this.progress.getContext('2d');\n    }\n\n    /**\n     * Update the dimensions\n     *\n     * @param {number} elementWidth Width of the entry\n     * @param {number} totalWidth Total width of the multi canvas renderer\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(elementWidth, totalWidth, width, height) {\n        // where the canvas starts and ends in the waveform, represented as a\n        // decimal between 0 and 1\n        this.start = this.wave.offsetLeft / totalWidth || 0;\n        this.end = this.start + elementWidth / totalWidth;\n\n        // set wave canvas dimensions\n        this.wave.width = width;\n        this.wave.height = height;\n        let elementSize = { width: elementWidth + 'px' };\n        style(this.wave, elementSize);\n\n        if (this.hasProgressCanvas) {\n            // set progress canvas dimensions\n            this.progress.width = width;\n            this.progress.height = height;\n            style(this.progress, elementSize);\n        }\n    }\n\n    /**\n     * Clear the wave and progress rendering contexts\n     */\n    clearWave() {\n        // wave\n        this.waveCtx.clearRect(\n            0,\n            0,\n            this.waveCtx.canvas.width,\n            this.waveCtx.canvas.height\n        );\n\n        // progress\n        if (this.hasProgressCanvas) {\n            this.progressCtx.clearRect(\n                0,\n                0,\n                this.progressCtx.canvas.width,\n                this.progressCtx.canvas.height\n            );\n        }\n    }\n\n    /**\n     * Set the fill styles for wave and progress\n     *\n     * @param {string} waveColor Fill color for the wave canvas\n     * @param {?string} progressColor Fill color for the progress canvas\n     */\n    setFillStyles(waveColor, progressColor) {\n        this.waveCtx.fillStyle = waveColor;\n\n        if (this.hasProgressCanvas) {\n            this.progressCtx.fillStyle = progressColor;\n        }\n    }\n\n    /**\n     * Draw a rectangle for wave and progress\n     *\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRects(x, y, width, height, radius) {\n        this.fillRectToContext(this.waveCtx, x, y, width, height, radius);\n\n        if (this.hasProgressCanvas) {\n            this.fillRectToContext(\n                this.progressCtx,\n                x,\n                y,\n                width,\n                height,\n                radius\n            );\n        }\n    }\n\n    /**\n     * Draw the actual rectangle on a `canvas` element\n     *\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRectToContext(ctx, x, y, width, height, radius) {\n        if (!ctx) {\n            return;\n        }\n\n        if (radius) {\n            this.drawRoundedRect(ctx, x, y, width, height, radius);\n        } else {\n            ctx.fillRect(x, y, width, height);\n        }\n    }\n\n    /**\n     * Draw a rounded rectangle on Canvas\n     *\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Canvas context\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     *\n     * @return {void}\n     * @example drawRoundedRect(ctx, 50, 50, 5, 10, 3)\n     */\n    drawRoundedRect(ctx, x, y, width, height, radius) {\n        if (height === 0) {\n            return;\n        }\n        // peaks are float values from -1 to 1. Use absolute height values in\n        // order to correctly calculate rounded rectangle coordinates\n        if (height < 0) {\n            height *= -1;\n            y -= height;\n        }\n        ctx.beginPath();\n        ctx.moveTo(x + radius, y);\n        ctx.lineTo(x + width - radius, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n        ctx.lineTo(x + width, y + height - radius);\n        ctx.quadraticCurveTo(\n            x + width,\n            y + height,\n            x + width - radius,\n            y + height\n        );\n        ctx.lineTo(x + radius, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n        ctx.lineTo(x, y + radius);\n        ctx.quadraticCurveTo(x, y, x + radius, y);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    /**\n     * Render the actual wave and progress lines\n     *\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLines(peaks, absmax, halfH, offsetY, start, end) {\n        this.drawLineToContext(\n            this.waveCtx,\n            peaks,\n            absmax,\n            halfH,\n            offsetY,\n            start,\n            end\n        );\n\n        if (this.hasProgressCanvas) {\n            this.drawLineToContext(\n                this.progressCtx,\n                peaks,\n                absmax,\n                halfH,\n                offsetY,\n                start,\n                end\n            );\n        }\n    }\n\n    /**\n     * Render the actual waveform line on a `canvas` element\n     *\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLineToContext(ctx, peaks, absmax, halfH, offsetY, start, end) {\n        if (!ctx) {\n            return;\n        }\n\n        const length = peaks.length / 2;\n        const first = Math.round(length * this.start);\n\n        // use one more peak value to make sure we join peaks at ends -- unless,\n        // of course, this is the last canvas\n        const last = Math.round(length * this.end) + 1;\n\n        const canvasStart = first;\n        const canvasEnd = last;\n        const scale = this.wave.width / (canvasEnd - canvasStart - 1);\n\n        // optimization\n        const halfOffset = halfH + offsetY;\n        const absmaxHalf = absmax / halfH;\n\n        ctx.beginPath();\n        ctx.moveTo((canvasStart - first) * scale, halfOffset);\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset - Math.round((peaks[2 * canvasStart] || 0) / absmaxHalf)\n        );\n\n        let i, peak, h;\n        for (i = canvasStart; i < canvasEnd; i++) {\n            peak = peaks[2 * i] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((i - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        // draw the bottom edge going backwards, to make a single\n        // closed hull to fill\n        let j = canvasEnd - 1;\n        for (j; j >= canvasStart; j--) {\n            peak = peaks[2 * j + 1] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((j - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset -\n                Math.round((peaks[2 * canvasStart + 1] || 0) / absmaxHalf)\n        );\n\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    /**\n     * Destroys this entry\n     */\n    destroy() {\n        this.waveCtx = null;\n        this.wave = null;\n\n        this.progressCtx = null;\n        this.progress = null;\n    }\n\n    /**\n     * Return image data of the wave `canvas` element\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise` that\n     * resolves with a `Blob` instance.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|Promise} When using the default `'dataURL'` `type` this\n     * returns a data URL. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with a `Blob` instance.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return new Promise(resolve => {\n                this.wave.toBlob(resolve, format, quality);\n            });\n        } else if (type === 'dataURL') {\n            return this.wave.toDataURL(format, quality);\n        }\n    }\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/drawer.canvasentry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "CanvasEntry",
    "memberof": "src/drawer.canvasentry.js",
    "static": true,
    "longname": "src/drawer.canvasentry.js~CanvasEntry",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/drawer.canvasentry.js",
    "importStyle": "CanvasEntry",
    "description": "The `CanvasEntry` class represents an element consisting of a wave `canvas`\nand an (optional) progress wave `canvas`.\n\nThe `MultiCanvas` renderer uses one or more `CanvasEntry` instances to\nrender a waveform, depending on the zoom level.",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/drawer.canvasentry.js~CanvasEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.canvasentry.js~CanvasEntry#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "wave",
    "memberof": "src/drawer.canvasentry.js~CanvasEntry",
    "static": false,
    "longname": "src/drawer.canvasentry.js~CanvasEntry#wave",
    "access": "public",
    "description": "The wave node",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "HTMLCanvasElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "waveCtx",
    "memberof": "src/drawer.canvasentry.js~CanvasEntry",
    "static": false,
    "longname": "src/drawer.canvasentry.js~CanvasEntry#waveCtx",
    "access": "public",
    "description": "The wave canvas rendering context",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "CanvasRenderingContext2D"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "progress",
    "memberof": "src/drawer.canvasentry.js~CanvasEntry",
    "static": false,
    "longname": "src/drawer.canvasentry.js~CanvasEntry#progress",
    "access": "public",
    "description": "The (optional) progress wave node",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "HTMLCanvasElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "progressCtx",
    "memberof": "src/drawer.canvasentry.js~CanvasEntry",
    "static": false,
    "longname": "src/drawer.canvasentry.js~CanvasEntry#progressCtx",
    "access": "public",
    "description": "The (optional) progress wave canvas rendering context",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "CanvasRenderingContext2D"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "start",
    "memberof": "src/drawer.canvasentry.js~CanvasEntry",
    "static": false,
    "longname": "src/drawer.canvasentry.js~CanvasEntry#start",
    "access": "private",
    "description": "Start of the area the canvas should render, between 0 and 1",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "end",
    "memberof": "src/drawer.canvasentry.js~CanvasEntry",
    "static": false,
    "longname": "src/drawer.canvasentry.js~CanvasEntry#end",
    "access": "private",
    "description": "End of the area the canvas should render, between 0 and 1",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "id",
    "memberof": "src/drawer.canvasentry.js~CanvasEntry",
    "static": false,
    "longname": "src/drawer.canvasentry.js~CanvasEntry#id",
    "access": "public",
    "description": "Unique identifier for this entry",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "initWave",
    "memberof": "src/drawer.canvasentry.js~CanvasEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.canvasentry.js~CanvasEntry#initWave",
    "access": "public",
    "description": "Store the wave canvas element and create the 2D rendering context",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLCanvasElement"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "The wave `canvas` element."
      }
    ],
    "return": null
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "initProgress",
    "memberof": "src/drawer.canvasentry.js~CanvasEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.canvasentry.js~CanvasEntry#initProgress",
    "access": "public",
    "description": "Store the progress wave canvas element and create the 2D rendering\ncontext",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLCanvasElement"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "The progress wave `canvas` element."
      }
    ],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "updateDimensions",
    "memberof": "src/drawer.canvasentry.js~CanvasEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.canvasentry.js~CanvasEntry#updateDimensions",
    "access": "public",
    "description": "Update the dimensions",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "elementWidth",
        "description": "Width of the entry"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "totalWidth",
        "description": "Total width of the multi canvas renderer"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "The new width of the element"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "The new height of the element"
      }
    ],
    "return": null
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "clearWave",
    "memberof": "src/drawer.canvasentry.js~CanvasEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.canvasentry.js~CanvasEntry#clearWave",
    "access": "public",
    "description": "Clear the wave and progress rendering contexts",
    "lineNumber": 115,
    "params": [],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "setFillStyles",
    "memberof": "src/drawer.canvasentry.js~CanvasEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.canvasentry.js~CanvasEntry#setFillStyles",
    "access": "public",
    "description": "Set the fill styles for wave and progress",
    "lineNumber": 141,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "waveColor",
        "description": "Fill color for the wave canvas"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "progressColor",
        "description": "Fill color for the progress canvas"
      }
    ],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "fillRects",
    "memberof": "src/drawer.canvasentry.js~CanvasEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.canvasentry.js~CanvasEntry#fillRects",
    "access": "public",
    "description": "Draw a rectangle for wave and progress",
    "lineNumber": 158,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X start position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y start position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "Width of the rectangle"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Height of the rectangle"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "radius",
        "description": "Radius of the rectangle"
      }
    ],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "fillRectToContext",
    "memberof": "src/drawer.canvasentry.js~CanvasEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.canvasentry.js~CanvasEntry#fillRectToContext",
    "access": "private",
    "description": "Draw the actual rectangle on a `canvas` element",
    "lineNumber": 184,
    "params": [
      {
        "nullable": null,
        "types": [
          "CanvasRenderingContext2D"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "Rendering context of target canvas"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X start position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y start position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "Width of the rectangle"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Height of the rectangle"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "radius",
        "description": "Radius of the rectangle"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "drawRoundedRect",
    "memberof": "src/drawer.canvasentry.js~CanvasEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.canvasentry.js~CanvasEntry#drawRoundedRect",
    "access": "private",
    "description": "Draw a rounded rectangle on Canvas",
    "examples": [
      "drawRoundedRect(ctx, 50, 50, 5, 10, 3)"
    ],
    "lineNumber": 210,
    "params": [
      {
        "nullable": null,
        "types": [
          "CanvasRenderingContext2D"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "Canvas context"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X-position of the rectangle"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y-position of the rectangle"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "Width of the rectangle"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Height of the rectangle"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "radius",
        "description": "Radius of the rectangle"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "drawLines",
    "memberof": "src/drawer.canvasentry.js~CanvasEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.canvasentry.js~CanvasEntry#drawLines",
    "access": "public",
    "description": "Render the actual wave and progress lines",
    "lineNumber": 251,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Array with peaks data"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "absmax",
        "description": "Maximum peak value (absolute)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "halfH",
        "description": "Half the height of the waveform"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "offsetY",
        "description": "Offset to the top"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The x-offset of the beginning of the area that\nshould be rendered"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "The x-offset of the end of the area that\nshould be rendered"
      }
    ],
    "return": null
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "drawLineToContext",
    "memberof": "src/drawer.canvasentry.js~CanvasEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.canvasentry.js~CanvasEntry#drawLineToContext",
    "access": "private",
    "description": "Render the actual waveform line on a `canvas` element",
    "lineNumber": 289,
    "params": [
      {
        "nullable": null,
        "types": [
          "CanvasRenderingContext2D"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "Rendering context of target canvas"
      },
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Array with peaks data"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "absmax",
        "description": "Maximum peak value (absolute)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "halfH",
        "description": "Half the height of the waveform"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "offsetY",
        "description": "Offset to the top"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The x-offset of the beginning of the area that\nshould be rendered"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "The x-offset of the end of the area that\nshould be rendered"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/drawer.canvasentry.js~CanvasEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.canvasentry.js~CanvasEntry#destroy",
    "access": "public",
    "description": "Destroys this entry",
    "lineNumber": 346,
    "params": [],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "getImage",
    "memberof": "src/drawer.canvasentry.js~CanvasEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.canvasentry.js~CanvasEntry#getImage",
    "access": "public",
    "description": "Return image data of the wave `canvas` element\n\nWhen using a `type` of `'blob'`, this will return a `Promise` that\nresolves with a `Blob` instance.",
    "lineNumber": 367,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'image/png'",
        "defaultRaw": "'image/png'",
        "name": "format",
        "description": "An optional value of a format type."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "0.92",
        "defaultRaw": 0.92,
        "name": "quality",
        "description": "An optional value between 0 and 1."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'dataURL'",
        "defaultRaw": "'dataURL'",
        "name": "type",
        "description": "Either 'dataURL' or 'blob'."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "Promise"
      ],
      "spread": false,
      "description": "When using the default `'dataURL'` `type` this\nreturns a data URL. When using the `'blob'` `type` this returns a\n`Promise` that resolves with a `Blob` instance."
    }
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "src/drawer.js",
    "content": "import * as util from './util';\n\n/**\n * Parent class for renderers\n *\n * @extends {Observer}\n */\nexport default class Drawer extends util.Observer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super();\n        /** @private */\n        this.container = container;\n        /**\n         * @type {WavesurferParams}\n         * @private\n         */\n        this.params = params;\n        /**\n         * The width of the renderer\n         * @type {number}\n         */\n        this.width = 0;\n        /**\n         * The height of the renderer\n         * @type {number}\n         */\n        this.height = params.height * this.params.pixelRatio;\n        /** @private */\n        this.lastPos = 0;\n        /**\n         * The `<wave>` element which is added to the container\n         * @type {HTMLElement}\n         */\n        this.wrapper = null;\n    }\n\n    /**\n     * Alias of `util.style`\n     *\n     * @param {HTMLElement} el The element that the styles will be applied to\n     * @param {Object} styles The map of propName: attribute, both are used as-is\n     * @return {HTMLElement} el\n     */\n    style(el, styles) {\n        return util.style(el, styles);\n    }\n\n    /**\n     * Create the wrapper `<wave>` element, style it and set up the events for\n     * interaction\n     */\n    createWrapper() {\n        this.wrapper = this.container.appendChild(\n            document.createElement('wave')\n        );\n\n        this.style(this.wrapper, {\n            display: 'block',\n            position: 'relative',\n            userSelect: 'none',\n            webkitUserSelect: 'none',\n            height: this.params.height + 'px'\n        });\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: '100%',\n                overflowX: this.params.hideScrollbar ? 'hidden' : 'auto',\n                overflowY: 'hidden'\n            });\n        }\n\n        this.setupWrapperEvents();\n    }\n\n    /**\n     * Handle click event\n     *\n     * @param {Event} e Click event\n     * @param {?boolean} noPrevent Set to true to not call `e.preventDefault()`\n     * @return {number} Playback position from 0 to 1\n     */\n    handleEvent(e, noPrevent) {\n        !noPrevent && e.preventDefault();\n\n        const clientX = e.targetTouches\n            ? e.targetTouches[0].clientX\n            : e.clientX;\n        const bbox = this.wrapper.getBoundingClientRect();\n\n        const nominalWidth = this.width;\n        const parentWidth = this.getWidth();\n\n        let progress;\n        if (!this.params.fillParent && nominalWidth < parentWidth) {\n            progress =\n                (this.params.rtl ? bbox.right - clientX : clientX - bbox.left) *\n                    (this.params.pixelRatio / nominalWidth) || 0;\n\n            if (progress > 1) {\n                progress = 1;\n            }\n        } else {\n            progress =\n                ((this.params.rtl\n                    ? bbox.right - clientX\n                    : clientX - bbox.left) +\n                    this.wrapper.scrollLeft) /\n                    this.wrapper.scrollWidth || 0;\n        }\n\n        return progress;\n    }\n\n    /**\n     * @private\n     */\n    setupWrapperEvents() {\n        this.wrapper.addEventListener('click', e => {\n            const scrollbarHeight =\n                this.wrapper.offsetHeight - this.wrapper.clientHeight;\n            if (scrollbarHeight !== 0) {\n                // scrollbar is visible.  Check if click was on it\n                const bbox = this.wrapper.getBoundingClientRect();\n                if (e.clientY >= bbox.bottom - scrollbarHeight) {\n                    // ignore mousedown as it was on the scrollbar\n                    return;\n                }\n            }\n\n            if (this.params.interact) {\n                this.fireEvent('click', e, this.handleEvent(e));\n            }\n        });\n\n        this.wrapper.addEventListener('dblclick', e => {\n            if (this.params.interact) {\n                this.fireEvent('dblclick', e);\n            }\n        });\n\n        this.wrapper.addEventListener('scroll', e =>\n            this.fireEvent('scroll', e)\n        );\n    }\n\n    /**\n     * Draw peaks on the canvas\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} length The width of the area that should be drawn\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawPeaks(peaks, length, start, end) {\n        if (!this.setWidth(length)) {\n            this.clearWave();\n        }\n\n        this.params.barWidth\n            ? this.drawBars(peaks, 0, start, end)\n            : this.drawWave(peaks, 0, start, end);\n    }\n\n    /**\n     * Scroll to the beginning\n     */\n    resetScroll() {\n        if (this.wrapper !== null) {\n            this.wrapper.scrollLeft = 0;\n        }\n    }\n\n    /**\n     * Recenter the view-port at a certain percent of the waveform\n     *\n     * @param {number} percent Value from 0 to 1 on the waveform\n     */\n    recenter(percent) {\n        const position = this.wrapper.scrollWidth * percent;\n        this.recenterOnPosition(position, true);\n    }\n\n    /**\n     * Recenter the view-port on a position, either scroll there immediately or\n     * in steps of 5 pixels\n     *\n     * @param {number} position X-offset in pixels\n     * @param {boolean} immediate Set to true to immediately scroll somewhere\n     */\n    recenterOnPosition(position, immediate) {\n        const scrollLeft = this.wrapper.scrollLeft;\n        const half = ~~(this.wrapper.clientWidth / 2);\n        const maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n        let target = position - half;\n        let offset = target - scrollLeft;\n\n        if (maxScroll == 0) {\n            // no need to continue if scrollbar is not there\n            return;\n        }\n\n        // if the cursor is currently visible...\n        if (!immediate && -half <= offset && offset < half) {\n            // set rate at which waveform is centered\n            let rate = this.params.autoCenterRate;\n\n            // make rate depend on width of view and length of waveform\n            rate /= half;\n            rate *= maxScroll;\n\n            offset = Math.max(-rate, Math.min(rate, offset));\n            target = scrollLeft + offset;\n        }\n\n        // limit target to valid range (0 to maxScroll)\n        target = Math.max(0, Math.min(maxScroll, target));\n        // no use attempting to scroll if we're not moving\n        if (target != scrollLeft) {\n            this.wrapper.scrollLeft = target;\n        }\n    }\n\n    /**\n     * Get the current scroll position in pixels\n     *\n     * @return {number} Horizontal scroll position in pixels\n     */\n    getScrollX() {\n        let x = 0;\n        if (this.wrapper) {\n            const pixelRatio = this.params.pixelRatio;\n            x = Math.round(this.wrapper.scrollLeft * pixelRatio);\n\n            // In cases of elastic scroll (safari with mouse wheel) you can\n            // scroll beyond the limits of the container\n            // Calculate and floor the scrollable extent to make sure an out\n            // of bounds value is not returned\n            // Ticket #1312\n            if (this.params.scrollParent) {\n                const maxScroll = ~~(\n                    this.wrapper.scrollWidth * pixelRatio -\n                    this.getWidth()\n                );\n                x = Math.min(maxScroll, Math.max(0, x));\n            }\n        }\n        return x;\n    }\n\n    /**\n     * Get the width of the container\n     *\n     * @return {number} The width of the container\n     */\n    getWidth() {\n        return Math.round(this.container.clientWidth * this.params.pixelRatio);\n    }\n\n    /**\n     * Set the width of the container\n     *\n     * @param {number} width The new width of the container\n     * @return {boolean} Whether the width of the container was updated or not\n     */\n    setWidth(width) {\n        if (this.width == width) {\n            return false;\n        }\n\n        this.width = width;\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: ''\n            });\n        } else {\n            this.style(this.wrapper, {\n                width: ~~(this.width / this.params.pixelRatio) + 'px'\n            });\n        }\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Set the height of the container\n     *\n     * @param {number} height The new height of the container.\n     * @return {boolean} Whether the height of the container was updated or not\n     */\n    setHeight(height) {\n        if (height == this.height) {\n            return false;\n        }\n        this.height = height;\n\n        this.style(this.wrapper, {\n            height: ~~(this.height / this.params.pixelRatio) + 'px'\n        });\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Called by wavesurfer when progress should be rendered\n     *\n     * @param {number} progress From 0 to 1\n     */\n    progress(progress) {\n        const minPxDelta = 1 / this.params.pixelRatio;\n        const pos = Math.round(progress * this.width) * minPxDelta;\n\n        if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\n            this.lastPos = pos;\n\n            if (this.params.scrollParent && this.params.autoCenter) {\n                const newPos = ~~(this.wrapper.scrollWidth * progress);\n                this.recenterOnPosition(\n                    newPos,\n                    this.params.autoCenterImmediately\n                );\n            }\n\n            this.updateProgress(pos);\n        }\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        this.unAll();\n        if (this.wrapper) {\n            if (this.wrapper.parentNode == this.container) {\n                this.container.removeChild(this.wrapper);\n            }\n            this.wrapper = null;\n        }\n    }\n\n    /* Renderer-specific methods */\n\n    /**\n     * Called after cursor related params have changed.\n     *\n     * @abstract\n     */\n    updateCursor() {}\n\n    /**\n     * Called when the size of the container changes so the renderer can adjust\n     *\n     * @abstract\n     */\n    updateSize() {}\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawBars(peaks, channelIndex, start, end) {}\n\n    /**\n     * Draw a waveform\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawWave(peaks, channelIndex, start, end) {}\n\n    /**\n     * Clear the waveform\n     *\n     * @abstract\n     */\n    clearWave() {}\n\n    /**\n     * Render the new progress\n     *\n     * @abstract\n     * @param {number} position X-Offset of progress position in pixels\n     */\n    updateProgress(position) {}\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/drawer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "class",
    "name": "Drawer",
    "memberof": "src/drawer.js",
    "static": true,
    "longname": "src/drawer.js~Drawer",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/drawer.js",
    "importStyle": "Drawer",
    "description": "Parent class for renderers",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "Observer"
    ]
  },
  {
    "__docId__": 82,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": "The container node of the wavesurfer instance"
      },
      {
        "nullable": null,
        "types": [
          "WavesurferParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The wavesurfer initialisation options"
      }
    ]
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "container",
    "memberof": "src/drawer.js~Drawer",
    "static": false,
    "longname": "src/drawer.js~Drawer#container",
    "access": "private",
    "description": null,
    "lineNumber": 16,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "params",
    "memberof": "src/drawer.js~Drawer",
    "static": false,
    "longname": "src/drawer.js~Drawer#params",
    "access": "private",
    "description": "",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "WavesurferParams"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "width",
    "memberof": "src/drawer.js~Drawer",
    "static": false,
    "longname": "src/drawer.js~Drawer#width",
    "access": "public",
    "description": "The width of the renderer",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "height",
    "memberof": "src/drawer.js~Drawer",
    "static": false,
    "longname": "src/drawer.js~Drawer#height",
    "access": "public",
    "description": "The height of the renderer",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "lastPos",
    "memberof": "src/drawer.js~Drawer",
    "static": false,
    "longname": "src/drawer.js~Drawer#lastPos",
    "access": "private",
    "description": null,
    "lineNumber": 33,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "wrapper",
    "memberof": "src/drawer.js~Drawer",
    "static": false,
    "longname": "src/drawer.js~Drawer#wrapper",
    "access": "public",
    "description": "The `<wave>` element which is added to the container",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "style",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#style",
    "access": "public",
    "description": "Alias of `util.style`",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "el",
        "description": "The element that the styles will be applied to"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "styles",
        "description": "The map of propName: attribute, both are used as-is"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": "el"
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "createWrapper",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#createWrapper",
    "access": "public",
    "description": "Create the wrapper `<wave>` element, style it and set up the events for\ninteraction",
    "lineNumber": 56,
    "params": [],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "handleEvent",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#handleEvent",
    "access": "public",
    "description": "Handle click event",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "Click event"
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noPrevent",
        "description": "Set to true to not call `e.preventDefault()`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Playback position from 0 to 1"
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "setupWrapperEvents",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#setupWrapperEvents",
    "access": "private",
    "description": "",
    "lineNumber": 122,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "drawPeaks",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#drawPeaks",
    "access": "public",
    "description": "Draw peaks on the canvas",
    "lineNumber": 162,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]",
          "Number.<Array[]>"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Can also be an array of arrays\nfor split channel rendering"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "The width of the area that should be drawn"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The x-offset of the beginning of the area that\nshould be rendered"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "The x-offset of the end of the area that should be\nrendered"
      }
    ],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "resetScroll",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#resetScroll",
    "access": "public",
    "description": "Scroll to the beginning",
    "lineNumber": 175,
    "params": [],
    "return": null
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "recenter",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#recenter",
    "access": "public",
    "description": "Recenter the view-port at a certain percent of the waveform",
    "lineNumber": 186,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "percent",
        "description": "Value from 0 to 1 on the waveform"
      }
    ],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "recenterOnPosition",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#recenterOnPosition",
    "access": "public",
    "description": "Recenter the view-port on a position, either scroll there immediately or\nin steps of 5 pixels",
    "lineNumber": 198,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "X-offset in pixels"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "immediate",
        "description": "Set to true to immediately scroll somewhere"
      }
    ],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "getScrollX",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#getScrollX",
    "access": "public",
    "description": "Get the current scroll position in pixels",
    "lineNumber": 236,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Horizontal scroll position in pixels"
    },
    "params": []
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "getWidth",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#getWidth",
    "access": "public",
    "description": "Get the width of the container",
    "lineNumber": 263,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The width of the container"
    },
    "params": []
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "setWidth",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#setWidth",
    "access": "public",
    "description": "Set the width of the container",
    "lineNumber": 273,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "The new width of the container"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether the width of the container was updated or not"
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "setHeight",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#setHeight",
    "access": "public",
    "description": "Set the height of the container",
    "lineNumber": 300,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "The new height of the container."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether the height of the container was updated or not"
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "progress",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#progress",
    "access": "public",
    "description": "Called by wavesurfer when progress should be rendered",
    "lineNumber": 319,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "progress",
        "description": "From 0 to 1"
      }
    ],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#destroy",
    "access": "public",
    "description": "This is called when wavesurfer is destroyed",
    "lineNumber": 341,
    "params": [],
    "return": null
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "updateCursor",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#updateCursor",
    "access": "public",
    "description": "Called after cursor related params have changed.",
    "lineNumber": 358,
    "abstract": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "updateSize",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#updateSize",
    "access": "public",
    "description": "Called when the size of the container changes so the renderer can adjust",
    "lineNumber": 365,
    "abstract": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "drawBars",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#drawBars",
    "access": "public",
    "description": "Draw a waveform with bars",
    "lineNumber": 380,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]",
          "Number.<Array[]>"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Can also be an array of arrays for split channel\nrendering"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "channelIndex",
        "description": "The index of the current channel. Normally\nshould be 0"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The x-offset of the beginning of the area that\nshould be rendered"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "The x-offset of the end of the area that should be\nrendered"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "drawWave",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#drawWave",
    "access": "public",
    "description": "Draw a waveform",
    "lineNumber": 395,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]",
          "Number.<Array[]>"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Can also be an array of arrays for split channel\nrendering"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "channelIndex",
        "description": "The index of the current channel. Normally\nshould be 0"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The x-offset of the beginning of the area that\nshould be rendered"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "The x-offset of the end of the area that should be\nrendered"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "clearWave",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#clearWave",
    "access": "public",
    "description": "Clear the waveform",
    "lineNumber": 402,
    "abstract": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "updateProgress",
    "memberof": "src/drawer.js~Drawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.js~Drawer#updateProgress",
    "access": "public",
    "description": "Render the new progress",
    "lineNumber": 410,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "X-Offset of progress position in pixels"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "src/drawer.multicanvas.js",
    "content": "import Drawer from './drawer';\nimport * as util from './util';\nimport CanvasEntry from './drawer.canvasentry';\n\n/**\n * MultiCanvas renderer for wavesurfer. Is currently the default and sole\n * builtin renderer.\n *\n * A `MultiCanvas` consists of one or more `CanvasEntry` instances, depending\n * on the zoom level.\n */\nexport default class MultiCanvas extends Drawer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super(container, params);\n\n        /**\n         * @type {number}\n         * @private\n         */\n        this.maxCanvasWidth = params.maxCanvasWidth;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this.maxCanvasElementWidth = Math.round(\n            params.maxCanvasWidth / params.pixelRatio\n        );\n\n        /**\n         * Whether or not the progress wave is rendered. If the `waveColor`\n         * and `progressColor` are the same color it is not.\n         *\n         * @type {boolean}\n         */\n        this.hasProgressCanvas = params.waveColor != params.progressColor;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this.halfPixel = 0.5 / params.pixelRatio;\n\n        /**\n         * List of `CanvasEntry` instances.\n         *\n         * @private\n         * @type {Array}\n         */\n        this.canvases = [];\n\n        /**\n         * @private\n         * @type {HTMLElement}\n         */\n        this.progressWave = null;\n\n        /**\n         * Class used to generate entries.\n         *\n         * @private\n         * @type {function}\n         */\n        this.EntryClass = CanvasEntry;\n\n        /**\n         * Overlap added between entries to prevent vertical white stripes\n         * between `canvas` elements.\n         *\n         * @type {number}\n         */\n        this.overlap = 2 * Math.ceil(params.pixelRatio / 2);\n\n        /**\n         * The radius of the wave bars. Makes bars rounded\n         *\n         * @private\n         * @type {number}\n         */\n        this.barRadius = params.barRadius || 0;\n    }\n\n    /**\n     * Initialize the drawer\n     */\n    init() {\n        this.createWrapper();\n        this.createElements();\n    }\n\n    /**\n     * Create the canvas elements and style them\n     *\n     * @private\n     */\n    createElements() {\n        this.progressWave = this.wrapper.appendChild(\n            this.style(document.createElement('wave'), {\n                position: 'absolute',\n                zIndex: 3,\n                left: 0,\n                top: 0,\n                bottom: 0,\n                overflow: 'hidden',\n                width: '0',\n                display: 'none',\n                boxSizing: 'border-box',\n                borderRightStyle: 'solid',\n                pointerEvents: 'none'\n            })\n        );\n\n        this.addCanvas();\n        this.updateCursor();\n    }\n\n    /**\n     * Update cursor style\n     */\n    updateCursor() {\n        this.style(this.progressWave, {\n            borderRightWidth: this.params.cursorWidth + 'px',\n            borderRightColor: this.params.cursorColor\n        });\n    }\n\n    /**\n     * Adjust to the updated size by adding or removing canvases\n     */\n    updateSize() {\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n        const requiredCanvases = Math.ceil(\n            totalWidth / (this.maxCanvasElementWidth + this.overlap)\n        );\n\n        // add required canvases\n        while (this.canvases.length < requiredCanvases) {\n            this.addCanvas();\n        }\n\n        // remove older existing canvases, if any\n        while (this.canvases.length > requiredCanvases) {\n            this.removeCanvas();\n        }\n\n        let canvasWidth = this.maxCanvasWidth + this.overlap;\n        const lastCanvas = this.canvases.length - 1;\n        this.canvases.forEach((entry, i) => {\n            if (i == lastCanvas) {\n                canvasWidth = this.width - this.maxCanvasWidth * lastCanvas;\n            }\n            this.updateDimensions(entry, canvasWidth, this.height);\n\n            entry.clearWave();\n        });\n    }\n\n    /**\n     * Add a canvas to the canvas list\n     *\n     * @private\n     */\n    addCanvas() {\n        const entry = new this.EntryClass();\n        entry.hasProgressCanvas = this.hasProgressCanvas;\n        entry.halfPixel = this.halfPixel;\n        const leftOffset = this.maxCanvasElementWidth * this.canvases.length;\n\n        // wave\n        entry.initWave(\n            this.wrapper.appendChild(\n                this.style(document.createElement('canvas'), {\n                    position: 'absolute',\n                    zIndex: 2,\n                    left: leftOffset + 'px',\n                    top: 0,\n                    bottom: 0,\n                    height: '100%',\n                    pointerEvents: 'none'\n                })\n            )\n        );\n\n        // progress\n        if (this.hasProgressCanvas) {\n            entry.initProgress(\n                this.progressWave.appendChild(\n                    this.style(document.createElement('canvas'), {\n                        position: 'absolute',\n                        left: leftOffset + 'px',\n                        top: 0,\n                        bottom: 0,\n                        height: '100%'\n                    })\n                )\n            );\n        }\n\n        this.canvases.push(entry);\n    }\n\n    /**\n     * Pop single canvas from the list\n     *\n     * @private\n     */\n    removeCanvas() {\n        let lastEntry = this.canvases[this.canvases.length - 1];\n\n        // wave\n        lastEntry.wave.parentElement.removeChild(lastEntry.wave);\n\n        // progress\n        if (this.hasProgressCanvas) {\n            lastEntry.progress.parentElement.removeChild(lastEntry.progress);\n        }\n\n        // cleanup\n        if (lastEntry) {\n            lastEntry.destroy();\n            lastEntry = null;\n        }\n\n        this.canvases.pop();\n    }\n\n    /**\n     * Update the dimensions of a canvas element\n     *\n     * @private\n     * @param {CanvasEntry} entry Target entry\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(entry, width, height) {\n        const elementWidth = Math.round(width / this.params.pixelRatio);\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n\n        // update canvas dimensions\n        entry.updateDimensions(elementWidth, totalWidth, width, height);\n\n        // style element\n        this.style(this.progressWave, { display: 'block' });\n    }\n\n    /**\n     * Clear the whole multi-canvas\n     */\n    clearWave() {\n        this.canvases.forEach(entry => entry.clearWave());\n    }\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0. Must be an integer.\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawBars(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks }) => {\n                // if drawBars was called within ws.empty we don't pass a start and\n                // don't want anything to happen\n                if (start === undefined) {\n                    return;\n                }\n                // Skip every other value if there are negatives.\n                const peakIndexScale = hasMinVals ? 2 : 1;\n                const length = peaks.length / peakIndexScale;\n                const bar = this.params.barWidth * this.params.pixelRatio;\n                const gap =\n                    this.params.barGap === null\n                        ? Math.max(this.params.pixelRatio, ~~(bar / 2))\n                        : Math.max(\n                              this.params.pixelRatio,\n                              this.params.barGap * this.params.pixelRatio\n                          );\n                const step = bar + gap;\n\n                const scale = length / this.width;\n                const first = start;\n                const last = end;\n                let i = first;\n\n                for (i; i < last; i += step) {\n                    const peak =\n                        peaks[Math.floor(i * scale * peakIndexScale)] || 0;\n                    const h = Math.round((peak / absmax) * halfH);\n                    this.fillRect(\n                        i + this.halfPixel,\n                        halfH - h + offsetY,\n                        bar + this.halfPixel,\n                        h * 2,\n                        this.barRadius\n                    );\n                }\n            }\n        );\n    }\n\n    /**\n     * Draw a waveform\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered (If this isn't set only a flat line is rendered)\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawWave(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks }) => {\n                if (!hasMinVals) {\n                    const reflectedPeaks = [];\n                    const len = peaks.length;\n                    let i = 0;\n                    for (i; i < len; i++) {\n                        reflectedPeaks[2 * i] = peaks[i];\n                        reflectedPeaks[2 * i + 1] = -peaks[i];\n                    }\n                    peaks = reflectedPeaks;\n                }\n\n                // if drawWave was called within ws.empty we don't pass a start and\n                // end and simply want a flat line\n                if (start !== undefined) {\n                    this.drawLine(peaks, absmax, halfH, offsetY, start, end);\n                }\n\n                // always draw a median line\n                this.fillRect(\n                    0,\n                    halfH + offsetY - this.halfPixel,\n                    this.width,\n                    this.halfPixel,\n                    this.barRadius\n                );\n            }\n        );\n    }\n\n    /**\n     * Tell the canvas entries to render their portion of the waveform\n     *\n     * @private\n     * @param {number[]} peaks Peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLine(peaks, absmax, halfH, offsetY, start, end) {\n        this.canvases.forEach(entry => {\n            this.setFillStyles(entry);\n            entry.drawLines(peaks, absmax, halfH, offsetY, start, end);\n        });\n    }\n\n    /**\n     * Draw a rectangle on the multi-canvas\n     *\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRect(x, y, width, height, radius) {\n        const startCanvas = Math.floor(x / this.maxCanvasWidth);\n        const endCanvas = Math.min(\n            Math.ceil((x + width) / this.maxCanvasWidth) + 1,\n            this.canvases.length\n        );\n        let i = startCanvas;\n        for (i; i < endCanvas; i++) {\n            const entry = this.canvases[i];\n            const leftOffset = i * this.maxCanvasWidth;\n\n            const intersection = {\n                x1: Math.max(x, i * this.maxCanvasWidth),\n                y1: y,\n                x2: Math.min(\n                    x + width,\n                    i * this.maxCanvasWidth + entry.wave.width\n                ),\n                y2: y + height\n            };\n\n            if (intersection.x1 < intersection.x2) {\n                this.setFillStyles(entry);\n\n                entry.fillRects(\n                    intersection.x1 - leftOffset,\n                    intersection.y1,\n                    intersection.x2 - intersection.x1,\n                    intersection.y2 - intersection.y1,\n                    radius\n                );\n            }\n        }\n    }\n\n    /**\n     * Performs preparation tasks and calculations which are shared by `drawBars`\n     * and `drawWave`\n     *\n     * @private\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for\n     * split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered. If this isn't set only a flat line is rendered\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @param {function} fn The render function to call, e.g. `drawWave`\n     * @returns {void}\n     */\n    prepareDraw(peaks, channelIndex, start, end, fn) {\n        return util.frame(() => {\n            // Split channels and call this function with the channelIndex set\n            if (peaks[0] instanceof Array) {\n                const channels = peaks;\n                if (this.params.splitChannels) {\n                    this.setHeight(\n                        channels.length *\n                            this.params.height *\n                            this.params.pixelRatio\n                    );\n                    return channels.forEach((channelPeaks, i) =>\n                        this.prepareDraw(channelPeaks, i, start, end, fn)\n                    );\n                }\n                peaks = channels[0];\n            }\n            // calculate maximum modulation value, either from the barHeight\n            // parameter or if normalize=true from the largest value in the peak\n            // set\n            let absmax = 1 / this.params.barHeight;\n            if (this.params.normalize) {\n                const max = util.max(peaks);\n                const min = util.min(peaks);\n                absmax = -min > max ? -min : max;\n            }\n\n            // Bar wave draws the bottom only as a reflection of the top,\n            // so we don't need negative values\n            const hasMinVals = [].some.call(peaks, val => val < 0);\n            const height = this.params.height * this.params.pixelRatio;\n            const offsetY = height * channelIndex || 0;\n            const halfH = height / 2;\n\n            return fn({\n                absmax: absmax,\n                hasMinVals: hasMinVals,\n                height: height,\n                offsetY: offsetY,\n                halfH: halfH,\n                peaks: peaks\n            });\n        })();\n    }\n\n    /**\n     * Set the fill styles for a certain entry (wave and progress)\n     *\n     * @private\n     * @param {CanvasEntry} entry Target entry\n     */\n    setFillStyles(entry) {\n        entry.setFillStyles(this.params.waveColor, this.params.progressColor);\n    }\n\n    /**\n     * Return image data of the multi-canvas\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise`.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|string[]|Promise} When using the default `'dataURL'`\n     * `type` this returns a single data URL or an array of data URLs,\n     * one for each canvas. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with an array of `Blob` instances, one for each\n     * canvas.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return Promise.all(\n                this.canvases.map(entry => {\n                    return entry.getImage(format, quality, type);\n                })\n            );\n        } else if (type === 'dataURL') {\n            let images = this.canvases.map(entry =>\n                entry.getImage(format, quality, type)\n            );\n            return images.length > 1 ? images : images[0];\n        }\n    }\n\n    /**\n     * Render the new progress\n     *\n     * @param {number} position X-offset of progress position in pixels\n     */\n    updateProgress(position) {\n        this.style(this.progressWave, { width: position + 'px' });\n    }\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/drawer.multicanvas.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "class",
    "name": "MultiCanvas",
    "memberof": "src/drawer.multicanvas.js",
    "static": true,
    "longname": "src/drawer.multicanvas.js~MultiCanvas",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/drawer.multicanvas.js",
    "importStyle": "MultiCanvas",
    "description": "MultiCanvas renderer for wavesurfer. Is currently the default and sole\nbuiltin renderer.\n\nA `MultiCanvas` consists of one or more `CanvasEntry` instances, depending\non the zoom level.",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "src/drawer.js~Drawer"
    ]
  },
  {
    "__docId__": 116,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": "The container node of the wavesurfer instance"
      },
      {
        "nullable": null,
        "types": [
          "WavesurferParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The wavesurfer initialisation options"
      }
    ]
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "maxCanvasWidth",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#maxCanvasWidth",
    "access": "private",
    "description": "",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "maxCanvasElementWidth",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#maxCanvasElementWidth",
    "access": "private",
    "description": "",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "hasProgressCanvas",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#hasProgressCanvas",
    "access": "public",
    "description": "Whether or not the progress wave is rendered. If the `waveColor`\nand `progressColor` are the same color it is not.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "halfPixel",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#halfPixel",
    "access": "private",
    "description": "",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "canvases",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#canvases",
    "access": "private",
    "description": "List of `CanvasEntry` instances.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "progressWave",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#progressWave",
    "access": "private",
    "description": "",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "EntryClass",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#EntryClass",
    "access": "private",
    "description": "Class used to generate entries.",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "member",
    "name": "overlap",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#overlap",
    "access": "public",
    "description": "Overlap added between entries to prevent vertical white stripes\nbetween `canvas` elements.",
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "barRadius",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#barRadius",
    "access": "private",
    "description": "The radius of the wave bars. Makes bars rounded",
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "init",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#init",
    "access": "public",
    "description": "Initialize the drawer",
    "lineNumber": 90,
    "params": [],
    "return": null
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "createElements",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#createElements",
    "access": "private",
    "description": "Create the canvas elements and style them",
    "lineNumber": 100,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "updateCursor",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#updateCursor",
    "access": "public",
    "description": "Update cursor style",
    "lineNumber": 124,
    "params": [],
    "return": null
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "updateSize",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#updateSize",
    "access": "public",
    "description": "Adjust to the updated size by adding or removing canvases",
    "lineNumber": 134,
    "params": [],
    "return": null
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "addCanvas",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#addCanvas",
    "access": "private",
    "description": "Add a canvas to the canvas list",
    "lineNumber": 167,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "removeCanvas",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#removeCanvas",
    "access": "private",
    "description": "Pop single canvas from the list",
    "lineNumber": 211,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "updateDimensions",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#updateDimensions",
    "access": "private",
    "description": "Update the dimensions of a canvas element",
    "lineNumber": 239,
    "params": [
      {
        "nullable": null,
        "types": [
          "CanvasEntry"
        ],
        "spread": false,
        "optional": false,
        "name": "entry",
        "description": "Target entry"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "The new width of the element"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "The new height of the element"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "clearWave",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#clearWave",
    "access": "public",
    "description": "Clear the whole multi-canvas",
    "lineNumber": 253,
    "params": [],
    "return": null
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "drawBars",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#drawBars",
    "access": "public",
    "description": "Draw a waveform with bars",
    "lineNumber": 270,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]",
          "Number.<Array[]>"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Can also be an array of arrays\nfor split channel rendering"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "channelIndex",
        "description": "The index of the current channel. Normally\nshould be 0. Must be an integer."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The x-offset of the beginning of the area that\nshould be rendered"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "The x-offset of the end of the area that should be\nrendered"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "drawWave",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#drawWave",
    "access": "public",
    "description": "Draw a waveform",
    "lineNumber": 329,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]",
          "Number.<Array[]>"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Can also be an array of arrays\nfor split channel rendering"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "channelIndex",
        "description": "The index of the current channel. Normally\nshould be 0"
      },
      {
        "nullable": null,
        "types": [
          "number?"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The x-offset of the beginning of the area that\nshould be rendered (If this isn't set only a flat line is rendered)"
      },
      {
        "nullable": null,
        "types": [
          "number?"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "The x-offset of the end of the area that should be\nrendered"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "drawLine",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#drawLine",
    "access": "private",
    "description": "Tell the canvas entries to render their portion of the waveform",
    "lineNumber": 378,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Peaks data"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "absmax",
        "description": "Maximum peak value (absolute)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "halfH",
        "description": "Half the height of the waveform"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "offsetY",
        "description": "Offset to the top"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The x-offset of the beginning of the area that\nshould be rendered"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "The x-offset of the end of the area that\nshould be rendered"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "fillRect",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#fillRect",
    "access": "public",
    "description": "Draw a rectangle on the multi-canvas",
    "lineNumber": 394,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X-position of the rectangle"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y-position of the rectangle"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "Width of the rectangle"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Height of the rectangle"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "radius",
        "description": "Radius of the rectangle"
      }
    ],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "prepareDraw",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#prepareDraw",
    "access": "private",
    "description": "Performs preparation tasks and calculations which are shared by `drawBars`\nand `drawWave`",
    "lineNumber": 445,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]",
          "Number.<Array[]>"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Can also be an array of arrays for\nsplit channel rendering"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "channelIndex",
        "description": "The index of the current channel. Normally\nshould be 0"
      },
      {
        "nullable": null,
        "types": [
          "number?"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The x-offset of the beginning of the area that\nshould be rendered. If this isn't set only a flat line is rendered"
      },
      {
        "nullable": null,
        "types": [
          "number?"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "The x-offset of the end of the area that should be\nrendered"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The render function to call, e.g. `drawWave`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "setFillStyles",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#setFillStyles",
    "access": "private",
    "description": "Set the fill styles for a certain entry (wave and progress)",
    "lineNumber": 496,
    "params": [
      {
        "nullable": null,
        "types": [
          "CanvasEntry"
        ],
        "spread": false,
        "optional": false,
        "name": "entry",
        "description": "Target entry"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "getImage",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#getImage",
    "access": "public",
    "description": "Return image data of the multi-canvas\n\nWhen using a `type` of `'blob'`, this will return a `Promise`.",
    "lineNumber": 514,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'image/png'",
        "defaultRaw": "'image/png'",
        "name": "format",
        "description": "An optional value of a format type."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "0.92",
        "defaultRaw": 0.92,
        "name": "quality",
        "description": "An optional value between 0 and 1."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'dataURL'",
        "defaultRaw": "'dataURL'",
        "name": "type",
        "description": "Either 'dataURL' or 'blob'."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "string[]",
        "Promise"
      ],
      "spread": false,
      "description": "When using the default `'dataURL'`\n`type` this returns a single data URL or an array of data URLs,\none for each canvas. When using the `'blob'` `type` this returns a\n`Promise` that resolves with an array of `Blob` instances, one for each\ncanvas."
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "updateProgress",
    "memberof": "src/drawer.multicanvas.js~MultiCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/drawer.multicanvas.js~MultiCanvas#updateProgress",
    "access": "public",
    "description": "Render the new progress",
    "lineNumber": 534,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "X-offset of progress position in pixels"
      }
    ],
    "return": null
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "src/html-init.js",
    "content": "import loadScript from 'load-script';\n\n/**\n * @typedef {Object} InitParams\n * @property {WavesurferParams} [defaults={backend: 'MediaElement,\n * mediaControls: true}] The default wavesurfer initialisation parameters\n * @property {string|NodeList} containers='wavesurfer' Selector or NodeList of\n * elements to attach instances to\n * @property {string}\n * pluginCdnTemplate='//localhost:8080/dist/plugin/wavesurfer.[name].js' URL\n * template for the dynamic loading of plugins\n * @property {function} loadPlugin If set overwrites the default request function,\n * can be used to inject plugins differently.\n */\n/**\n * The HTML initialisation API is not part of the main library bundle file and\n * must be additionally included.\n *\n * The API attaches wavesurfer instances to all `<wavesurfer>` (can be\n * customised), parsing their `data-` attributes to construct an options object\n * for initialisation. Among other things it can dynamically load plugin code.\n *\n * The automatic initialisation can be prevented by setting the\n * `window.WS_StopAutoInit` flag to true. The `html-init[.min].js` file exports\n * the `Init` class, which can be called manually.\n *\n * Site-wide defaults can be added by setting `window.WS_InitOptions`.\n *\n * @example\n * <!-- with minimap and timeline plugin -->\n * <wavesurfer\n *   data-url=\"../media/demo.wav\"\n *   data-plugins=\"minimap,timeline\"\n *   data-minimap-height=\"30\"\n *   data-minimap-wave-color=\"#ddd\"\n *   data-minimap-progress-color=\"#999\"\n *   data-timeline-font-size=\"13px\"\n *   data-timeline-container=\"#timeline\"\n * >\n * </wavesurfer>\n * <div id=\"timeline\"></div>\n *\n * <!-- with regions plugin -->\n * <wavesurfer\n *   data-url=\"../media/demo.wav\"\n *   data-plugins=\"regions\"\n *   data-regions-regions='[{\"start\": 1,\"end\": 3,\"color\": \"hsla(400, 100%, 30%, 0.5)\"}]'\n * >\n * </wavesurfer>\n */\nclass Init {\n    /**\n     * Instantiate Init class and initialize elements\n     *\n     * This is done automatically if `window` is defined and\n     * `window.WS_StopAutoInit` is not set to true\n     *\n     * @param {WaveSurfer} WaveSurfer The WaveSurfer library object\n     * @param {InitParams} params initialisation options\n     */\n    constructor(WaveSurfer, params = {}) {\n        if (!WaveSurfer) {\n            throw new Error('WaveSurfer is not available!');\n        }\n\n        /**\n         * cache WaveSurfer\n         * @private\n         */\n        this.WaveSurfer = WaveSurfer;\n\n        /**\n         * build parameters, cache them in _params so minified builds are smaller\n         * @private\n         */\n        const _params = (this.params = WaveSurfer.util.extend(\n            {},\n            {\n                // wavesurfer parameter defaults so by default the audio player is\n                // usable with native media element controls\n                defaults: {\n                    backend: 'MediaElement',\n                    mediaControls: true\n                },\n                // containers to instantiate on, can be selector string or NodeList\n                containers: 'wavesurfer',\n                // @TODO insert plugin CDN URIs\n                pluginCdnTemplate:\n                    '//localhost:8080/dist/plugin/wavesurfer.[name].js',\n                // loadPlugin function can be overridden to inject plugin definition\n                // objects, this default function uses load-script to load a plugin\n                // and pass it to a callback\n                loadPlugin(name, cb) {\n                    const src = _params.pluginCdnTemplate.replace(\n                        '[name]',\n                        name\n                    );\n                    loadScript(src, { async: false }, (err, plugin) => {\n                        if (err) {\n                            // eslint-disable-next-line no-console\n                            return console.error(\n                                `WaveSurfer plugin ${name} not found at ${src}`\n                            );\n                        }\n                        cb(window.WaveSurfer[name]);\n                    });\n                }\n            },\n            params\n        ));\n        /**\n         * The nodes that should have instances attached to them\n         * @type {NodeList}\n         */\n        this.containers =\n            typeof _params.containers == 'string'\n                ? document.querySelectorAll(_params.containers)\n                : _params.containers;\n        /** @private */\n        this.pluginCache = {};\n        /**\n         * An array of wavesurfer instances\n         * @type {Object[]}\n         */\n        this.instances = [];\n\n        this.initAllEls();\n    }\n\n    /**\n     * Initialize all container elements\n     */\n    initAllEls() {\n        // iterate over all the container elements\n        Array.prototype.forEach.call(this.containers, el => {\n            // load the plugins as an array of plugin names\n            const plugins = el.dataset.plugins\n                ? el.dataset.plugins.split(',')\n                : [];\n\n            // no plugins to be loaded, just render\n            if (!plugins.length) {\n                return this.initEl(el);\n            }\n            // … or: iterate over all the plugins\n            plugins.forEach((name, i) => {\n                // plugin is not cached already, load it\n                if (!this.pluginCache[name]) {\n                    this.params.loadPlugin(name, lib => {\n                        this.pluginCache[name] = lib;\n                        // plugins were all loaded, render the element\n                        if (i + 1 === plugins.length) {\n                            this.initEl(el, plugins);\n                        }\n                    });\n                } else if (i === plugins.length) {\n                    // plugin was cached and this plugin was the last\n                    this.initEl(el, plugins);\n                }\n            });\n        });\n    }\n\n    /**\n     * Initialize a single container element and add to `this.instances`\n     *\n     * @param  {HTMLElement} el The container to instantiate wavesurfer to\n     * @param  {PluginDefinition[]} plugins An Array of plugin names to initialize with\n     * @return {Object} Wavesurfer instance\n     */\n    initEl(el, plugins = []) {\n        const jsonRegex = /^[[|{]/;\n        // initialize plugins with the correct options\n        const initialisedPlugins = plugins.map(plugin => {\n            const options = {};\n            // the regex to find this plugin attributes\n            const attrNameRegex = new RegExp('^' + plugin);\n            let attrName;\n            // iterate over all the data attributes and find ones for this\n            // plugin\n            for (attrName in el.dataset) {\n                const regexResult = attrNameRegex.exec(attrName);\n                if (regexResult) {\n                    const attr = el.dataset[attrName];\n                    // if the string begins with a [ or a { parse it as JSON\n                    const prop = jsonRegex.test(attr) ? JSON.parse(attr) : attr;\n                    // this removes the plugin prefix and changes the first letter\n                    // of the resulting string to lower case to follow the naming\n                    // convention of ws params\n                    const unprefixedOptionName =\n                        attrName\n                            .slice(plugin.length, plugin.length + 1)\n                            .toLowerCase() + attrName.slice(plugin.length + 1);\n                    options[unprefixedOptionName] = prop;\n                }\n            }\n            return this.pluginCache[plugin].create(options);\n        });\n        // build parameter object for this container\n        const params = this.WaveSurfer.util.extend(\n            { container: el },\n            this.params.defaults,\n            el.dataset,\n            { plugins: initialisedPlugins }\n        );\n\n        // @TODO make nicer\n        el.style.display = 'block';\n\n        // initialize wavesurfer, load audio (with peaks if provided)\n        const instance = this.WaveSurfer.create(params);\n        const peaks = params.peaks ? JSON.parse(params.peaks) : undefined;\n        instance.load(params.url, peaks);\n\n        // push this instance into the instances cache\n        this.instances.push(instance);\n        return instance;\n    }\n}\n\n// if window object exists and window.WS_StopAutoInit is not true\nif (typeof window === 'object' && !window.WS_StopAutoInit) {\n    // call init when document is ready, apply any custom default settings\n    // in window.WS_InitOptions\n    if (document.readyState === 'complete') {\n        window.WaveSurferInit = new Init(\n            window.WaveSurfer,\n            window.WS_InitOptions\n        );\n    } else {\n        window.addEventListener('load', () => {\n            window.WaveSurferInit = new Init(\n                window.WaveSurfer,\n                window.WS_InitOptions\n            );\n        });\n    }\n}\n\n// export init for manual usage\nexport default Init;\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/html-init.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "typedef",
    "name": "InitParams",
    "memberof": "src/html-init.js",
    "static": true,
    "longname": "src/html-init.js~InitParams",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "WavesurferParams"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{backend: 'MediaElement,\nmediaControls: true}",
        "defaultRaw": "{backend: 'MediaElement,\nmediaControls: true}",
        "name": "defaults",
        "description": "The default wavesurfer initialisation parameters"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "NodeList"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'wavesurfer'",
        "defaultRaw": "'wavesurfer'",
        "name": "containers",
        "description": "Selector or NodeList of\nelements to attach instances to"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'//localhost:8080/dist/plugin/wavesurfer.[name].js'",
        "defaultRaw": "'//localhost:8080/dist/plugin/wavesurfer.[name].js'",
        "name": "pluginCdnTemplate",
        "description": "URL\ntemplate for the dynamic loading of plugins"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "loadPlugin",
        "description": "If set overwrites the default request function,\ncan be used to inject plugins differently."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "InitParams"
    }
  },
  {
    "__docId__": 145,
    "kind": "class",
    "name": "Init",
    "memberof": "src/html-init.js",
    "static": true,
    "longname": "src/html-init.js~Init",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/html-init.js",
    "importStyle": "Init",
    "description": "The HTML initialisation API is not part of the main library bundle file and\nmust be additionally included.\n\nThe API attaches wavesurfer instances to all `<wavesurfer>` (can be\ncustomised), parsing their `data-` attributes to construct an options object\nfor initialisation. Among other things it can dynamically load plugin code.\n\nThe automatic initialisation can be prevented by setting the\n`window.WS_StopAutoInit` flag to true. The `html-init[.min].js` file exports\nthe `Init` class, which can be called manually.\n\nSite-wide defaults can be added by setting `window.WS_InitOptions`.",
    "examples": [
      "<!-- with minimap and timeline plugin -->\n<wavesurfer\n  data-url=\"../media/demo.wav\"\n  data-plugins=\"minimap,timeline\"\n  data-minimap-height=\"30\"\n  data-minimap-wave-color=\"#ddd\"\n  data-minimap-progress-color=\"#999\"\n  data-timeline-font-size=\"13px\"\n  data-timeline-container=\"#timeline\"\n>\n</wavesurfer>\n<div id=\"timeline\"></div>\n\n<!-- with regions plugin -->\n<wavesurfer\n  data-url=\"../media/demo.wav\"\n  data-plugins=\"regions\"\n  data-regions-regions='[{\"start\": 1,\"end\": 3,\"color\": \"hsla(400, 100%, 30%, 0.5)\"}]'\n>\n</wavesurfer>"
    ],
    "lineNumber": 51,
    "interface": false
  },
  {
    "__docId__": 146,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/html-init.js~Init",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/html-init.js~Init#constructor",
    "access": "public",
    "description": "Instantiate Init class and initialize elements\n\nThis is done automatically if `window` is defined and\n`window.WS_StopAutoInit` is not set to true",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "WaveSurfer"
        ],
        "spread": false,
        "optional": false,
        "name": "WaveSurfer",
        "description": "The WaveSurfer library object"
      },
      {
        "nullable": null,
        "types": [
          "InitParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "initialisation options"
      }
    ]
  },
  {
    "__docId__": 147,
    "kind": "member",
    "name": "WaveSurfer",
    "memberof": "src/html-init.js~Init",
    "static": false,
    "longname": "src/html-init.js~Init#WaveSurfer",
    "access": "private",
    "description": "cache WaveSurfer",
    "lineNumber": 70,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "member",
    "name": "containers",
    "memberof": "src/html-init.js~Init",
    "static": false,
    "longname": "src/html-init.js~Init#containers",
    "access": "public",
    "description": "The nodes that should have instances attached to them",
    "lineNumber": 115,
    "type": {
      "nullable": null,
      "types": [
        "NodeList"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 149,
    "kind": "member",
    "name": "pluginCache",
    "memberof": "src/html-init.js~Init",
    "static": false,
    "longname": "src/html-init.js~Init#pluginCache",
    "access": "private",
    "description": null,
    "lineNumber": 120,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "member",
    "name": "instances",
    "memberof": "src/html-init.js~Init",
    "static": false,
    "longname": "src/html-init.js~Init#instances",
    "access": "public",
    "description": "An array of wavesurfer instances",
    "lineNumber": 125,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "initAllEls",
    "memberof": "src/html-init.js~Init",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/html-init.js~Init#initAllEls",
    "access": "public",
    "description": "Initialize all container elements",
    "lineNumber": 133,
    "params": [],
    "return": null
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "initEl",
    "memberof": "src/html-init.js~Init",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/html-init.js~Init#initEl",
    "access": "public",
    "description": "Initialize a single container element and add to `this.instances`",
    "lineNumber": 171,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "el",
        "description": "The container to instantiate wavesurfer to"
      },
      {
        "nullable": null,
        "types": [
          "PluginDefinition[]"
        ],
        "spread": false,
        "optional": false,
        "name": "plugins",
        "description": "An Array of plugin names to initialize with"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Wavesurfer instance"
    }
  },
  {
    "__docId__": 153,
    "kind": "file",
    "name": "src/mediaelement-webaudio.js",
    "content": "import MediaElement from './mediaelement';\n\n/**\n * MediaElementWebAudio backend: allows to load audio as HTML5 audio tag and use it with WebAudio API.\n * Setting the MediaElementWebAudio backend, there is the possibility to load audio of big dimensions, using the WebAudio API features.\n * The audio to load is an HTML5 audio tag, so you have to use the same methods of MediaElement backend for loading and playback.\n * In this way, the audio resource is not loaded entirely from server, but in ranges, since you load an HTML5 audio tag.\n * In this way, filters and other functionalities can be performed like with WebAudio backend, but without decoding\n * internally audio data, that caused crashing of the browser. You have to give also peaks, so the audio data are not decoded.\n *\n * @since 3.2.0\n */\nexport default class MediaElementWebAudio extends MediaElement {\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super(params);\n        /** @private */\n        this.params = params;\n        /** @private */\n        this.sourceMediaElement = null;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n    }\n    /**\n     * Private method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @private\n     */\n    _load(media, peaks) {\n        super._load(media, peaks);\n        this.createMediaElementSource(media);\n    }\n\n    /**\n     * Create MediaElementSource node\n     *\n     * @since 3.2.0\n     * @param {HTMLMediaElement} mediaElement HTML5 Audio to load\n     */\n    createMediaElementSource(mediaElement) {\n        this.sourceMediaElement = this.ac.createMediaElementSource(\n            mediaElement\n        );\n        this.sourceMediaElement.connect(this.analyser);\n    }\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/mediaelement-webaudio.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 154,
    "kind": "class",
    "name": "MediaElementWebAudio",
    "memberof": "src/mediaelement-webaudio.js",
    "static": true,
    "longname": "src/mediaelement-webaudio.js~MediaElementWebAudio",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/mediaelement-webaudio.js",
    "importStyle": "MediaElementWebAudio",
    "description": "MediaElementWebAudio backend: allows to load audio as HTML5 audio tag and use it with WebAudio API.\nSetting the MediaElementWebAudio backend, there is the possibility to load audio of big dimensions, using the WebAudio API features.\nThe audio to load is an HTML5 audio tag, so you have to use the same methods of MediaElement backend for loading and playback.\nIn this way, the audio resource is not loaded entirely from server, but in ranges, since you load an HTML5 audio tag.\nIn this way, filters and other functionalities can be performed like with WebAudio backend, but without decoding\ninternally audio data, that caused crashing of the browser. You have to give also peaks, so the audio data are not decoded.",
    "lineNumber": 13,
    "since": "3.2.0",
    "interface": false,
    "extends": [
      "src/mediaelement.js~MediaElement"
    ]
  },
  {
    "__docId__": 155,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/mediaelement-webaudio.js~MediaElementWebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement-webaudio.js~MediaElementWebAudio#constructor",
    "access": "public",
    "description": "Construct the backend",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "WavesurferParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Wavesurfer parameters"
      }
    ]
  },
  {
    "__docId__": 156,
    "kind": "member",
    "name": "params",
    "memberof": "src/mediaelement-webaudio.js~MediaElementWebAudio",
    "static": false,
    "longname": "src/mediaelement-webaudio.js~MediaElementWebAudio#params",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "member",
    "name": "sourceMediaElement",
    "memberof": "src/mediaelement-webaudio.js~MediaElementWebAudio",
    "static": false,
    "longname": "src/mediaelement-webaudio.js~MediaElementWebAudio#sourceMediaElement",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "init",
    "memberof": "src/mediaelement-webaudio.js~MediaElementWebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement-webaudio.js~MediaElementWebAudio#init",
    "access": "public",
    "description": "Initialise the backend, called in `wavesurfer.createBackend()`",
    "lineNumber": 30,
    "params": [],
    "return": null
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "_load",
    "memberof": "src/mediaelement-webaudio.js~MediaElementWebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement-webaudio.js~MediaElementWebAudio#_load",
    "access": "private",
    "description": "Private method called by both `load` (from url)\nand `loadElt` (existing media element) methods.",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLMediaElement"
        ],
        "spread": false,
        "optional": false,
        "name": "media",
        "description": "HTML5 Audio or Video element"
      },
      {
        "nullable": null,
        "types": [
          "number[]",
          "Number.<Array[]>"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Array of peak data"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "createMediaElementSource",
    "memberof": "src/mediaelement-webaudio.js~MediaElementWebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement-webaudio.js~MediaElementWebAudio#createMediaElementSource",
    "access": "public",
    "description": "Create MediaElementSource node",
    "lineNumber": 56,
    "since": "3.2.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLMediaElement"
        ],
        "spread": false,
        "optional": false,
        "name": "mediaElement",
        "description": "HTML5 Audio to load"
      }
    ],
    "return": null
  },
  {
    "__docId__": 162,
    "kind": "file",
    "name": "src/mediaelement.js",
    "content": "import WebAudio from './webaudio';\nimport * as util from './util';\n\n/**\n * MediaElement backend\n */\nexport default class MediaElement extends WebAudio {\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super(params);\n        /** @private */\n        this.params = params;\n\n        /**\n         * Initially a dummy media element to catch errors. Once `_load` is\n         * called, this will contain the actual `HTMLMediaElement`.\n         * @private\n         */\n        this.media = {\n            currentTime: 0,\n            duration: 0,\n            paused: true,\n            playbackRate: 1,\n            play() {},\n            pause() {},\n            volume: 0\n        };\n\n        /** @private */\n        this.mediaType = params.mediaType.toLowerCase();\n        /** @private */\n        this.elementPosition = params.elementPosition;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** @private */\n        this.volume = 1;\n        /** @private */\n        this.isMuted = false;\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.onPlayEnd = null;\n        /** @private */\n        this.mediaListeners = {};\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n    }\n\n    /**\n     * Attach event listeners to media element.\n     */\n    _setupMediaListeners() {\n        this.mediaListeners.error = () => {\n            this.fireEvent('error', 'Error loading media element');\n        };\n        this.mediaListeners.canplay = () => {\n            this.fireEvent('canplay');\n        };\n        this.mediaListeners.ended = () => {\n            this.fireEvent('finish');\n        };\n        // listen to and relay play, pause and seeked events to enable\n        // playback control from the external media element\n        this.mediaListeners.play = () => {\n            this.fireEvent('play');\n        };\n        this.mediaListeners.pause = () => {\n            this.fireEvent('pause');\n        };\n        this.mediaListeners.seeked = event => {\n            this.fireEvent('seek');\n        };\n        this.mediaListeners.volumechange = event => {\n            this.isMuted = this.media.muted;\n            if (this.isMuted) {\n                this.volume = 0;\n            } else {\n                this.volume = this.media.volume;\n            }\n            this.fireEvent('volume');\n        };\n\n        // reset event listeners\n        Object.keys(this.mediaListeners).forEach(id => {\n            this.media.removeEventListener(id, this.mediaListeners[id]);\n            this.media.addEventListener(id, this.mediaListeners[id]);\n        });\n    }\n\n    /**\n     * Create a timer to provide a more precise `audioprocess` event.\n     */\n    createTimer() {\n        const onAudioProcess = () => {\n            if (this.isPaused()) {\n                return;\n            }\n            this.fireEvent('audioprocess', this.getCurrentTime());\n\n            // Call again in the next frame\n            util.frame(onAudioProcess)();\n        };\n\n        this.on('play', onAudioProcess);\n\n        // Update the progress one more time to prevent it from being stuck in\n        // case of lower framerates\n        this.on('pause', () => {\n            this.fireEvent('audioprocess', this.getCurrentTime());\n        });\n    }\n\n    /**\n     * Create media element with url as its source,\n     * and append to container element.\n     *\n     * @param {string} url Path to media file\n     * @param {HTMLElement} container HTML element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @throws Will throw an error if the `url` argument is not a valid media\n     * element.\n     */\n    load(url, container, peaks, preload) {\n        const media = document.createElement(this.mediaType);\n        media.controls = this.params.mediaControls;\n        media.autoplay = this.params.autoplay || false;\n        media.preload = preload == null ? 'auto' : preload;\n        media.src = url;\n        media.style.width = '100%';\n\n        const prevMedia = container.querySelector(this.mediaType);\n        if (prevMedia) {\n            container.removeChild(prevMedia);\n        }\n        container.appendChild(media);\n\n        this._load(media, peaks);\n    }\n\n    /**\n     * Load existing media element.\n     *\n     * @param {HTMLMediaElement} elt HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     */\n    loadElt(elt, peaks) {\n        elt.controls = this.params.mediaControls;\n        elt.autoplay = this.params.autoplay || false;\n\n        this._load(elt, peaks);\n    }\n\n    /**\n     * Method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @throws Will throw an error if the `media` argument is not a valid media\n     * element.\n     * @private\n     */\n    _load(media, peaks) {\n        // verify media element is valid\n        if (\n            !(media instanceof HTMLMediaElement) ||\n            typeof media.addEventListener === 'undefined'\n        ) {\n            throw new Error('media parameter is not a valid media element');\n        }\n\n        // load must be called manually on iOS, otherwise peaks won't draw\n        // until a user interaction triggers load --> 'ready' event\n        if (typeof media.load == 'function') {\n            // Resets the media element and restarts the media resource. Any\n            // pending events are discarded. How much media data is fetched is\n            // still affected by the preload attribute.\n            media.load();\n        }\n\n        this.media = media;\n        this._setupMediaListeners();\n        this.peaks = peaks;\n        this.onPlayEnd = null;\n        this.buffer = null;\n        this.isMuted = media.muted;\n        this.setPlaybackRate(this.playbackRate);\n        this.setVolume(this.volume);\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Media paused or not\n     */\n    isPaused() {\n        return !this.media || this.media.paused;\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        let duration = (this.buffer || this.media).duration;\n        if (duration >= Infinity) {\n            // streaming audio\n            duration = this.media.seekable.end(0);\n        }\n        return duration;\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} Current time\n     */\n    getCurrentTime() {\n        return this.media && this.media.currentTime;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Current position\n     */\n    getPlayedPercents() {\n        return this.getCurrentTime() / this.getDuration() || 0;\n    }\n\n    /**\n     * Get the audio source playback rate.\n     *\n     * @return {number} Playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate || this.media.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value Playback rate\n     */\n    setPlaybackRate(value) {\n        this.playbackRate = value || 1;\n        this.media.playbackRate = this.playbackRate;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     */\n    seekTo(start) {\n        if (start != null) {\n            this.media.currentTime = start;\n        }\n        this.clearPlayEnd();\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop, relative to the beginning of a clip.\n     * @emits MediaElement#play\n     * @return {Promise} Result\n     */\n    play(start, end) {\n        this.seekTo(start);\n        const promise = this.media.play();\n        end && this.setPlayEnd(end);\n\n        return promise;\n    }\n\n    /**\n     * Pauses the loaded audio.\n     *\n     * @emits MediaElement#pause\n     * @return {Promise} Result\n     */\n    pause() {\n        let promise;\n\n        if (this.media) {\n            promise = this.media.pause();\n        }\n        this.clearPlayEnd();\n\n        return promise;\n    }\n\n    /**\n     * Set the play end\n     *\n     * @private\n     * @param {number} end Where to end\n     */\n    setPlayEnd(end) {\n        this._onPlayEnd = time => {\n            if (time >= end) {\n                this.pause();\n                this.seekTo(end);\n            }\n        };\n        this.on('audioprocess', this._onPlayEnd);\n    }\n\n    /** @private */\n    clearPlayEnd() {\n        if (this._onPlayEnd) {\n            this.un('audioprocess', this._onPlayEnd);\n            this._onPlayEnd = null;\n        }\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into\n     * <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of\n     * arrays of peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.buffer) {\n            return super.getPeaks(length, first, last);\n        }\n        return this.peaks || [];\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            if (!this.media.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            return this.media.setSinkId(deviceId);\n        }\n\n        return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.volume;\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.volume = value;\n        // no need to change when it's already at that volume\n        if (this.media.volume !== this.volume) {\n            this.media.volume = this.volume;\n        }\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     *\n     */\n    destroy() {\n        this.pause();\n        this.unAll();\n        this.destroyed = true;\n\n        // cleanup media event listeners\n        Object.keys(this.mediaListeners).forEach(id => {\n            if (this.media) {\n                this.media.removeEventListener(id, this.mediaListeners[id]);\n            }\n        });\n\n        if (\n            this.params.removeMediaElementOnDestroy &&\n            this.media &&\n            this.media.parentNode\n        ) {\n            this.media.parentNode.removeChild(this.media);\n        }\n\n        this.media = null;\n    }\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/mediaelement.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 163,
    "kind": "class",
    "name": "MediaElement",
    "memberof": "src/mediaelement.js",
    "static": true,
    "longname": "src/mediaelement.js~MediaElement",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/mediaelement.js",
    "importStyle": "MediaElement",
    "description": "MediaElement backend",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/webaudio.js~WebAudio"
    ]
  },
  {
    "__docId__": 164,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#constructor",
    "access": "public",
    "description": "Construct the backend",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "WavesurferParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Wavesurfer parameters"
      }
    ]
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "params",
    "memberof": "src/mediaelement.js~MediaElement",
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#params",
    "access": "private",
    "description": null,
    "lineNumber": 16,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "media",
    "memberof": "src/mediaelement.js~MediaElement",
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#media",
    "access": "private",
    "description": "Initially a dummy media element to catch errors. Once `_load` is\ncalled, this will contain the actual `HTMLMediaElement`.",
    "lineNumber": 23,
    "ignore": true,
    "type": {
      "types": [
        "{\"currentTime\": *, \"duration\": *, \"paused\": boolean, \"playbackRate\": number, \"play\": function, \"pause\": function, \"volume\": *}"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "mediaType",
    "memberof": "src/mediaelement.js~MediaElement",
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#mediaType",
    "access": "private",
    "description": null,
    "lineNumber": 34,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "elementPosition",
    "memberof": "src/mediaelement.js~MediaElement",
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#elementPosition",
    "access": "private",
    "description": null,
    "lineNumber": 36,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "peaks",
    "memberof": "src/mediaelement.js~MediaElement",
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#peaks",
    "access": "private",
    "description": null,
    "lineNumber": 38,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "playbackRate",
    "memberof": "src/mediaelement.js~MediaElement",
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#playbackRate",
    "access": "private",
    "description": null,
    "lineNumber": 40,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "volume",
    "memberof": "src/mediaelement.js~MediaElement",
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#volume",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "member",
    "name": "isMuted",
    "memberof": "src/mediaelement.js~MediaElement",
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#isMuted",
    "access": "private",
    "description": null,
    "lineNumber": 44,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "member",
    "name": "buffer",
    "memberof": "src/mediaelement.js~MediaElement",
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#buffer",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "onPlayEnd",
    "memberof": "src/mediaelement.js~MediaElement",
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#onPlayEnd",
    "access": "private",
    "description": null,
    "lineNumber": 48,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "mediaListeners",
    "memberof": "src/mediaelement.js~MediaElement",
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#mediaListeners",
    "access": "private",
    "description": null,
    "lineNumber": 50,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "init",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#init",
    "access": "public",
    "description": "Initialise the backend, called in `wavesurfer.createBackend()`",
    "lineNumber": 56,
    "params": [],
    "return": null
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "_setupMediaListeners",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#_setupMediaListeners",
    "access": "private",
    "description": "Attach event listeners to media element.",
    "lineNumber": 64,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "createTimer",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#createTimer",
    "access": "public",
    "description": "Create a timer to provide a more precise `audioprocess` event.",
    "lineNumber": 105,
    "params": [],
    "return": null
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "load",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#load",
    "access": "public",
    "description": "Create media element with url as its source,\nand append to container element.",
    "lineNumber": 136,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "Path to media file"
      },
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": "HTML element"
      },
      {
        "nullable": null,
        "types": [
          "number[]",
          "Number.<Array[]>"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Array of peak data"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "preload",
        "description": "HTML 5 preload attribute value"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if the `url` argument is not a valid media\nelement."
      }
    ],
    "return": null
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "loadElt",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#loadElt",
    "access": "public",
    "description": "Load existing media element.",
    "lineNumber": 159,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLMediaElement"
        ],
        "spread": false,
        "optional": false,
        "name": "elt",
        "description": "HTML5 Audio or Video element"
      },
      {
        "nullable": null,
        "types": [
          "number[]",
          "Number.<Array[]>"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Array of peak data"
      }
    ],
    "return": null
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "_load",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#_load",
    "access": "private",
    "description": "Method called by both `load` (from url)\nand `loadElt` (existing media element) methods.",
    "lineNumber": 176,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLMediaElement"
        ],
        "spread": false,
        "optional": false,
        "name": "media",
        "description": "HTML5 Audio or Video element"
      },
      {
        "nullable": null,
        "types": [
          "number[]",
          "Number.<Array[]>"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Array of peak data"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if the `media` argument is not a valid media\nelement."
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "isPaused",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#isPaused",
    "access": "public",
    "description": "Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`",
    "lineNumber": 209,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Media paused or not"
    },
    "params": []
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "getDuration",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#getDuration",
    "access": "public",
    "description": "Used by `wavesurfer.getDuration()`",
    "lineNumber": 218,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Duration"
    },
    "params": []
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "getCurrentTime",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#getCurrentTime",
    "access": "public",
    "description": "Returns the current time in seconds relative to the audio-clip's\nduration.",
    "lineNumber": 236,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Current time"
    },
    "params": []
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "getPlayedPercents",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#getPlayedPercents",
    "access": "public",
    "description": "Get the position from 0 to 1",
    "lineNumber": 245,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Current position"
    },
    "params": []
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "getPlaybackRate",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#getPlaybackRate",
    "access": "public",
    "description": "Get the audio source playback rate.",
    "lineNumber": 254,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Playback rate"
    },
    "params": []
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "setPlaybackRate",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#setPlaybackRate",
    "access": "public",
    "description": "Set the audio source playback rate.",
    "lineNumber": 263,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Playback rate"
      }
    ],
    "return": null
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "seekTo",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#seekTo",
    "access": "public",
    "description": "Used by `wavesurfer.seekTo()`",
    "lineNumber": 273,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Position to start at in seconds"
      }
    ],
    "return": null
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "play",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#play",
    "access": "public",
    "description": "Plays the loaded audio region.",
    "lineNumber": 289,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Start offset in seconds, relative to the beginning\nof a clip."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "When to stop, relative to the beginning of a clip."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Result"
    },
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "MediaElement#play"
      }
    ]
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "pause",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#pause",
    "access": "public",
    "description": "Pauses the loaded audio.",
    "lineNumber": 303,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Result"
    },
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "MediaElement#pause"
      }
    ],
    "params": []
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "setPlayEnd",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#setPlayEnd",
    "access": "private",
    "description": "Set the play end",
    "lineNumber": 320,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Where to end"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "_onPlayEnd",
    "memberof": "src/mediaelement.js~MediaElement",
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#_onPlayEnd",
    "access": "private",
    "description": null,
    "lineNumber": 321,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "clearPlayEnd",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#clearPlayEnd",
    "access": "private",
    "description": null,
    "lineNumber": 331,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "getPeaks",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#getPeaks",
    "access": "public",
    "description": "Compute the max and min value of the waveform when broken into\n<length> subranges.",
    "lineNumber": 348,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "How many subranges to break the waveform into."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "first",
        "description": "First sample in the required range."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "last",
        "description": "Last sample in the required range."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]",
        "Number.<Array[]>"
      ],
      "spread": false,
      "description": "Array of 2*<length> peaks or array of\narrays of peaks consisting of (max, min) values for each subrange."
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "setSinkId",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#setSinkId",
    "access": "public",
    "description": "Set the sink id for the media player",
    "lineNumber": 362,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} A Promise that resolves to `undefined` when there\nare no errors."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": "String value representing audio device id."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A Promise that resolves to `undefined` when there\nare no errors."
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "getVolume",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#getVolume",
    "access": "public",
    "description": "Get the current volume",
    "lineNumber": 380,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "value A floating point value between 0 and 1."
    },
    "params": []
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "setVolume",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#setVolume",
    "access": "public",
    "description": "Set the audio volume",
    "lineNumber": 389,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "A floating point value between 0 and 1."
      }
    ],
    "return": null
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/mediaelement.js~MediaElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#destroy",
    "access": "public",
    "description": "This is called when wavesurfer is destroyed",
    "lineNumber": 401,
    "params": [],
    "return": null
  },
  {
    "__docId__": 210,
    "kind": "member",
    "name": "destroyed",
    "memberof": "src/mediaelement.js~MediaElement",
    "static": false,
    "longname": "src/mediaelement.js~MediaElement#destroyed",
    "access": "public",
    "description": null,
    "lineNumber": 404,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "file",
    "name": "src/peakcache.js",
    "content": "/**\n * Caches the decoded peaks data to improve rendering speed for large audio\n *\n * Is used if the option parameter `partialRender` is set to `true`\n */\nexport default class PeakCache {\n    /**\n     * Instantiate cache\n     */\n    constructor() {\n        this.clearPeakCache();\n    }\n\n    /**\n     * Empty the cache\n     */\n    clearPeakCache() {\n        /**\n         * Flat array with entries that are always in pairs to mark the\n         * beginning and end of each subrange.  This is a convenience so we can\n         * iterate over the pairs for easy set difference operations.\n         * @private\n         */\n        this.peakCacheRanges = [];\n        /**\n         * Length of the entire cachable region, used for resetting the cache\n         * when this changes (zoom events, for instance).\n         * @private\n         */\n        this.peakCacheLength = -1;\n    }\n\n    /**\n     * Add a range of peaks to the cache\n     *\n     * @param {number} length The length of the range\n     * @param {number} start The x offset of the start of the range\n     * @param {number} end The x offset of the end of the range\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    addRangeToPeakCache(length, start, end) {\n        if (length != this.peakCacheLength) {\n            this.clearPeakCache();\n            this.peakCacheLength = length;\n        }\n\n        // Return ranges that weren't in the cache before the call.\n        let uncachedRanges = [];\n        let i = 0;\n        // Skip ranges before the current start.\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] < start\n        ) {\n            i++;\n        }\n        // If |i| is even, |start| falls after an existing range.  Otherwise,\n        // |start| falls between an existing range, and the uncached region\n        // starts when we encounter the next node in |peakCacheRanges| or\n        // |end|, whichever comes first.\n        if (i % 2 == 0) {\n            uncachedRanges.push(start);\n        }\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] <= end\n        ) {\n            uncachedRanges.push(this.peakCacheRanges[i]);\n            i++;\n        }\n        // If |i| is even, |end| is after all existing ranges.\n        if (i % 2 == 0) {\n            uncachedRanges.push(end);\n        }\n\n        // Filter out the 0-length ranges.\n        uncachedRanges = uncachedRanges.filter((item, pos, arr) => {\n            if (pos == 0) {\n                return item != arr[pos + 1];\n            } else if (pos == arr.length - 1) {\n                return item != arr[pos - 1];\n            }\n            return item != arr[pos - 1] && item != arr[pos + 1];\n        });\n\n        // Merge the two ranges together, uncachedRanges will either contain\n        // wholly new points, or duplicates of points in peakCacheRanges.  If\n        // duplicates are detected, remove both and extend the range.\n        this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges);\n        this.peakCacheRanges = this.peakCacheRanges\n            .sort((a, b) => a - b)\n            .filter((item, pos, arr) => {\n                if (pos == 0) {\n                    return item != arr[pos + 1];\n                } else if (pos == arr.length - 1) {\n                    return item != arr[pos - 1];\n                }\n                return item != arr[pos - 1] && item != arr[pos + 1];\n            });\n\n        // Push the uncached ranges into an array of arrays for ease of\n        // iteration in the functions that call this.\n        const uncachedRangePairs = [];\n        for (i = 0; i < uncachedRanges.length; i += 2) {\n            uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i + 1]]);\n        }\n\n        return uncachedRangePairs;\n    }\n\n    /**\n     * For testing\n     *\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    getCacheRanges() {\n        const peakCacheRangePairs = [];\n        let i;\n        for (i = 0; i < this.peakCacheRanges.length; i += 2) {\n            peakCacheRangePairs.push([\n                this.peakCacheRanges[i],\n                this.peakCacheRanges[i + 1]\n            ]);\n        }\n        return peakCacheRangePairs;\n    }\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/peakcache.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 213,
    "kind": "class",
    "name": "PeakCache",
    "memberof": "src/peakcache.js",
    "static": true,
    "longname": "src/peakcache.js~PeakCache",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/peakcache.js",
    "importStyle": "PeakCache",
    "description": "Caches the decoded peaks data to improve rendering speed for large audio\n\nIs used if the option parameter `partialRender` is set to `true`",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 214,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/peakcache.js~PeakCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/peakcache.js~PeakCache#constructor",
    "access": "public",
    "description": "Instantiate cache",
    "lineNumber": 10
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "clearPeakCache",
    "memberof": "src/peakcache.js~PeakCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/peakcache.js~PeakCache#clearPeakCache",
    "access": "public",
    "description": "Empty the cache",
    "lineNumber": 17,
    "params": [],
    "return": null
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "peakCacheRanges",
    "memberof": "src/peakcache.js~PeakCache",
    "static": false,
    "longname": "src/peakcache.js~PeakCache#peakCacheRanges",
    "access": "private",
    "description": "Flat array with entries that are always in pairs to mark the\nbeginning and end of each subrange.  This is a convenience so we can\niterate over the pairs for easy set difference operations.",
    "lineNumber": 24,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "peakCacheLength",
    "memberof": "src/peakcache.js~PeakCache",
    "static": false,
    "longname": "src/peakcache.js~PeakCache#peakCacheLength",
    "access": "private",
    "description": "Length of the entire cachable region, used for resetting the cache\nwhen this changes (zoom events, for instance).",
    "lineNumber": 30,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "addRangeToPeakCache",
    "memberof": "src/peakcache.js~PeakCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/peakcache.js~PeakCache#addRangeToPeakCache",
    "access": "public",
    "description": "Add a range of peaks to the cache",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "The length of the range"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The x offset of the start of the range"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "The x offset of the end of the range"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number.<Array[]>"
      ],
      "spread": false,
      "description": "Array with arrays of numbers"
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "getCacheRanges",
    "memberof": "src/peakcache.js~PeakCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/peakcache.js~PeakCache#getCacheRanges",
    "access": "public",
    "description": "For testing",
    "lineNumber": 116,
    "return": {
      "nullable": null,
      "types": [
        "Number.<Array[]>"
      ],
      "spread": false,
      "description": "Array with arrays of numbers"
    },
    "params": []
  },
  {
    "__docId__": 223,
    "kind": "file",
    "name": "src/plugin/cursor.js",
    "content": "/**\n * @typedef {Object} CursorPluginParams\n * @property {?boolean} deferInit Set to true to stop auto init in `addPlugin()`\n * @property {boolean} hideOnBlur=true Hide the cursor when the mouse leaves the\n * waveform\n * @property {string} width='1px' The width of the cursor\n * @property {string} color='black' The color of the cursor\n * @property {string} opacity='0.25' The opacity of the cursor\n * @property {string} style='solid' The border style of the cursor\n * @property {number} zIndex=3 The z-index of the cursor element\n * @property {object} customStyle An object with custom styles which are applied\n * to the cursor element\n * @property {boolean} showTime=false Show the time on the cursor.\n * @property {object} customShowTimeStyle An object with custom styles which are\n * applied to the cursor time element.\n * @property {string} followCursorY=false Use `true` to make the time on\n * the cursor follow the x and the y-position of the mouse. Use `false` to make the\n * it only follow the x-position of the mouse.\n * @property {function} formatTimeCallback Formats the timestamp on the cursor.\n */\n\n/**\n * Displays a thin line at the position of the cursor on the waveform.\n *\n * @implements {PluginClass}\n * @extends {Observer}\n * @example\n * // es6\n * import CursorPlugin from 'wavesurfer.cursor.js';\n *\n * // commonjs\n * var CursorPlugin = require('wavesurfer.cursor.js');\n *\n * // if you are using <script> tags\n * var CursorPlugin = window.WaveSurfer.cursor;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     CursorPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class CursorPlugin {\n    /**\n     * Cursor plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param  {CursorPluginParams} params parameters use to initialise the\n     * plugin\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    static create(params) {\n        return {\n            name: 'cursor',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            staticProps: {},\n            instance: CursorPlugin\n        };\n    }\n\n    /**\n     * @type {CursorPluginParams}\n     */\n    defaultParams = {\n        hideOnBlur: true,\n        width: '1px',\n        color: 'black',\n        opacity: '0.25',\n        style: 'solid',\n        zIndex: 4,\n        customStyle: {},\n        customShowTimeStyle: {},\n        showTime: false,\n        followCursorY: false,\n        formatTimeCallback: null\n    };\n\n    /**\n     * @private\n     * @param {object} e Mouse move event\n     */\n    _onMousemove = e => {\n        const bbox = this.wavesurfer.container.getBoundingClientRect();\n        let y = 0;\n        let x = e.clientX - bbox.left;\n        let flip = bbox.right < e.clientX + this.outerWidth(this.displayTime);\n\n        if (this.params.showTime && this.params.followCursorY) {\n            // follow y-position of the mouse\n            y = e.clientY - (bbox.top + bbox.height / 2);\n        }\n\n        this.updateCursorPosition(x, y, flip);\n    };\n\n    /**\n     * @private\n     * @returns {void}\n     */\n    _onMouseenter = () => this.showCursor();\n\n    /**\n     * @private\n     * @returns {void}\n     */\n    _onMouseleave = () => this.hideCursor();\n\n    /**\n     * Construct the plugin class. You probably want to use `CursorPlugin.create`\n     * instead.\n     *\n     * @param {CursorPluginParams} params Plugin parameters\n     * @param {object} ws Wavesurfer instance\n     */\n    constructor(params, ws) {\n        /** @private */\n        this.wavesurfer = ws;\n        /** @private */\n        this.style = ws.util.style;\n        /**\n         * The cursor HTML element\n         *\n         * @type {?HTMLElement}\n         */\n        this.cursor = null;\n        /**\n         * displays the time next to the cursor\n         *\n         * @type {?HTMLElement}\n         */\n        this.showTime = null;\n        /**\n         * The html container that will display the time\n         *\n         * @type {?HTMLElement}\n         */\n        this.displayTime = null;\n        /** @private */\n        this.params = ws.util.extend({}, this.defaultParams, params);\n    }\n\n    /**\n     * Initialise the plugin (used by the Plugin API)\n     */\n    init() {\n        this.wrapper = this.wavesurfer.container;\n        this.cursor = this.wrapper.appendChild(\n            this.style(\n                document.createElement('cursor'),\n                this.wavesurfer.util.extend(\n                    {\n                        position: 'absolute',\n                        zIndex: this.params.zIndex,\n                        left: 0,\n                        top: 0,\n                        bottom: 0,\n                        width: '0',\n                        display: 'flex',\n                        borderRightStyle: this.params.style,\n                        borderRightWidth: this.params.width,\n                        borderRightColor: this.params.color,\n                        opacity: this.params.opacity,\n                        pointerEvents: 'none'\n                    },\n                    this.params.customStyle\n                )\n            )\n        );\n        if (this.params.showTime) {\n            this.showTime = this.wrapper.appendChild(\n                this.style(\n                    document.createElement('showTitle'),\n                    this.wavesurfer.util.extend(\n                        {\n                            position: 'absolute',\n                            zIndex: this.params.zIndex,\n                            left: 0,\n                            top: 0,\n                            bottom: 0,\n                            width: 'auto',\n                            display: 'flex',\n                            opacity: this.params.opacity,\n                            pointerEvents: 'none',\n                            height: '100%'\n                        },\n                        this.params.customStyle\n                    )\n                )\n            );\n            this.displayTime = this.showTime.appendChild(\n                this.style(\n                    document.createElement('div'),\n                    this.wavesurfer.util.extend(\n                        {\n                            display: 'inline',\n                            pointerEvents: 'none',\n                            margin: 'auto',\n                            visibility: 'hidden' // initial value will be hidden just for measuring purpose\n                        },\n                        this.params.customShowTimeStyle\n                    )\n                )\n            );\n            // initial value to measure display width\n            this.displayTime.innerHTML = this.formatTime(0);\n        }\n\n        this.wrapper.addEventListener('mousemove', this._onMousemove);\n        if (this.params.hideOnBlur) {\n            // ensure elements are hidden initially\n            this.hideCursor();\n            this.wrapper.addEventListener('mouseenter', this._onMouseenter);\n            this.wrapper.addEventListener('mouseleave', this._onMouseleave);\n        }\n    }\n\n    /**\n     * Destroy the plugin (used by the Plugin API)\n     */\n    destroy() {\n        if (this.params.showTime) {\n            this.cursor.parentNode.removeChild(this.showTime);\n        }\n        this.cursor.parentNode.removeChild(this.cursor);\n        this.wrapper.removeEventListener('mousemove', this._onMousemove);\n        if (this.params.hideOnBlur) {\n            this.wrapper.removeEventListener('mouseenter', this._onMouseenter);\n            this.wrapper.removeEventListener('mouseleave', this._onMouseleave);\n        }\n    }\n\n    /**\n     * Update the cursor position\n     *\n     * @param {number} xpos The x offset of the cursor in pixels\n     * @param {number} ypos The y offset of the cursor in pixels\n     * @param {boolean} flip Flag to flip duration text from right to left\n     */\n    updateCursorPosition(xpos, ypos, flip = false) {\n        this.style(this.cursor, {\n            left: `${xpos}px`\n        });\n        if (this.params.showTime) {\n            const duration = this.wavesurfer.getDuration();\n            const elementWidth =\n                this.wavesurfer.drawer.width /\n                this.wavesurfer.params.pixelRatio;\n            const scrollWidth = this.wavesurfer.drawer.getScrollX();\n\n            const scrollTime =\n                (duration / this.wavesurfer.drawer.width) * scrollWidth;\n\n            const timeValue =\n                Math.max(0, (xpos / elementWidth) * duration) + scrollTime;\n            const formatValue = this.formatTime(timeValue);\n            if (flip) {\n                const textOffset = this.outerWidth(this.displayTime);\n                xpos -= textOffset;\n            }\n            this.style(this.showTime, {\n                left: `${xpos}px`,\n                top: `${ypos}px`,\n                visibility: 'visible'\n            });\n            this.displayTime.innerHTML = `${formatValue}`;\n        }\n    }\n\n    /**\n     * Show the cursor\n     */\n    showCursor() {\n        this.style(this.cursor, {\n            display: 'flex'\n        });\n        if (this.params.showTime) {\n            this.style(this.showTime, {\n                display: 'flex'\n            });\n        }\n    }\n\n    /**\n     * Hide the cursor\n     */\n    hideCursor() {\n        this.style(this.cursor, {\n            display: 'none'\n        });\n        if (this.params.showTime) {\n            this.style(this.showTime, {\n                display: 'none'\n            });\n        }\n    }\n\n    /**\n     * Format the timestamp for `cursorTime`.\n     *\n     * @param {number} cursorTime Time in seconds\n     * @returns {string} Formatted timestamp\n     */\n    formatTime(cursorTime) {\n        cursorTime = isNaN(cursorTime) ? 0 : cursorTime;\n\n        if (this.params.formatTimeCallback) {\n            return this.params.formatTimeCallback(cursorTime);\n        }\n        return [cursorTime].map(time =>\n            [\n                Math.floor((time % 3600) / 60), // minutes\n                ('00' + Math.floor(time % 60)).slice(-2), // seconds\n                ('000' + Math.floor((time % 1) * 1000)).slice(-3) // milliseconds\n            ].join(':')\n        );\n    }\n\n    /**\n     * Get outer width of given element.\n     *\n     * @param {DOM} element DOM Element\n     * @returns {number} outer width\n     */\n    outerWidth(element) {\n        if (!element) return 0;\n\n        let width = element.offsetWidth;\n        let style = getComputedStyle(element);\n\n        width += parseInt(style.marginLeft + style.marginRight);\n        return width;\n    }\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/plugin/cursor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 224,
    "kind": "typedef",
    "name": "CursorPluginParams",
    "memberof": "src/plugin/cursor.js",
    "static": true,
    "longname": "src/plugin/cursor.js~CursorPluginParams",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "deferInit",
        "description": "Set to true to stop auto init in `addPlugin()`"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "hideOnBlur",
        "description": "Hide the cursor when the mouse leaves the\nwaveform"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'1px'",
        "defaultRaw": "'1px'",
        "name": "width",
        "description": "The width of the cursor"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'black'",
        "defaultRaw": "'black'",
        "name": "color",
        "description": "The color of the cursor"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'0.25'",
        "defaultRaw": "'0.25'",
        "name": "opacity",
        "description": "The opacity of the cursor"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'solid'",
        "defaultRaw": "'solid'",
        "name": "style",
        "description": "The border style of the cursor"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "3",
        "defaultRaw": 3,
        "name": "zIndex",
        "description": "The z-index of the cursor element"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "customStyle",
        "description": "An object with custom styles which are applied\nto the cursor element"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "showTime",
        "description": "Show the time on the cursor."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "customShowTimeStyle",
        "description": "An object with custom styles which are\napplied to the cursor time element."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "followCursorY",
        "description": "Use `true` to make the time on\nthe cursor follow the x and the y-position of the mouse. Use `false` to make the\nit only follow the x-position of the mouse."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "formatTimeCallback",
        "description": "Formats the timestamp on the cursor."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CursorPluginParams"
    }
  },
  {
    "__docId__": 225,
    "kind": "class",
    "name": "CursorPlugin",
    "memberof": "src/plugin/cursor.js",
    "static": true,
    "longname": "src/plugin/cursor.js~CursorPlugin",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/plugin/cursor.js",
    "importStyle": "CursorPlugin",
    "description": "Displays a thin line at the position of the cursor on the waveform.",
    "examples": [
      "// es6\nimport CursorPlugin from 'wavesurfer.cursor.js';\n\n// commonjs\nvar CursorPlugin = require('wavesurfer.cursor.js');\n\n// if you are using <script> tags\nvar CursorPlugin = window.WaveSurfer.cursor;\n\n// ... initialising wavesurfer with the plugin\nvar wavesurfer = WaveSurfer.create({\n  // wavesurfer options ...\n  plugins: [\n    CursorPlugin.create({\n      // plugin options ...\n    })\n  ]\n});"
    ],
    "lineNumber": 47,
    "interface": false,
    "extends": [
      "Observer"
    ],
    "implements": [
      "PluginClass"
    ]
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "create",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugin/cursor.js~CursorPlugin.create",
    "access": "public",
    "description": "Cursor plugin definition factory\n\nThis function must be used to create a plugin definition which can be\nused by wavesurfer to correctly instantiate the plugin.",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "CursorPluginParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "parameters use to initialise the\nplugin"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PluginDefinition"
      ],
      "spread": false,
      "description": "an object representing the plugin"
    }
  },
  {
    "__docId__": 227,
    "kind": "member",
    "name": "defaultParams",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#defaultParams",
    "access": "public",
    "description": "",
    "lineNumber": 71,
    "type": {
      "nullable": null,
      "types": [
        "CursorPluginParams"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 228,
    "kind": "member",
    "name": "_onMousemove",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#_onMousemove",
    "access": "private",
    "description": "",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "Mouse move event"
      }
    ],
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "member",
    "name": "_onMouseenter",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#_onMouseenter",
    "access": "private",
    "description": "",
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "member",
    "name": "_onMouseleave",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#_onMouseleave",
    "access": "private",
    "description": "",
    "lineNumber": 113,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#constructor",
    "access": "public",
    "description": "Construct the plugin class. You probably want to use `CursorPlugin.create`\ninstead.",
    "lineNumber": 122,
    "params": [
      {
        "nullable": null,
        "types": [
          "CursorPluginParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Plugin parameters"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ws",
        "description": "Wavesurfer instance"
      }
    ]
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "wavesurfer",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#wavesurfer",
    "access": "private",
    "description": null,
    "lineNumber": 124,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "style",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#style",
    "access": "private",
    "description": null,
    "lineNumber": 126,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "cursor",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#cursor",
    "access": "public",
    "description": "The cursor HTML element",
    "lineNumber": 132,
    "type": {
      "nullable": true,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 235,
    "kind": "member",
    "name": "showTime",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#showTime",
    "access": "public",
    "description": "displays the time next to the cursor",
    "lineNumber": 138,
    "type": {
      "nullable": true,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 236,
    "kind": "member",
    "name": "displayTime",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#displayTime",
    "access": "public",
    "description": "The html container that will display the time",
    "lineNumber": 144,
    "type": {
      "nullable": true,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "params",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#params",
    "access": "private",
    "description": null,
    "lineNumber": 146,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "init",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#init",
    "access": "public",
    "description": "Initialise the plugin (used by the Plugin API)",
    "lineNumber": 152,
    "params": [],
    "return": null
  },
  {
    "__docId__": 239,
    "kind": "member",
    "name": "wrapper",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#wrapper",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#destroy",
    "access": "public",
    "description": "Destroy the plugin (used by the Plugin API)",
    "lineNumber": 227,
    "params": [],
    "return": null
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "updateCursorPosition",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#updateCursorPosition",
    "access": "public",
    "description": "Update the cursor position",
    "lineNumber": 246,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "xpos",
        "description": "The x offset of the cursor in pixels"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ypos",
        "description": "The y offset of the cursor in pixels"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flip",
        "description": "Flag to flip duration text from right to left"
      }
    ],
    "return": null
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "showCursor",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#showCursor",
    "access": "public",
    "description": "Show the cursor",
    "lineNumber": 279,
    "params": [],
    "return": null
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "hideCursor",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#hideCursor",
    "access": "public",
    "description": "Hide the cursor",
    "lineNumber": 293,
    "params": [],
    "return": null
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "formatTime",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#formatTime",
    "access": "public",
    "description": "Format the timestamp for `cursorTime`.",
    "lineNumber": 310,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Formatted timestamp"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "cursorTime",
        "description": "Time in seconds"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Formatted timestamp"
    }
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "outerWidth",
    "memberof": "src/plugin/cursor.js~CursorPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/cursor.js~CursorPlugin#outerWidth",
    "access": "public",
    "description": "Get outer width of given element.",
    "lineNumber": 331,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} outer width"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DOM"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "DOM Element"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "outer width"
    }
  },
  {
    "__docId__": 249,
    "kind": "file",
    "name": "src/plugin/elan.js",
    "content": "/**\n * @typedef {Object} ElanPluginParams\n * @property {string|HTMLElement} container CSS selector or HTML element where\n * the ELAN information should be rendered.\n * @property {string} url The location of ELAN XML data\n * @property {?boolean} deferInit Set to true to manually call\n * @property {?Object} tiers If set only shows the data tiers with the `TIER_ID`\n * in this map.\n */\n\n/**\n * Downloads and renders ELAN audio transcription documents alongside the\n * waveform.\n *\n * @implements {PluginClass}\n * @extends {Observer}\n * @example\n * // es6\n * import ElanPlugin from 'wavesurfer.elan.js';\n *\n * // commonjs\n * var ElanPlugin = require('wavesurfer.elan.js');\n *\n * // if you are using <script> tags\n * var ElanPlugin = window.WaveSurfer.elan;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     ElanPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class ElanPlugin {\n    /**\n     * Elan plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param  {ElanPluginParams} params parameters use to initialise the plugin\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    static create(params) {\n        return {\n            name: 'elan',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            instance: ElanPlugin\n        };\n    }\n\n    Types = {\n        ALIGNABLE_ANNOTATION: 'ALIGNABLE_ANNOTATION',\n        REF_ANNOTATION: 'REF_ANNOTATION'\n    };\n\n    constructor(params, ws) {\n        this.data = null;\n        this.params = params;\n        this.container =\n            'string' == typeof params.container\n                ? document.querySelector(params.container)\n                : params.container;\n\n        if (!this.container) {\n            throw Error('No container for ELAN');\n        }\n    }\n\n    init() {\n        this.bindClick();\n\n        if (this.params.url) {\n            this.load(this.params.url);\n        }\n    }\n\n    destroy() {\n        this.container.removeEventListener('click', this._onClick);\n        this.container.removeChild(this.table);\n    }\n\n    load(url) {\n        this.loadXML(url, xml => {\n            this.data = this.parseElan(xml);\n            this.render();\n            this.fireEvent('ready', this.data);\n        });\n    }\n\n    loadXML(url, callback) {\n        const xhr = new XMLHttpRequest();\n        xhr.open('GET', url, true);\n        xhr.responseType = 'document';\n        xhr.send();\n        xhr.addEventListener('load', e => {\n            callback && callback(e.target.responseXML);\n        });\n    }\n\n    parseElan(xml) {\n        const _forEach = Array.prototype.forEach;\n        const _map = Array.prototype.map;\n\n        const data = {\n            media: {},\n            timeOrder: {},\n            tiers: [],\n            annotations: {},\n            alignableAnnotations: []\n        };\n\n        const header = xml.querySelector('HEADER');\n        const inMilliseconds =\n            header.getAttribute('TIME_UNITS') == 'milliseconds';\n        const media = header.querySelector('MEDIA_DESCRIPTOR');\n        data.media.url = media.getAttribute('MEDIA_URL');\n        data.media.type = media.getAttribute('MIME_TYPE');\n\n        const timeSlots = xml.querySelectorAll('TIME_ORDER TIME_SLOT');\n        const timeOrder = {};\n        _forEach.call(timeSlots, slot => {\n            let value = parseFloat(slot.getAttribute('TIME_VALUE'));\n            // If in milliseconds, convert to seconds with rounding\n            if (inMilliseconds) {\n                value = Math.round(value * 1e2) / 1e5;\n            }\n            timeOrder[slot.getAttribute('TIME_SLOT_ID')] = value;\n        });\n\n        data.tiers = _map.call(xml.querySelectorAll('TIER'), tier => ({\n            id: tier.getAttribute('TIER_ID'),\n            linguisticTypeRef: tier.getAttribute('LINGUISTIC_TYPE_REF'),\n            defaultLocale: tier.getAttribute('DEFAULT_LOCALE'),\n            annotations: _map.call(\n                tier.querySelectorAll('REF_ANNOTATION, ALIGNABLE_ANNOTATION'),\n                node => {\n                    const annot = {\n                        type: node.nodeName,\n                        id: node.getAttribute('ANNOTATION_ID'),\n                        ref: node.getAttribute('ANNOTATION_REF'),\n                        value: node\n                            .querySelector('ANNOTATION_VALUE')\n                            .textContent.trim()\n                    };\n\n                    if (this.Types.ALIGNABLE_ANNOTATION == annot.type) {\n                        // Add start & end to alignable annotation\n                        annot.start =\n                            timeOrder[node.getAttribute('TIME_SLOT_REF1')];\n                        annot.end =\n                            timeOrder[node.getAttribute('TIME_SLOT_REF2')];\n                        // Add to the list of alignable annotations\n                        data.alignableAnnotations.push(annot);\n                    }\n\n                    // Additionally, put into the flat map of all annotations\n                    data.annotations[annot.id] = annot;\n\n                    return annot;\n                }\n            )\n        }));\n\n        // Create JavaScript references between annotations\n        data.tiers.forEach(tier => {\n            tier.annotations.forEach(annot => {\n                if (null != annot.ref) {\n                    annot.reference = data.annotations[annot.ref];\n                }\n            });\n        });\n\n        // Sort alignable annotations by start & end\n        data.alignableAnnotations.sort((a, b) => {\n            let d = a.start - b.start;\n            if (d == 0) {\n                d = b.end - a.end;\n            }\n            return d;\n        });\n\n        data.length = data.alignableAnnotations.length;\n\n        return data;\n    }\n\n    render() {\n        // apply tiers filter\n        let tiers = this.data.tiers;\n        if (this.params.tiers) {\n            tiers = tiers.filter(tier => tier.id in this.params.tiers);\n        }\n\n        // denormalize references to alignable annotations\n        const backRefs = {};\n        let indeces = {};\n        tiers.forEach((tier, index) => {\n            tier.annotations.forEach(annot => {\n                if (\n                    annot.reference &&\n                    annot.reference.type == this.Types.ALIGNABLE_ANNOTATION\n                ) {\n                    if (!(annot.reference.id in backRefs)) {\n                        backRefs[annot.ref] = {};\n                    }\n                    backRefs[annot.ref][index] = annot;\n                    indeces[index] = true;\n                }\n            });\n        });\n        indeces = Object.keys(indeces).sort();\n\n        this.renderedAlignable = this.data.alignableAnnotations.filter(\n            alignable => backRefs[alignable.id]\n        );\n\n        // table\n        const table = (this.table = document.createElement('table'));\n        table.className = 'wavesurfer-annotations';\n\n        // head\n        const thead = document.createElement('thead');\n        const headRow = document.createElement('tr');\n        thead.appendChild(headRow);\n        table.appendChild(thead);\n        const th = document.createElement('th');\n        th.textContent = 'Time';\n        th.className = 'wavesurfer-time';\n        headRow.appendChild(th);\n        indeces.forEach(index => {\n            const tier = tiers[index];\n            const th = document.createElement('th');\n            th.className = 'wavesurfer-tier-' + tier.id;\n            th.textContent = tier.id;\n            th.style.width = this.params.tiers[tier.id];\n            headRow.appendChild(th);\n        });\n\n        // body\n        const tbody = document.createElement('tbody');\n        table.appendChild(tbody);\n        this.renderedAlignable.forEach(alignable => {\n            const row = document.createElement('tr');\n            row.id = 'wavesurfer-alignable-' + alignable.id;\n            tbody.appendChild(row);\n\n            const td = document.createElement('td');\n            td.className = 'wavesurfer-time';\n            td.textContent =\n                alignable.start.toFixed(1) + '–' + alignable.end.toFixed(1);\n            row.appendChild(td);\n\n            const backRef = backRefs[alignable.id];\n            indeces.forEach(index => {\n                const tier = tiers[index];\n                const td = document.createElement('td');\n                const annotation = backRef[index];\n                if (annotation) {\n                    td.id = 'wavesurfer-annotation-' + annotation.id;\n                    td.dataset.ref = alignable.id;\n                    td.dataset.start = alignable.start;\n                    td.dataset.end = alignable.end;\n                    td.textContent = annotation.value;\n                }\n                td.className = 'wavesurfer-tier-' + tier.id;\n                row.appendChild(td);\n            });\n        });\n\n        this.container.innerHTML = '';\n        this.container.appendChild(table);\n    }\n\n    bindClick() {\n        this._onClick = e => {\n            const ref = e.target.dataset.ref;\n            if (null != ref) {\n                const annot = this.data.annotations[ref];\n                if (annot) {\n                    this.fireEvent('select', annot.start, annot.end);\n                }\n            }\n        };\n        this.container.addEventListener('click', this._onClick);\n    }\n\n    getRenderedAnnotation(time) {\n        let result;\n        this.renderedAlignable.some(annotation => {\n            if (annotation.start <= time && annotation.end >= time) {\n                result = annotation;\n                return true;\n            }\n            return false;\n        });\n        return result;\n    }\n\n    getAnnotationNode(annotation) {\n        return document.getElementById('wavesurfer-alignable-' + annotation.id);\n    }\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/plugin/elan.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 250,
    "kind": "typedef",
    "name": "ElanPluginParams",
    "memberof": "src/plugin/elan.js",
    "static": true,
    "longname": "src/plugin/elan.js~ElanPluginParams",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string",
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": "CSS selector or HTML element where\nthe ELAN information should be rendered."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The location of ELAN XML data"
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "deferInit",
        "description": "Set to true to manually call"
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "tiers",
        "description": "If set only shows the data tiers with the `TIER_ID`\nin this map."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ElanPluginParams"
    }
  },
  {
    "__docId__": 251,
    "kind": "class",
    "name": "ElanPlugin",
    "memberof": "src/plugin/elan.js",
    "static": true,
    "longname": "src/plugin/elan.js~ElanPlugin",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/plugin/elan.js",
    "importStyle": "ElanPlugin",
    "description": "Downloads and renders ELAN audio transcription documents alongside the\nwaveform.",
    "examples": [
      "// es6\nimport ElanPlugin from 'wavesurfer.elan.js';\n\n// commonjs\nvar ElanPlugin = require('wavesurfer.elan.js');\n\n// if you are using <script> tags\nvar ElanPlugin = window.WaveSurfer.elan;\n\n// ... initialising wavesurfer with the plugin\nvar wavesurfer = WaveSurfer.create({\n  // wavesurfer options ...\n  plugins: [\n    ElanPlugin.create({\n      // plugin options ...\n    })\n  ]\n});"
    ],
    "lineNumber": 37,
    "interface": false,
    "extends": [
      "Observer"
    ],
    "implements": [
      "PluginClass"
    ]
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "create",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugin/elan.js~ElanPlugin.create",
    "access": "public",
    "description": "Elan plugin definition factory\n\nThis function must be used to create a plugin definition which can be\nused by wavesurfer to correctly instantiate the plugin.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "ElanPluginParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "parameters use to initialise the plugin"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PluginDefinition"
      ],
      "spread": false,
      "description": "an object representing the plugin"
    }
  },
  {
    "__docId__": 253,
    "kind": "member",
    "name": "Types",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#Types",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true
  },
  {
    "__docId__": 255,
    "kind": "member",
    "name": "data",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#data",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "member",
    "name": "params",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#params",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "container",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#container",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "init",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#init",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "load",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#load",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "loadXML",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#loadXML",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "parseElan",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#parseElan",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [
      {
        "name": "xml",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "render",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#render",
    "access": "public",
    "description": null,
    "lineNumber": 192,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 265,
    "kind": "member",
    "name": "renderedAlignable",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#renderedAlignable",
    "access": "public",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "bindClick",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#bindClick",
    "access": "public",
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 267,
    "kind": "member",
    "name": "_onClick",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#_onClick",
    "access": "private",
    "description": null,
    "lineNumber": 280,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "getRenderedAnnotation",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#getRenderedAnnotation",
    "access": "public",
    "description": null,
    "lineNumber": 292,
    "undocument": true,
    "params": [
      {
        "name": "time",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "getAnnotationNode",
    "memberof": "src/plugin/elan.js~ElanPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/elan.js~ElanPlugin#getAnnotationNode",
    "access": "public",
    "description": null,
    "lineNumber": 304,
    "undocument": true,
    "params": [
      {
        "name": "annotation",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "file",
    "name": "src/plugin/mediasession.js",
    "content": "/*global MediaMetadata*/\n\n/**\n * @typedef {Object} MediaSessionPluginParams\n * @property {MediaMetadata} metadata A MediaMetadata object: a representation\n * of the metadata associated with a MediaSession that can be used by user agents\n * to provide a customized user interface.\n * @property {?boolean} deferInit Set to true to manually call\n * `initPlugin('mediasession')`\n */\n\n/**\n * Visualize MediaSession information for a wavesurfer instance.\n *\n * @implements {PluginClass}\n * @extends {Observer}\n * @example\n * // es6\n * import MediaSessionPlugin from 'wavesurfer.mediasession.js';\n *\n * // commonjs\n * var MediaSessionPlugin = require('wavesurfer.mediasession.js');\n *\n * // if you are using <script> tags\n * var MediaSessionPlugin = window.WaveSurfer.mediasession;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     MediaSessionPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class MediaSessionPlugin {\n    /**\n     * MediaSession plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param  {MediaSessionPluginParams} params parameters use to initialise the plugin\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    static create(params) {\n        return {\n            name: 'mediasession',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            instance: MediaSessionPlugin\n        };\n    }\n\n    constructor(params, ws) {\n        this.params = params;\n        this.wavesurfer = ws;\n\n        if ('mediaSession' in navigator) {\n            // update metadata\n            this.metadata = this.params.metadata;\n            this.update();\n\n            // update metadata when playback starts\n            this.wavesurfer.on('play', () => {\n                this.update();\n            });\n\n            // set playback action handlers\n            navigator.mediaSession.setActionHandler('play', () => {\n                this.wavesurfer.play();\n            });\n            navigator.mediaSession.setActionHandler('pause', () => {\n                this.wavesurfer.playPause();\n            });\n            navigator.mediaSession.setActionHandler('seekbackward', () => {\n                this.wavesurfer.skipBackward();\n            });\n            navigator.mediaSession.setActionHandler('seekforward', () => {\n                this.wavesurfer.skipForward();\n            });\n        }\n    }\n\n    init() {}\n\n    destroy() {}\n\n    update() {\n        if (typeof MediaMetadata === typeof Function) {\n            // set metadata\n            navigator.mediaSession.metadata = new MediaMetadata(this.metadata);\n        }\n    }\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/plugin/mediasession.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 271,
    "kind": "typedef",
    "name": "MediaSessionPluginParams",
    "memberof": "src/plugin/mediasession.js",
    "static": true,
    "longname": "src/plugin/mediasession.js~MediaSessionPluginParams",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "MediaMetadata"
        ],
        "spread": false,
        "optional": false,
        "name": "metadata",
        "description": "A MediaMetadata object: a representation\nof the metadata associated with a MediaSession that can be used by user agents\nto provide a customized user interface."
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "deferInit",
        "description": "Set to true to manually call\n`initPlugin('mediasession')`"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "MediaSessionPluginParams"
    }
  },
  {
    "__docId__": 272,
    "kind": "class",
    "name": "MediaSessionPlugin",
    "memberof": "src/plugin/mediasession.js",
    "static": true,
    "longname": "src/plugin/mediasession.js~MediaSessionPlugin",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/plugin/mediasession.js",
    "importStyle": "MediaSessionPlugin",
    "description": "Visualize MediaSession information for a wavesurfer instance.",
    "examples": [
      "// es6\nimport MediaSessionPlugin from 'wavesurfer.mediasession.js';\n\n// commonjs\nvar MediaSessionPlugin = require('wavesurfer.mediasession.js');\n\n// if you are using <script> tags\nvar MediaSessionPlugin = window.WaveSurfer.mediasession;\n\n// ... initialising wavesurfer with the plugin\nvar wavesurfer = WaveSurfer.create({\n  // wavesurfer options ...\n  plugins: [\n    MediaSessionPlugin.create({\n      // plugin options ...\n    })\n  ]\n});"
    ],
    "lineNumber": 37,
    "interface": false,
    "extends": [
      "Observer"
    ],
    "implements": [
      "PluginClass"
    ]
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "create",
    "memberof": "src/plugin/mediasession.js~MediaSessionPlugin",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugin/mediasession.js~MediaSessionPlugin.create",
    "access": "public",
    "description": "MediaSession plugin definition factory\n\nThis function must be used to create a plugin definition which can be\nused by wavesurfer to correctly instantiate the plugin.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "MediaSessionPluginParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "parameters use to initialise the plugin"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PluginDefinition"
      ],
      "spread": false,
      "description": "an object representing the plugin"
    }
  },
  {
    "__docId__": 274,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin/mediasession.js~MediaSessionPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/mediasession.js~MediaSessionPlugin#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true
  },
  {
    "__docId__": 275,
    "kind": "member",
    "name": "params",
    "memberof": "src/plugin/mediasession.js~MediaSessionPlugin",
    "static": false,
    "longname": "src/plugin/mediasession.js~MediaSessionPlugin#params",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "member",
    "name": "wavesurfer",
    "memberof": "src/plugin/mediasession.js~MediaSessionPlugin",
    "static": false,
    "longname": "src/plugin/mediasession.js~MediaSessionPlugin#wavesurfer",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "member",
    "name": "metadata",
    "memberof": "src/plugin/mediasession.js~MediaSessionPlugin",
    "static": false,
    "longname": "src/plugin/mediasession.js~MediaSessionPlugin#metadata",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "init",
    "memberof": "src/plugin/mediasession.js~MediaSessionPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/mediasession.js~MediaSessionPlugin#init",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/plugin/mediasession.js~MediaSessionPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/mediasession.js~MediaSessionPlugin#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "update",
    "memberof": "src/plugin/mediasession.js~MediaSessionPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/mediasession.js~MediaSessionPlugin#update",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 281,
    "kind": "file",
    "name": "src/plugin/microphone.js",
    "content": "/**\n * @typedef {Object} MicrophonePluginParams\n * @property {MediaStreamConstraints} constraints The constraints parameter is a\n * MediaStreamConstaints object with two members: video and audio, describing\n * the media types requested. Either or both must be specified.\n * @property {number} bufferSize=4096 The buffer size in units of sample-frames.\n * If specified, the bufferSize must be one of the following values: `256`,\n * `512`, `1024`, `2048`, `4096`, `8192`, `16384`\n * @property {number} numberOfInputChannels=1 Integer specifying the number of\n * channels for this node's input. Values of up to 32 are supported.\n * @property {number} numberOfOutputChannels=1 Integer specifying the number of\n * channels for this node's output.\n * @property {?boolean} deferInit Set to true to manually call\n * `initPlugin('microphone')`\n */\n\n/**\n * Visualize microphone input in a wavesurfer instance.\n *\n * @implements {PluginClass}\n * @extends {Observer}\n * @example\n * // es6\n * import MicrophonePlugin from 'wavesurfer.microphone.js';\n *\n * // commonjs\n * var MicrophonePlugin = require('wavesurfer.microphone.js');\n *\n * // if you are using <script> tags\n * var MicrophonePlugin = window.WaveSurfer.microphone;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     MicrophonePlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class MicrophonePlugin {\n    /**\n     * Microphone plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param  {MicrophonePluginParams} params parameters use to initialise the plugin\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    static create(params) {\n        return {\n            name: 'microphone',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            instance: MicrophonePlugin\n        };\n    }\n\n    constructor(params, ws) {\n        this.params = params;\n        this.wavesurfer = ws;\n\n        this.active = false;\n        this.paused = false;\n        this.browser = this.detectBrowser();\n        this.reloadBufferFunction = e => this.reloadBuffer(e);\n\n        // cross-browser getUserMedia\n        const promisifiedOldGUM = (\n            constraints,\n            successCallback,\n            errorCallback\n        ) => {\n            // get a hold of getUserMedia, if present\n            const getUserMedia =\n                navigator.getUserMedia ||\n                navigator.webkitGetUserMedia ||\n                navigator.mozGetUserMedia ||\n                navigator.msGetUserMedia;\n            // Some browsers just don't implement it - return a rejected\n            // promise with an error to keep a consistent interface\n            if (!getUserMedia) {\n                return Promise.reject(\n                    new Error('getUserMedia is not implemented in this browser')\n                );\n            }\n            // otherwise, wrap the call to the old navigator.getUserMedia with\n            // a Promise\n            return new Promise((successCallback, errorCallback) => {\n                getUserMedia.call(\n                    navigator,\n                    constraints,\n                    successCallback,\n                    errorCallback\n                );\n            });\n        };\n        // Older browsers might not implement mediaDevices at all, so we set an\n        // empty object first\n        if (navigator.mediaDevices === undefined) {\n            navigator.mediaDevices = {};\n        }\n        // Some browsers partially implement mediaDevices. We can't just assign\n        // an object with getUserMedia as it would overwrite existing\n        // properties. Here, we will just add the getUserMedia property if it's\n        // missing.\n        if (navigator.mediaDevices.getUserMedia === undefined) {\n            navigator.mediaDevices.getUserMedia = promisifiedOldGUM;\n        }\n        this.constraints = this.params.constraints || {\n            video: false,\n            audio: true\n        };\n        this.bufferSize = this.params.bufferSize || 4096;\n        this.numberOfInputChannels = this.params.numberOfInputChannels || 1;\n        this.numberOfOutputChannels = this.params.numberOfOutputChannels || 1;\n\n        this._onBackendCreated = () => {\n            // wavesurfer's AudioContext where we'll route the mic signal to\n            this.micContext = this.wavesurfer.backend.getAudioContext();\n        };\n    }\n\n    init() {\n        this.wavesurfer.on('backend-created', this._onBackendCreated);\n        if (this.wavesurfer.backend) {\n            this._onBackendCreated();\n        }\n    }\n\n    /**\n     * Destroy the microphone plugin.\n     */\n    destroy() {\n        // make sure the buffer is not redrawn during\n        // cleanup and demolition of this plugin.\n        this.paused = true;\n\n        this.wavesurfer.un('backend-created', this._onBackendCreated);\n        this.stop();\n    }\n\n    /**\n     * Allow user to select audio input device, e.g. microphone, and\n     * start the visualization.\n     */\n    start() {\n        navigator.mediaDevices\n            .getUserMedia(this.constraints)\n            .then(data => this.gotStream(data))\n            .catch(data => this.deviceError(data));\n    }\n\n    /**\n     * Pause/resume visualization.\n     */\n    togglePlay() {\n        if (!this.active) {\n            // start it first\n            this.start();\n        } else {\n            // toggle paused\n            this.paused = !this.paused;\n\n            if (this.paused) {\n                this.pause();\n            } else {\n                this.play();\n            }\n        }\n    }\n\n    /**\n     * Play visualization.\n     */\n    play() {\n        this.paused = false;\n\n        this.connect();\n    }\n\n    /**\n     * Pause visualization.\n     */\n    pause() {\n        this.paused = true;\n\n        // disconnect sources so they can be used elsewhere\n        // (eg. during audio playback)\n        this.disconnect();\n    }\n\n    /**\n     * Stop the device stream and remove any remaining waveform drawing from\n     * the wavesurfer canvas.\n     */\n    stop() {\n        if (this.active) {\n            // stop visualization and device\n            this.stopDevice();\n\n            // empty last frame\n            this.wavesurfer.empty();\n        }\n    }\n\n    /**\n     * Stop the device and the visualization.\n     */\n    stopDevice() {\n        this.active = false;\n\n        // stop visualization\n        this.disconnect();\n\n        // stop stream from device\n        if (this.stream) {\n            // MediaStream.stop is deprecated since:\n            // - Firefox 44 (https://www.fxsitecompat.com/en-US/docs/2015/mediastream-stop-has-been-deprecated/)\n            // - Chrome 45 (https://developers.google.com/web/updates/2015/07/mediastream-deprecations)\n            if (\n                (this.browser.browser === 'chrome' &&\n                    this.browser.version >= 45) ||\n                (this.browser.browser === 'firefox' &&\n                    this.browser.version >= 44) ||\n                this.browser.browser === 'edge' ||\n                this.browser.browser === 'safari'\n            ) {\n                if (this.stream.getTracks) {\n                    // note that this should not be a call\n                    this.stream.getTracks().forEach(stream => stream.stop());\n                    return;\n                }\n            }\n\n            this.stream.stop();\n        }\n    }\n\n    /**\n     * Connect the media sources that feed the visualization.\n     */\n    connect() {\n        if (this.stream !== undefined) {\n            // Create a local buffer for data to be copied to the Wavesurfer buffer for Edge\n            if (this.browser.browser === 'edge') {\n                this.localAudioBuffer = this.micContext.createBuffer(\n                    this.numberOfInputChannels,\n                    this.bufferSize,\n                    this.micContext.sampleRate\n                );\n            }\n\n            // Create an AudioNode from the stream.\n            this.mediaStreamSource = this.micContext.createMediaStreamSource(\n                this.stream\n            );\n\n            this.levelChecker = this.micContext.createScriptProcessor(\n                this.bufferSize,\n                this.numberOfInputChannels,\n                this.numberOfOutputChannels\n            );\n            this.mediaStreamSource.connect(this.levelChecker);\n\n            this.levelChecker.connect(this.micContext.destination);\n            this.levelChecker.onaudioprocess = this.reloadBufferFunction;\n        }\n    }\n\n    /**\n     * Disconnect the media sources that feed the visualization.\n     */\n    disconnect() {\n        if (this.mediaStreamSource !== undefined) {\n            this.mediaStreamSource.disconnect();\n        }\n\n        if (this.levelChecker !== undefined) {\n            this.levelChecker.disconnect();\n            this.levelChecker.onaudioprocess = undefined;\n        }\n\n        if (this.localAudioBuffer !== undefined) {\n            this.localAudioBuffer = undefined;\n        }\n    }\n\n    /**\n     * Redraw the waveform.\n     *\n     * @param {object} event Audioprocess event\n     */\n    reloadBuffer(event) {\n        if (!this.paused) {\n            this.wavesurfer.empty();\n\n            if (this.browser.browser === 'edge') {\n                // copy audio data to a local audio buffer,\n                // from https://github.com/audiojs/audio-buffer-utils\n                let channel, l;\n                for (\n                    channel = 0,\n                        l = Math.min(\n                            this.localAudioBuffer.numberOfChannels,\n                            event.inputBuffer.numberOfChannels\n                        );\n                    channel < l;\n                    channel++\n                ) {\n                    this.localAudioBuffer\n                        .getChannelData(channel)\n                        .set(event.inputBuffer.getChannelData(channel));\n                }\n\n                this.wavesurfer.loadDecodedBuffer(this.localAudioBuffer);\n            } else {\n                this.wavesurfer.loadDecodedBuffer(event.inputBuffer);\n            }\n        }\n    }\n\n    /**\n     * Audio input device is ready.\n     *\n     * @param {LocalMediaStream} stream The microphone's media stream.\n     */\n    gotStream(stream) {\n        this.stream = stream;\n        this.active = true;\n\n        // start visualization\n        this.play();\n\n        // notify listeners\n        this.fireEvent('deviceReady', stream);\n    }\n\n    /**\n     * Device error callback.\n     *\n     * @param {string} code Error message\n     */\n    deviceError(code) {\n        // notify listeners\n        this.fireEvent('deviceError', code);\n    }\n\n    /**\n     * Extract browser version out of the provided user agent string.\n     * @param {!string} uastring userAgent string.\n     * @param {!string} expr Regular expression used as match criteria.\n     * @param {!number} pos position in the version string to be returned.\n     * @return {!number} browser version.\n     */\n    extractVersion(uastring, expr, pos) {\n        const match = uastring.match(expr);\n        return match && match.length >= pos && parseInt(match[pos], 10);\n    }\n\n    /**\n     * Browser detector.\n     * @return {object} result containing browser, version and minVersion\n     *     properties.\n     */\n    detectBrowser() {\n        // Returned result object.\n        const result = {};\n        result.browser = null;\n        result.version = null;\n        result.minVersion = null;\n\n        // Non supported browser.\n        if (typeof window === 'undefined' || !window.navigator) {\n            result.browser = 'Not a supported browser.';\n            return result;\n        }\n\n        if (navigator.mozGetUserMedia) {\n            // Firefox\n            result.browser = 'firefox';\n            result.version = this.extractVersion(\n                navigator.userAgent,\n                /Firefox\\/(\\d+)\\./,\n                1\n            );\n            result.minVersion = 31;\n            return result;\n        } else if (navigator.webkitGetUserMedia) {\n            // Chrome/Chromium/Webview/Opera\n            result.browser = 'chrome';\n            result.version = this.extractVersion(\n                navigator.userAgent,\n                /Chrom(e|ium)\\/(\\d+)\\./,\n                2\n            );\n            result.minVersion = 38;\n            return result;\n        } else if (\n            navigator.mediaDevices &&\n            navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)\n        ) {\n            // Edge\n            result.browser = 'edge';\n            result.version = this.extractVersion(\n                navigator.userAgent,\n                /Edge\\/(\\d+).(\\d+)$/,\n                2\n            );\n            result.minVersion = 10547;\n            return result;\n        } else if (\n            window.RTCPeerConnection &&\n            navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)\n        ) {\n            // Safari\n            result.browser = 'safari';\n            result.minVersion = 11;\n            result.version = this.extractVersion(\n                navigator.userAgent,\n                /AppleWebKit\\/(\\d+)\\./,\n                1\n            );\n            return result;\n        }\n\n        // Non supported browser default.\n        result.browser = 'Not a supported browser.';\n        return result;\n    }\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/plugin/microphone.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 282,
    "kind": "typedef",
    "name": "MicrophonePluginParams",
    "memberof": "src/plugin/microphone.js",
    "static": true,
    "longname": "src/plugin/microphone.js~MicrophonePluginParams",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "MediaStreamConstraints"
        ],
        "spread": false,
        "optional": false,
        "name": "constraints",
        "description": "The constraints parameter is a\nMediaStreamConstaints object with two members: video and audio, describing\nthe media types requested. Either or both must be specified."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "4096",
        "defaultRaw": 4096,
        "name": "bufferSize",
        "description": "The buffer size in units of sample-frames.\nIf specified, the bufferSize must be one of the following values: `256`,\n`512`, `1024`, `2048`, `4096`, `8192`, `16384`"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "numberOfInputChannels",
        "description": "Integer specifying the number of\nchannels for this node's input. Values of up to 32 are supported."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "numberOfOutputChannels",
        "description": "Integer specifying the number of\nchannels for this node's output."
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "deferInit",
        "description": "Set to true to manually call\n`initPlugin('microphone')`"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "MicrophonePluginParams"
    }
  },
  {
    "__docId__": 283,
    "kind": "class",
    "name": "MicrophonePlugin",
    "memberof": "src/plugin/microphone.js",
    "static": true,
    "longname": "src/plugin/microphone.js~MicrophonePlugin",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/plugin/microphone.js",
    "importStyle": "MicrophonePlugin",
    "description": "Visualize microphone input in a wavesurfer instance.",
    "examples": [
      "// es6\nimport MicrophonePlugin from 'wavesurfer.microphone.js';\n\n// commonjs\nvar MicrophonePlugin = require('wavesurfer.microphone.js');\n\n// if you are using <script> tags\nvar MicrophonePlugin = window.WaveSurfer.microphone;\n\n// ... initialising wavesurfer with the plugin\nvar wavesurfer = WaveSurfer.create({\n  // wavesurfer options ...\n  plugins: [\n    MicrophonePlugin.create({\n      // plugin options ...\n    })\n  ]\n});"
    ],
    "lineNumber": 42,
    "interface": false,
    "extends": [
      "Observer"
    ],
    "implements": [
      "PluginClass"
    ]
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "create",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugin/microphone.js~MicrophonePlugin.create",
    "access": "public",
    "description": "Microphone plugin definition factory\n\nThis function must be used to create a plugin definition which can be\nused by wavesurfer to correctly instantiate the plugin.",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "MicrophonePluginParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "parameters use to initialise the plugin"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PluginDefinition"
      ],
      "spread": false,
      "description": "an object representing the plugin"
    }
  },
  {
    "__docId__": 285,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "params",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#params",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "wavesurfer",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#wavesurfer",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "active",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#active",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "paused",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#paused",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "browser",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#browser",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "reloadBufferFunction",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#reloadBufferFunction",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "member",
    "name": "constraints",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#constraints",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "bufferSize",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#bufferSize",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "member",
    "name": "numberOfInputChannels",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#numberOfInputChannels",
    "access": "public",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "member",
    "name": "numberOfOutputChannels",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#numberOfOutputChannels",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "member",
    "name": "_onBackendCreated",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#_onBackendCreated",
    "access": "private",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "member",
    "name": "micContext",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#micContext",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "init",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#init",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#destroy",
    "access": "public",
    "description": "Destroy the microphone plugin.",
    "lineNumber": 136,
    "params": [],
    "return": null
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "start",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#start",
    "access": "public",
    "description": "Allow user to select audio input device, e.g. microphone, and\nstart the visualization.",
    "lineNumber": 149,
    "params": [],
    "return": null
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "togglePlay",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#togglePlay",
    "access": "public",
    "description": "Pause/resume visualization.",
    "lineNumber": 159,
    "params": [],
    "return": null
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "play",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#play",
    "access": "public",
    "description": "Play visualization.",
    "lineNumber": 178,
    "params": [],
    "return": null
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "pause",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#pause",
    "access": "public",
    "description": "Pause visualization.",
    "lineNumber": 187,
    "params": [],
    "return": null
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "stop",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#stop",
    "access": "public",
    "description": "Stop the device stream and remove any remaining waveform drawing from\nthe wavesurfer canvas.",
    "lineNumber": 199,
    "params": [],
    "return": null
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "stopDevice",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#stopDevice",
    "access": "public",
    "description": "Stop the device and the visualization.",
    "lineNumber": 212,
    "params": [],
    "return": null
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "connect",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#connect",
    "access": "public",
    "description": "Connect the media sources that feed the visualization.",
    "lineNumber": 245,
    "params": [],
    "return": null
  },
  {
    "__docId__": 312,
    "kind": "member",
    "name": "localAudioBuffer",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#localAudioBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 249,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 313,
    "kind": "member",
    "name": "mediaStreamSource",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#mediaStreamSource",
    "access": "public",
    "description": null,
    "lineNumber": 257,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "member",
    "name": "levelChecker",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#levelChecker",
    "access": "public",
    "description": null,
    "lineNumber": 261,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "method",
    "name": "disconnect",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#disconnect",
    "access": "public",
    "description": "Disconnect the media sources that feed the visualization.",
    "lineNumber": 276,
    "params": [],
    "return": null
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "reloadBuffer",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#reloadBuffer",
    "access": "public",
    "description": "Redraw the waveform.",
    "lineNumber": 296,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Audioprocess event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "gotStream",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#gotStream",
    "access": "public",
    "description": "Audio input device is ready.",
    "lineNumber": 330,
    "params": [
      {
        "nullable": null,
        "types": [
          "LocalMediaStream"
        ],
        "spread": false,
        "optional": false,
        "name": "stream",
        "description": "The microphone's media stream."
      }
    ],
    "return": null
  },
  {
    "__docId__": 319,
    "kind": "member",
    "name": "stream",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#stream",
    "access": "public",
    "description": null,
    "lineNumber": 331,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "deviceError",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#deviceError",
    "access": "public",
    "description": "Device error callback.",
    "lineNumber": 346,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "Error message"
      }
    ],
    "return": null
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "extractVersion",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#extractVersion",
    "access": "public",
    "description": "Extract browser version out of the provided user agent string.",
    "lineNumber": 358,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "uastring",
        "description": "userAgent string."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "expr",
        "description": "Regular expression used as match criteria."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pos",
        "description": "position in the version string to be returned."
      }
    ],
    "return": {
      "nullable": false,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "browser version."
    }
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "detectBrowser",
    "memberof": "src/plugin/microphone.js~MicrophonePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/microphone.js~MicrophonePlugin#detectBrowser",
    "access": "public",
    "description": "Browser detector.",
    "lineNumber": 368,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "result containing browser, version and minVersion\n    properties."
    },
    "params": []
  },
  {
    "__docId__": 324,
    "kind": "file",
    "name": "src/plugin/minimap.js",
    "content": "/*eslint no-console: [\"error\", { allow: [\"warn\"] }] */\n/**\n * @typedef {Object} MinimapPluginParams\n * @desc Extends the `WavesurferParams` wavesurfer was initialised with\n * @property {?string|HTMLElement} container CSS selector or HTML element where\n * the map should be rendered. By default it is simply appended\n * after the waveform.\n * @property {?boolean} deferInit Set to true to manually call\n * `initPlugin('minimap')`\n */\n\n/**\n * Renders a smaller version waveform as a minimap of the main waveform.\n *\n * @implements {PluginClass}\n * @extends {Observer}\n * @example\n * // es6\n * import MinimapPlugin from 'wavesurfer.minimap.js';\n *\n * // commonjs\n * var MinimapPlugin = require('wavesurfer.minimap.js');\n *\n * // if you are using <script> tags\n * var MinimapPlugin = window.WaveSurfer.minimap;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     MinimapPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class MinimapPlugin {\n    /**\n     * Minimap plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param  {MinimapPluginParams} params parameters use to initialise the plugin\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    static create(params) {\n        return {\n            name: 'minimap',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            staticProps: {},\n            instance: MinimapPlugin\n        };\n    }\n\n    constructor(params, ws) {\n        this.params = ws.util.extend(\n            {},\n            ws.params,\n            {\n                showRegions: false,\n                showOverview: false,\n                overviewBorderColor: 'green',\n                overviewBorderSize: 2,\n                // the container should be different\n                container: false,\n                height: Math.max(Math.round(ws.params.height / 4), 20)\n            },\n            params,\n            {\n                scrollParent: false,\n                fillParent: true\n            }\n        );\n        // if container is a selector, get the element\n        if (typeof params.container === 'string') {\n            const el = document.querySelector(params.container);\n            if (!el) {\n                console.warn(\n                    `Wavesurfer minimap container ${params.container} was not found! The minimap will be automatically appended below the waveform.`\n                );\n            }\n            this.params.container = el;\n        }\n        // if no container is specified add a new element and insert it\n        if (!params.container) {\n            this.params.container = ws.util.style(\n                document.createElement('minimap'),\n                {\n                    display: 'block'\n                }\n            );\n        }\n        this.drawer = new ws.Drawer(this.params.container, this.params);\n        this.wavesurfer = ws;\n        this.util = ws.util;\n        /**\n         * Minimap needs to listen for the `ready` and `waveform-ready` events\n         * to work with the `MediaElement` backend. The moment the `ready` event\n         * is called is different (and peaks would not load).\n         *\n         * @type {string}\n         * @see https://github.com/katspaugh/wavesurfer.js/issues/736\n         */\n        this.renderEvent =\n            ws.params.backend === 'MediaElement' ? 'waveform-ready' : 'ready';\n        this.overviewRegion = null;\n\n        this.drawer.createWrapper();\n        this.createElements();\n        let isInitialised = false;\n\n        // ws ready event listener\n        this._onShouldRender = () => {\n            // only bind the events in the first run\n            if (!isInitialised) {\n                this.bindWavesurferEvents();\n                this.bindMinimapEvents();\n                isInitialised = true;\n            }\n            // if there is no such element, append it to the container (below\n            // the waveform)\n            if (!document.body.contains(this.params.container)) {\n                ws.container.insertBefore(this.params.container, null);\n            }\n\n            if (this.wavesurfer.regions && this.params.showRegions) {\n                this.regions();\n            }\n            this.render();\n        };\n\n        this._onAudioprocess = currentTime => {\n            this.drawer.progress(this.wavesurfer.backend.getPlayedPercents());\n        };\n\n        // ws seek event listener\n        this._onSeek = () =>\n            this.drawer.progress(ws.backend.getPlayedPercents());\n\n        // event listeners for the overview region\n        this._onScroll = e => {\n            if (!this.draggingOverview) {\n                this.moveOverviewRegion(e.target.scrollLeft / this.ratio);\n            }\n        };\n        this._onMouseover = e => {\n            if (this.draggingOverview) {\n                this.draggingOverview = false;\n            }\n        };\n        let prevWidth = 0;\n        this._onResize = ws.util.debounce(() => {\n            if (prevWidth != this.drawer.wrapper.clientWidth) {\n                prevWidth = this.drawer.wrapper.clientWidth;\n                this.render();\n                this.drawer.progress(\n                    this.wavesurfer.backend.getPlayedPercents()\n                );\n            }\n        });\n        this._onZoom = e => {\n            this.render();\n        };\n        this.wavesurfer.on('zoom', this._onZoom);\n    }\n\n    init() {\n        if (this.wavesurfer.isReady) {\n            this._onShouldRender();\n        }\n        this.wavesurfer.on(this.renderEvent, this._onShouldRender);\n    }\n\n    destroy() {\n        window.removeEventListener('resize', this._onResize, true);\n        window.removeEventListener('orientationchange', this._onResize, true);\n        this.wavesurfer.drawer.wrapper.removeEventListener(\n            'mouseover',\n            this._onMouseover\n        );\n        this.wavesurfer.un(this.renderEvent, this._onShouldRender);\n        this.wavesurfer.un('seek', this._onSeek);\n        this.wavesurfer.un('scroll', this._onScroll);\n        this.wavesurfer.un('audioprocess', this._onAudioprocess);\n        this.wavesurfer.un('zoom', this._onZoom);\n        this.drawer.destroy();\n        this.overviewRegion = null;\n        this.unAll();\n    }\n\n    regions() {\n        this.regions = {};\n\n        this.wavesurfer.on('region-created', region => {\n            this.regions[region.id] = region;\n            this.renderRegions();\n        });\n\n        this.wavesurfer.on('region-updated', region => {\n            this.regions[region.id] = region;\n            this.renderRegions();\n        });\n\n        this.wavesurfer.on('region-removed', region => {\n            delete this.regions[region.id];\n            this.renderRegions();\n        });\n    }\n\n    renderRegions() {\n        const regionElements = this.drawer.wrapper.querySelectorAll('region');\n        let i;\n        for (i = 0; i < regionElements.length; ++i) {\n            this.drawer.wrapper.removeChild(regionElements[i]);\n        }\n\n        Object.keys(this.regions).forEach(id => {\n            const region = this.regions[id];\n            const width =\n                this.getWidth() *\n                ((region.end - region.start) / this.wavesurfer.getDuration());\n            const left =\n                this.getWidth() *\n                (region.start / this.wavesurfer.getDuration());\n            const regionElement = this.util.style(\n                document.createElement('region'),\n                {\n                    height: 'inherit',\n                    backgroundColor: region.color,\n                    width: width + 'px',\n                    left: left + 'px',\n                    display: 'block',\n                    position: 'absolute'\n                }\n            );\n            regionElement.classList.add(id);\n            this.drawer.wrapper.appendChild(regionElement);\n        });\n    }\n\n    createElements() {\n        this.drawer.createElements();\n        if (this.params.showOverview) {\n            this.overviewRegion = this.util.style(\n                document.createElement('overview'),\n                {\n                    top: 0,\n                    bottom: 0,\n                    width: '0px',\n                    display: 'block',\n                    position: 'absolute',\n                    cursor: 'move',\n                    border:\n                        this.params.overviewBorderSize +\n                        'px solid ' +\n                        this.params.overviewBorderColor,\n                    zIndex: 2,\n                    opacity: this.params.overviewOpacity\n                }\n            );\n            this.drawer.wrapper.appendChild(this.overviewRegion);\n        }\n    }\n\n    bindWavesurferEvents() {\n        window.addEventListener('resize', this._onResize, true);\n        window.addEventListener('orientationchange', this._onResize, true);\n        this.wavesurfer.on('audioprocess', this._onAudioprocess);\n        this.wavesurfer.on('seek', this._onSeek);\n        if (this.params.showOverview) {\n            this.wavesurfer.on('scroll', this._onScroll);\n            this.wavesurfer.drawer.wrapper.addEventListener(\n                'mouseover',\n                this._onMouseover\n            );\n        }\n    }\n\n    bindMinimapEvents() {\n        const positionMouseDown = {\n            clientX: 0,\n            clientY: 0\n        };\n        let relativePositionX = 0;\n        let seek = true;\n\n        // the following event listeners will be destroyed by using\n        // this.unAll() and nullifying the DOM node references after\n        // removing them\n        if (this.params.interact) {\n            this.drawer.wrapper.addEventListener('click', event => {\n                this.fireEvent('click', event, this.drawer.handleEvent(event));\n            });\n\n            this.on('click', (event, position) => {\n                if (seek) {\n                    this.drawer.progress(position);\n                    this.wavesurfer.seekAndCenter(position);\n                } else {\n                    seek = true;\n                }\n            });\n        }\n\n        if (this.params.showOverview) {\n            this.overviewRegion.addEventListener('mousedown', event => {\n                this.draggingOverview = true;\n                relativePositionX = event.layerX;\n                positionMouseDown.clientX = event.clientX;\n                positionMouseDown.clientY = event.clientY;\n            });\n\n            this.drawer.wrapper.addEventListener('mousemove', event => {\n                if (this.draggingOverview) {\n                    this.moveOverviewRegion(\n                        event.clientX -\n                            this.drawer.container.getBoundingClientRect().left -\n                            relativePositionX\n                    );\n                }\n            });\n\n            this.drawer.wrapper.addEventListener('mouseup', event => {\n                if (\n                    positionMouseDown.clientX - event.clientX === 0 &&\n                    positionMouseDown.clientX - event.clientX === 0\n                ) {\n                    seek = true;\n                    this.draggingOverview = false;\n                } else if (this.draggingOverview) {\n                    seek = false;\n                    this.draggingOverview = false;\n                }\n            });\n        }\n    }\n\n    render() {\n        const len = this.drawer.getWidth();\n        const peaks = this.wavesurfer.backend.getPeaks(len, 0, len);\n        this.drawer.drawPeaks(peaks, len, 0, len);\n        this.drawer.progress(this.wavesurfer.backend.getPlayedPercents());\n\n        if (this.params.showOverview) {\n            //get proportional width of overview region considering the respective\n            //width of the drawers\n            this.ratio = this.wavesurfer.drawer.width / this.drawer.width;\n            this.waveShowedWidth = this.wavesurfer.drawer.width / this.ratio;\n            this.waveWidth = this.wavesurfer.drawer.width;\n            this.overviewWidth = this.drawer.container.offsetWidth / this.ratio;\n            this.overviewPosition = 0;\n            this.moveOverviewRegion(\n                this.wavesurfer.drawer.wrapper.scrollLeft / this.ratio\n            );\n            this.overviewRegion.style.width = this.overviewWidth + 'px';\n        }\n    }\n\n    moveOverviewRegion(pixels) {\n        if (pixels < 0) {\n            this.overviewPosition = 0;\n        } else if (\n            pixels + this.overviewWidth <\n            this.drawer.container.offsetWidth\n        ) {\n            this.overviewPosition = pixels;\n        } else {\n            this.overviewPosition =\n                this.drawer.container.offsetWidth - this.overviewWidth;\n        }\n        this.overviewRegion.style.left = this.overviewPosition + 'px';\n        if (this.draggingOverview) {\n            this.wavesurfer.drawer.wrapper.scrollLeft =\n                this.overviewPosition * this.ratio;\n        }\n    }\n\n    getWidth() {\n        return this.drawer.width / this.params.pixelRatio;\n    }\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/plugin/minimap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 325,
    "kind": "typedef",
    "name": "MinimapPluginParams",
    "memberof": "src/plugin/minimap.js",
    "static": true,
    "longname": "src/plugin/minimap.js~MinimapPluginParams",
    "access": "public",
    "description": "Extends the `WavesurferParams` wavesurfer was initialised with",
    "properties": [
      {
        "nullable": true,
        "types": [
          "string",
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": "CSS selector or HTML element where\nthe map should be rendered. By default it is simply appended\nafter the waveform."
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "deferInit",
        "description": "Set to true to manually call\n`initPlugin('minimap')`"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "MinimapPluginParams"
    }
  },
  {
    "__docId__": 326,
    "kind": "class",
    "name": "MinimapPlugin",
    "memberof": "src/plugin/minimap.js",
    "static": true,
    "longname": "src/plugin/minimap.js~MinimapPlugin",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/plugin/minimap.js",
    "importStyle": "MinimapPlugin",
    "description": "Renders a smaller version waveform as a minimap of the main waveform.",
    "examples": [
      "// es6\nimport MinimapPlugin from 'wavesurfer.minimap.js';\n\n// commonjs\nvar MinimapPlugin = require('wavesurfer.minimap.js');\n\n// if you are using <script> tags\nvar MinimapPlugin = window.WaveSurfer.minimap;\n\n// ... initialising wavesurfer with the plugin\nvar wavesurfer = WaveSurfer.create({\n  // wavesurfer options ...\n  plugins: [\n    MinimapPlugin.create({\n      // plugin options ...\n    })\n  ]\n});"
    ],
    "lineNumber": 37,
    "interface": false,
    "extends": [
      "Observer"
    ],
    "implements": [
      "PluginClass"
    ]
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "create",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugin/minimap.js~MinimapPlugin.create",
    "access": "public",
    "description": "Minimap plugin definition factory\n\nThis function must be used to create a plugin definition which can be\nused by wavesurfer to correctly instantiate the plugin.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "MinimapPluginParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "parameters use to initialise the plugin"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PluginDefinition"
      ],
      "spread": false,
      "description": "an object representing the plugin"
    }
  },
  {
    "__docId__": 328,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true
  },
  {
    "__docId__": 329,
    "kind": "member",
    "name": "params",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#params",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 330,
    "kind": "member",
    "name": "drawer",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#drawer",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 331,
    "kind": "member",
    "name": "wavesurfer",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#wavesurfer",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 332,
    "kind": "member",
    "name": "util",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#util",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 333,
    "kind": "member",
    "name": "renderEvent",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#renderEvent",
    "access": "public",
    "description": "Minimap needs to listen for the `ready` and `waveform-ready` events\nto work with the `MediaElement` backend. The moment the `ready` event\nis called is different (and peaks would not load).",
    "see": [
      "https://github.com/katspaugh/wavesurfer.js/issues/736"
    ],
    "lineNumber": 106,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 334,
    "kind": "member",
    "name": "overviewRegion",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#overviewRegion",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 335,
    "kind": "member",
    "name": "_onShouldRender",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#_onShouldRender",
    "access": "private",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 336,
    "kind": "member",
    "name": "_onAudioprocess",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#_onAudioprocess",
    "access": "private",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 337,
    "kind": "member",
    "name": "_onSeek",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#_onSeek",
    "access": "private",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 338,
    "kind": "member",
    "name": "_onScroll",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#_onScroll",
    "access": "private",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 339,
    "kind": "member",
    "name": "_onMouseover",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#_onMouseover",
    "access": "private",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 340,
    "kind": "member",
    "name": "draggingOverview",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#draggingOverview",
    "access": "public",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 341,
    "kind": "member",
    "name": "_onResize",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#_onResize",
    "access": "private",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 342,
    "kind": "member",
    "name": "_onZoom",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#_onZoom",
    "access": "private",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "init",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#init",
    "access": "public",
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 346,
    "kind": "method",
    "name": "regions",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#regions",
    "access": "public",
    "description": null,
    "lineNumber": 193,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "renderRegions",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#renderRegions",
    "access": "public",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "createElements",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#createElements",
    "access": "public",
    "description": null,
    "lineNumber": 243,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "bindWavesurferEvents",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#bindWavesurferEvents",
    "access": "public",
    "description": null,
    "lineNumber": 267,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 352,
    "kind": "method",
    "name": "bindMinimapEvents",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#bindMinimapEvents",
    "access": "public",
    "description": null,
    "lineNumber": 281,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 356,
    "kind": "method",
    "name": "render",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#render",
    "access": "public",
    "description": null,
    "lineNumber": 340,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 357,
    "kind": "member",
    "name": "ratio",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#ratio",
    "access": "public",
    "description": null,
    "lineNumber": 349,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 358,
    "kind": "member",
    "name": "waveShowedWidth",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#waveShowedWidth",
    "access": "public",
    "description": null,
    "lineNumber": 350,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 359,
    "kind": "member",
    "name": "waveWidth",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#waveWidth",
    "access": "public",
    "description": null,
    "lineNumber": 351,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 360,
    "kind": "member",
    "name": "overviewWidth",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#overviewWidth",
    "access": "public",
    "description": null,
    "lineNumber": 352,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 361,
    "kind": "member",
    "name": "overviewPosition",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#overviewPosition",
    "access": "public",
    "description": null,
    "lineNumber": 353,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "method",
    "name": "moveOverviewRegion",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#moveOverviewRegion",
    "access": "public",
    "description": null,
    "lineNumber": 361,
    "undocument": true,
    "params": [
      {
        "name": "pixels",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "getWidth",
    "memberof": "src/plugin/minimap.js~MinimapPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/minimap.js~MinimapPlugin#getWidth",
    "access": "public",
    "description": null,
    "lineNumber": 380,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 367,
    "kind": "file",
    "name": "src/plugin/regions.js",
    "content": "/**\n * (Single) Region plugin class\n *\n * Must be turned into an observer before instantiating. This is done in\n * `RegionsPlugin` (main plugin class).\n *\n * @extends {Observer}\n */\nclass Region {\n    constructor(params, ws) {\n        this.wavesurfer = ws;\n        this.wrapper = ws.drawer.wrapper;\n        this.util = ws.util;\n        this.style = this.util.style;\n\n        this.id = params.id == null ? ws.util.getId() : params.id;\n        this.start = Number(params.start) || 0;\n        this.end =\n            params.end == null\n                ? // small marker-like region\n                  this.start +\n                  (4 / this.wrapper.scrollWidth) * this.wavesurfer.getDuration()\n                : Number(params.end);\n        this.resize =\n            params.resize === undefined ? true : Boolean(params.resize);\n        this.drag = params.drag === undefined ? true : Boolean(params.drag);\n        // reflect resize and drag state of region for region-updated listener\n        this.isResizing = false;\n        this.isDragging = false;\n        this.loop = Boolean(params.loop);\n        this.color = params.color || 'rgba(0, 0, 0, 0.1)';\n        this.data = params.data || {};\n        this.attributes = params.attributes || {};\n\n        this.maxLength = params.maxLength;\n        this.minLength = params.minLength;\n        this._onRedraw = () => this.updateRender();\n\n        this.scroll = params.scroll !== false && ws.params.scrollParent;\n        this.scrollSpeed = params.scrollSpeed || 1;\n        this.scrollThreshold = params.scrollThreshold || 10;\n\n        this.bindInOut();\n        this.render();\n        this.wavesurfer.on('zoom', this._onRedraw);\n        this.wavesurfer.on('redraw', this._onRedraw);\n        this.wavesurfer.fireEvent('region-created', this);\n    }\n\n    /* Update region params. */\n    update(params) {\n        if (null != params.start) {\n            this.start = Number(params.start);\n        }\n        if (null != params.end) {\n            this.end = Number(params.end);\n        }\n        if (null != params.loop) {\n            this.loop = Boolean(params.loop);\n        }\n        if (null != params.color) {\n            this.color = params.color;\n        }\n        if (null != params.data) {\n            this.data = params.data;\n        }\n        if (null != params.resize) {\n            this.resize = Boolean(params.resize);\n        }\n        if (null != params.drag) {\n            this.drag = Boolean(params.drag);\n        }\n        if (null != params.maxLength) {\n            this.maxLength = Number(params.maxLength);\n        }\n        if (null != params.minLength) {\n            this.minLength = Number(params.minLength);\n        }\n        if (null != params.attributes) {\n            this.attributes = params.attributes;\n        }\n\n        this.updateRender();\n        this.fireEvent('update');\n        this.wavesurfer.fireEvent('region-updated', this);\n    }\n\n    /* Remove a single region. */\n    remove() {\n        if (this.element) {\n            this.wrapper.removeChild(this.element);\n            this.element = null;\n            this.fireEvent('remove');\n            this.wavesurfer.un('zoom', this._onRedraw);\n            this.wavesurfer.un('redraw', this._onRedraw);\n            this.wavesurfer.fireEvent('region-removed', this);\n        }\n    }\n\n    /* Play the audio region. */\n    play() {\n        this.wavesurfer.play(this.start, this.end);\n        this.fireEvent('play');\n        this.wavesurfer.fireEvent('region-play', this);\n    }\n\n    /* Play the region in loop. */\n    playLoop() {\n        this.play();\n        this.once('out', () => this.playLoop());\n    }\n\n    /* Render a region as a DOM element. */\n    render() {\n        const regionEl = document.createElement('region');\n        regionEl.className = 'wavesurfer-region';\n        regionEl.title = this.formatTime(this.start, this.end);\n        regionEl.setAttribute('data-id', this.id);\n\n        for (const attrname in this.attributes) {\n            regionEl.setAttribute(\n                'data-region-' + attrname,\n                this.attributes[attrname]\n            );\n        }\n\n        this.style(regionEl, {\n            position: 'absolute',\n            zIndex: 2,\n            height: '100%',\n            top: '0px'\n        });\n\n        /* Resize handles */\n        if (this.resize) {\n            const handleLeft = regionEl.appendChild(\n                document.createElement('handle')\n            );\n            const handleRight = regionEl.appendChild(\n                document.createElement('handle')\n            );\n            handleLeft.className = 'wavesurfer-handle wavesurfer-handle-start';\n            handleRight.className = 'wavesurfer-handle wavesurfer-handle-end';\n            const css = {\n                cursor: 'col-resize',\n                position: 'absolute',\n                top: '0px',\n                width: '1%',\n                maxWidth: '4px',\n                height: '100%'\n            };\n            this.style(handleLeft, css);\n            this.style(handleLeft, {\n                left: '0px'\n            });\n            this.style(handleRight, css);\n            this.style(handleRight, {\n                right: '0px'\n            });\n        }\n\n        this.element = this.wrapper.appendChild(regionEl);\n        this.updateRender();\n        this.bindEvents(regionEl);\n    }\n\n    formatTime(start, end) {\n        return (start == end ? [start] : [start, end])\n            .map(time =>\n                [\n                    Math.floor((time % 3600) / 60), // minutes\n                    ('00' + Math.floor(time % 60)).slice(-2) // seconds\n                ].join(':')\n            )\n            .join('-');\n    }\n\n    getWidth() {\n        return this.wavesurfer.drawer.width / this.wavesurfer.params.pixelRatio;\n    }\n\n    /* Update element's position, width, color. */\n    updateRender() {\n        // duration varies during loading process, so don't overwrite important data\n        const dur = this.wavesurfer.getDuration();\n        const width = this.getWidth();\n\n        var startLimited = this.start;\n        var endLimited = this.end;\n        if (startLimited < 0) {\n            startLimited = 0;\n            endLimited = endLimited - startLimited;\n        }\n        if (endLimited > dur) {\n            endLimited = dur;\n            startLimited = dur - (endLimited - startLimited);\n        }\n\n        if (this.minLength != null) {\n            endLimited = Math.max(startLimited + this.minLength, endLimited);\n        }\n\n        if (this.maxLength != null) {\n            endLimited = Math.min(startLimited + this.maxLength, endLimited);\n        }\n\n        if (this.element != null) {\n            // Calculate the left and width values of the region such that\n            // no gaps appear between regions.\n            const left = Math.round((startLimited / dur) * width);\n            const regionWidth = Math.round((endLimited / dur) * width) - left;\n\n            this.style(this.element, {\n                left: left + 'px',\n                width: regionWidth + 'px',\n                backgroundColor: this.color,\n                cursor: this.drag ? 'move' : 'default'\n            });\n\n            for (const attrname in this.attributes) {\n                this.element.setAttribute(\n                    'data-region-' + attrname,\n                    this.attributes[attrname]\n                );\n            }\n\n            this.element.title = this.formatTime(this.start, this.end);\n        }\n    }\n\n    /* Bind audio events. */\n    bindInOut() {\n        this.firedIn = false;\n        this.firedOut = false;\n\n        const onProcess = time => {\n            let start = Math.round(this.start * 10) / 10;\n            let end = Math.round(this.end * 10) / 10;\n            time = Math.round(time * 10) / 10;\n\n            if (\n                !this.firedOut &&\n                this.firedIn &&\n                (start > time || end <= time)\n            ) {\n                this.firedOut = true;\n                this.firedIn = false;\n                this.fireEvent('out');\n                this.wavesurfer.fireEvent('region-out', this);\n            }\n            if (!this.firedIn && start <= time && end > time) {\n                this.firedIn = true;\n                this.firedOut = false;\n                this.fireEvent('in');\n                this.wavesurfer.fireEvent('region-in', this);\n            }\n        };\n\n        this.wavesurfer.backend.on('audioprocess', onProcess);\n\n        this.on('remove', () => {\n            this.wavesurfer.backend.un('audioprocess', onProcess);\n        });\n\n        /* Loop playback. */\n        this.on('out', () => {\n            if (this.loop) {\n                this.wavesurfer.play(this.start);\n            }\n        });\n    }\n\n    /* Bind DOM events. */\n    bindEvents() {\n        this.element.addEventListener('mouseenter', e => {\n            this.fireEvent('mouseenter', e);\n            this.wavesurfer.fireEvent('region-mouseenter', this, e);\n        });\n\n        this.element.addEventListener('mouseleave', e => {\n            this.fireEvent('mouseleave', e);\n            this.wavesurfer.fireEvent('region-mouseleave', this, e);\n        });\n\n        this.element.addEventListener('click', e => {\n            e.preventDefault();\n            this.fireEvent('click', e);\n            this.wavesurfer.fireEvent('region-click', this, e);\n        });\n\n        this.element.addEventListener('dblclick', e => {\n            e.stopPropagation();\n            e.preventDefault();\n            this.fireEvent('dblclick', e);\n            this.wavesurfer.fireEvent('region-dblclick', this, e);\n        });\n\n        /* Drag or resize on mousemove. */\n        (this.drag || this.resize) &&\n            (() => {\n                const container = this.wavesurfer.drawer.container;\n                const scrollSpeed = this.scrollSpeed;\n                const scrollThreshold = this.scrollThreshold;\n                let startTime;\n                let touchId;\n                let drag;\n                let maxScroll;\n                let resize;\n                let updated = false;\n                let scrollDirection;\n                let wrapperRect;\n\n                // Scroll when the user is dragging within the threshold\n                const edgeScroll = e => {\n                    const duration = this.wavesurfer.getDuration();\n                    if (!scrollDirection || (!drag && !resize)) {\n                        return;\n                    }\n\n                    // Update scroll position\n                    let scrollLeft =\n                        this.wrapper.scrollLeft + scrollSpeed * scrollDirection;\n                    this.wrapper.scrollLeft = scrollLeft = Math.min(\n                        maxScroll,\n                        Math.max(0, scrollLeft)\n                    );\n\n                    // Get the currently selected time according to the mouse position\n                    const time = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                        this.wavesurfer.drawer.handleEvent(e) * duration\n                    );\n                    const delta = time - startTime;\n                    startTime = time;\n\n                    // Continue dragging or resizing\n                    drag ? this.onDrag(delta) : this.onResize(delta, resize);\n\n                    // Repeat\n                    window.requestAnimationFrame(() => {\n                        edgeScroll(e);\n                    });\n                };\n\n                const onDown = e => {\n                    const duration = this.wavesurfer.getDuration();\n                    if (e.touches && e.touches.length > 1) {\n                        return;\n                    }\n                    touchId = e.targetTouches\n                        ? e.targetTouches[0].identifier\n                        : null;\n\n                    // stop the event propagation, if this region is resizable or draggable\n                    // and the event is therefore handled here.\n                    if (this.drag || this.resize) {\n                        e.stopPropagation();\n                    }\n\n                    // Store the selected startTime we begun dragging or resizing\n                    startTime = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                        this.wavesurfer.drawer.handleEvent(e, true) * duration\n                    );\n\n                    // Store for scroll calculations\n                    maxScroll =\n                        this.wrapper.scrollWidth - this.wrapper.clientWidth;\n                    wrapperRect = this.wrapper.getBoundingClientRect();\n\n                    this.isResizing = false;\n                    this.isDragging = false;\n                    if (e.target.tagName.toLowerCase() === 'handle') {\n                        this.isResizing = true;\n                        if (\n                            e.target.classList.contains(\n                                'wavesurfer-handle-start'\n                            )\n                        ) {\n                            resize = 'start';\n                        } else {\n                            resize = 'end';\n                        }\n                    } else {\n                        this.isDragging = true;\n                        drag = true;\n                        resize = false;\n                    }\n                };\n                const onUp = e => {\n                    if (e.touches && e.touches.length > 1) {\n                        return;\n                    }\n\n                    if (drag || resize) {\n                        this.isDragging = false;\n                        this.isResizing = false;\n                        drag = false;\n                        scrollDirection = null;\n                        resize = false;\n                    }\n\n                    if (updated) {\n                        updated = false;\n                        this.util.preventClick();\n                        this.fireEvent('update-end', e);\n                        this.wavesurfer.fireEvent('region-update-end', this, e);\n                    }\n                };\n                const onMove = e => {\n                    const duration = this.wavesurfer.getDuration();\n\n                    if (e.touches && e.touches.length > 1) {\n                        return;\n                    }\n                    if (\n                        e.targetTouches &&\n                        e.targetTouches[0].identifier != touchId\n                    ) {\n                        return;\n                    }\n\n                    if (drag || resize) {\n                        const oldTime = startTime;\n                        const time = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                            this.wavesurfer.drawer.handleEvent(e) * duration\n                        );\n\n                        const delta = time - startTime;\n                        startTime = time;\n\n                        // Drag\n                        if (this.drag && drag) {\n                            updated = updated || !!delta;\n                            this.onDrag(delta);\n                        }\n\n                        // Resize\n                        if (this.resize && resize) {\n                            updated = updated || !!delta;\n                            this.onResize(delta, resize);\n                        }\n\n                        if (\n                            this.scroll &&\n                            container.clientWidth < this.wrapper.scrollWidth\n                        ) {\n                            if (drag) {\n                                // The threshold is not between the mouse and the container edge\n                                // but is between the region and the container edge\n                                const regionRect = this.element.getBoundingClientRect();\n                                let x = regionRect.left - wrapperRect.left;\n\n                                // Check direction\n                                if (time < oldTime && x >= 0) {\n                                    scrollDirection = -1;\n                                } else if (\n                                    time > oldTime &&\n                                    x + regionRect.width <= wrapperRect.right\n                                ) {\n                                    scrollDirection = 1;\n                                }\n\n                                // Check that we are still beyond the threshold\n                                if (\n                                    (scrollDirection === -1 &&\n                                        x > scrollThreshold) ||\n                                    (scrollDirection === 1 &&\n                                        x + regionRect.width <\n                                            wrapperRect.right - scrollThreshold)\n                                ) {\n                                    scrollDirection = null;\n                                }\n                            } else {\n                                // Mouse based threshold\n                                let x = e.clientX - wrapperRect.left;\n\n                                // Check direction\n                                if (x <= scrollThreshold) {\n                                    scrollDirection = -1;\n                                } else if (\n                                    x >=\n                                    wrapperRect.right - scrollThreshold\n                                ) {\n                                    scrollDirection = 1;\n                                } else {\n                                    scrollDirection = null;\n                                }\n                            }\n\n                            scrollDirection && edgeScroll(e);\n                        }\n                    }\n                };\n\n                this.element.addEventListener('mousedown', onDown);\n                this.element.addEventListener('touchstart', onDown);\n\n                this.wrapper.addEventListener('mousemove', onMove);\n                this.wrapper.addEventListener('touchmove', onMove);\n\n                document.body.addEventListener('mouseup', onUp);\n                document.body.addEventListener('touchend', onUp);\n\n                this.on('remove', () => {\n                    document.body.removeEventListener('mouseup', onUp);\n                    document.body.removeEventListener('touchend', onUp);\n                    this.wrapper.removeEventListener('mousemove', onMove);\n                    this.wrapper.removeEventListener('touchmove', onMove);\n                });\n\n                this.wavesurfer.on('destroy', () => {\n                    document.body.removeEventListener('mouseup', onUp);\n                    document.body.removeEventListener('touchend', onUp);\n                });\n            })();\n    }\n\n    onDrag(delta) {\n        const maxEnd = this.wavesurfer.getDuration();\n        if (this.end + delta > maxEnd || this.start + delta < 0) {\n            return;\n        }\n\n        this.update({\n            start: this.start + delta,\n            end: this.end + delta\n        });\n    }\n\n    onResize(delta, direction) {\n        if (direction === 'start') {\n            this.update({\n                start: Math.min(this.start + delta, this.end),\n                end: Math.max(this.start + delta, this.end)\n            });\n        } else {\n            this.update({\n                start: Math.min(this.end + delta, this.start),\n                end: Math.max(this.end + delta, this.start)\n            });\n        }\n    }\n}\n\n/**\n * @typedef {Object} RegionsPluginParams\n * @property {?boolean} dragSelection Enable creating regions by dragging with\n * the mouse\n * @property {?RegionParams[]} regions Regions that should be added upon\n * initialisation\n * @property {number} slop=2 The sensitivity of the mouse dragging\n * @property {?number} snapToGridInterval Snap the regions to a grid of the specified multiples in seconds\n * @property {?number} snapToGridOffset Shift the snap-to-grid by the specified seconds. May also be negative.\n * @property {?boolean} deferInit Set to true to manually call\n * `initPlugin('regions')`\n */\n\n/**\n * @typedef {Object} RegionParams\n * @desc The parameters used to describe a region.\n * @example wavesurfer.addRegion(regionParams);\n * @property {string} id=→random The id of the region\n * @property {number} start=0 The start position of the region (in seconds).\n * @property {number} end=0 The end position of the region (in seconds).\n * @property {?boolean} loop Whether to loop the region when played back.\n * @property {boolean} drag=true Allow/disallow dragging the region.\n * @property {boolean} resize=true Allow/disallow resizing the region.\n * @property {string} [color='rgba(0, 0, 0, 0.1)'] HTML color code.\n */\n\n/**\n * Regions are visual overlays on waveform that can be used to play and loop\n * portions of audio. Regions can be dragged and resized.\n *\n * Visual customization is possible via CSS (using the selectors\n * `.wavesurfer-region` and `.wavesurfer-handle`).\n *\n * @implements {PluginClass}\n * @extends {Observer}\n *\n * @example\n * // es6\n * import RegionsPlugin from 'wavesurfer.regions.js';\n *\n * // commonjs\n * var RegionsPlugin = require('wavesurfer.regions.js');\n *\n * // if you are using <script> tags\n * var RegionsPlugin = window.WaveSurfer.regions;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     RegionsPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class RegionsPlugin {\n    /**\n     * Regions plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param {RegionsPluginParams} params parameters use to initialise the plugin\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    static create(params) {\n        return {\n            name: 'regions',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            staticProps: {\n                addRegion(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    return this.regions.add(options);\n                },\n\n                clearRegions() {\n                    this.regions && this.regions.clear();\n                },\n\n                enableDragSelection(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    this.regions.enableDragSelection(options);\n                },\n\n                disableDragSelection() {\n                    this.regions.disableDragSelection();\n                }\n            },\n            instance: RegionsPlugin\n        };\n    }\n\n    constructor(params, ws) {\n        this.params = params;\n        this.wavesurfer = ws;\n        this.util = ws.util;\n        this.util.getRegionSnapToGridValue = value => {\n            return this.getRegionSnapToGridValue(value, params);\n        };\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            this.util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Region.prototype[key] = this.util.Observer.prototype[key];\n        });\n        this.wavesurfer.Region = Region;\n\n        this._onBackendCreated = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            if (this.params.regions) {\n                this.params.regions.forEach(region => {\n                    this.add(region);\n                });\n            }\n        };\n\n        // Id-based hash of regions\n        this.list = {};\n        this._onReady = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            if (this.params.dragSelection) {\n                this.enableDragSelection(this.params);\n            }\n            Object.keys(this.list).forEach(id => {\n                this.list[id].updateRender();\n            });\n        };\n    }\n\n    init() {\n        // Check if ws is ready\n        if (this.wavesurfer.isReady) {\n            this._onBackendCreated();\n            this._onReady();\n        } else {\n            this.wavesurfer.once('ready', this._onReady);\n            this.wavesurfer.once('backend-created', this._onBackendCreated);\n        }\n    }\n\n    destroy() {\n        this.wavesurfer.un('ready', this._onReady);\n        this.wavesurfer.un('backend-created', this._onBackendCreated);\n        this.disableDragSelection();\n        this.clear();\n    }\n\n    /**\n     * Add a region\n     *\n     * @param {object} params Region parameters\n     * @return {Region} The created region\n     */\n    add(params) {\n        const region = new this.wavesurfer.Region(params, this.wavesurfer);\n\n        this.list[region.id] = region;\n\n        region.on('remove', () => {\n            delete this.list[region.id];\n        });\n\n        return region;\n    }\n\n    /**\n     * Remove all regions\n     */\n    clear() {\n        Object.keys(this.list).forEach(id => {\n            this.list[id].remove();\n        });\n    }\n\n    enableDragSelection(params) {\n        const slop = params.slop || 2;\n        const container = this.wavesurfer.drawer.container;\n        const scroll =\n            params.scroll !== false && this.wavesurfer.params.scrollParent;\n        const scrollSpeed = params.scrollSpeed || 1;\n        const scrollThreshold = params.scrollThreshold || 10;\n        let drag;\n        let duration = this.wavesurfer.getDuration();\n        let maxScroll;\n        let start;\n        let region;\n        let touchId;\n        let pxMove = 0;\n        let scrollDirection;\n        let wrapperRect;\n\n        // Scroll when the user is dragging within the threshold\n        const edgeScroll = e => {\n            if (!region || !scrollDirection) {\n                return;\n            }\n\n            // Update scroll position\n            let scrollLeft =\n                this.wrapper.scrollLeft + scrollSpeed * scrollDirection;\n            this.wrapper.scrollLeft = scrollLeft = Math.min(\n                maxScroll,\n                Math.max(0, scrollLeft)\n            );\n\n            // Update range\n            const end = this.wavesurfer.drawer.handleEvent(e);\n            region.update({\n                start: Math.min(end * duration, start * duration),\n                end: Math.max(end * duration, start * duration)\n            });\n\n            // Check that there is more to scroll and repeat\n            if (scrollLeft < maxScroll && scrollLeft > 0) {\n                window.requestAnimationFrame(() => {\n                    edgeScroll(e);\n                });\n            }\n        };\n\n        const eventDown = e => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n            duration = this.wavesurfer.getDuration();\n            touchId = e.targetTouches ? e.targetTouches[0].identifier : null;\n\n            // Store for scroll calculations\n            maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n            wrapperRect = this.wrapper.getBoundingClientRect();\n\n            drag = true;\n            start = this.wavesurfer.drawer.handleEvent(e, true);\n            region = null;\n            scrollDirection = null;\n        };\n        this.wrapper.addEventListener('mousedown', eventDown);\n        this.wrapper.addEventListener('touchstart', eventDown);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchstart', eventDown);\n            this.wrapper.removeEventListener('mousedown', eventDown);\n        });\n\n        const eventUp = e => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n\n            drag = false;\n            pxMove = 0;\n            scrollDirection = null;\n\n            if (region) {\n                this.util.preventClick();\n                region.fireEvent('update-end', e);\n                this.wavesurfer.fireEvent('region-update-end', region, e);\n            }\n\n            region = null;\n        };\n        this.wrapper.addEventListener('mouseup', eventUp);\n        this.wrapper.addEventListener('touchend', eventUp);\n\n        document.body.addEventListener('mouseup', eventUp);\n        document.body.addEventListener('touchend', eventUp);\n        this.on('disable-drag-selection', () => {\n            document.body.removeEventListener('mouseup', eventUp);\n            document.body.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('mouseup', eventUp);\n        });\n\n        const eventMove = e => {\n            if (!drag) {\n                return;\n            }\n            if (++pxMove <= slop) {\n                return;\n            }\n\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n            if (e.targetTouches && e.targetTouches[0].identifier != touchId) {\n                return;\n            }\n\n            if (!region) {\n                region = this.add(params || {});\n            }\n\n            const end = this.wavesurfer.drawer.handleEvent(e);\n            const startUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                start * duration\n            );\n            const endUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                end * duration\n            );\n            region.update({\n                start: Math.min(endUpdate, startUpdate),\n                end: Math.max(endUpdate, startUpdate)\n            });\n\n            // If scrolling is enabled\n            if (scroll && container.clientWidth < this.wrapper.scrollWidth) {\n                // Check threshold based on mouse\n                const x = e.clientX - wrapperRect.left;\n                if (x <= scrollThreshold) {\n                    scrollDirection = -1;\n                } else if (x >= wrapperRect.right - scrollThreshold) {\n                    scrollDirection = 1;\n                } else {\n                    scrollDirection = null;\n                }\n                scrollDirection && edgeScroll(e);\n            }\n        };\n        this.wrapper.addEventListener('mousemove', eventMove);\n        this.wrapper.addEventListener('touchmove', eventMove);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchmove', eventMove);\n            this.wrapper.removeEventListener('mousemove', eventMove);\n        });\n    }\n\n    disableDragSelection() {\n        this.fireEvent('disable-drag-selection');\n    }\n\n    /**\n     * Get current region\n     *\n     * The smallest region that contains the current time. If several such\n     * regions exist, take the first. Return `null` if none exist.\n     *\n     * @returns {Region} The current region\n     */\n    getCurrentRegion() {\n        const time = this.wavesurfer.getCurrentTime();\n        let min = null;\n        Object.keys(this.list).forEach(id => {\n            const cur = this.list[id];\n            if (cur.start <= time && cur.end >= time) {\n                if (!min || cur.end - cur.start < min.end - min.start) {\n                    min = cur;\n                }\n            }\n        });\n\n        return min;\n    }\n\n    /**\n     * Match the value to the grid, if required\n     *\n     * If the regions plugin params have a snapToGridInterval set, return the\n     * value matching the nearest grid interval. If no snapToGridInterval is set,\n     * the passed value will be returned without modification.\n     *\n     * @param {number} value the value to snap to the grid, if needed\n     * @param {Object} params the regions plugin params\n     * @returns {number} value\n     */\n    getRegionSnapToGridValue(value, params) {\n        if (params.snapToGridInterval) {\n            // the regions should snap to a grid\n            const offset = params.snapToGridOffset || 0;\n            return (\n                Math.round((value - offset) / params.snapToGridInterval) *\n                    params.snapToGridInterval +\n                offset\n            );\n        }\n\n        // no snap-to-grid\n        return value;\n    }\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/plugin/regions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 368,
    "kind": "class",
    "name": "Region",
    "memberof": "src/plugin/regions.js",
    "static": true,
    "longname": "src/plugin/regions.js~Region",
    "access": "public",
    "export": false,
    "importPath": "wavesurfer.js/src/plugin/regions.js",
    "importStyle": null,
    "description": "(Single) Region plugin class\n\nMust be turned into an observer before instantiating. This is done in\n`RegionsPlugin` (main plugin class).",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "Observer"
    ],
    "ignore": true
  },
  {
    "__docId__": 369,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 370,
    "kind": "member",
    "name": "wavesurfer",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#wavesurfer",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 371,
    "kind": "member",
    "name": "wrapper",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#wrapper",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 372,
    "kind": "member",
    "name": "util",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#util",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 373,
    "kind": "member",
    "name": "style",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#style",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 374,
    "kind": "member",
    "name": "id",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#id",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 375,
    "kind": "member",
    "name": "start",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#start",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 376,
    "kind": "member",
    "name": "end",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#end",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 377,
    "kind": "member",
    "name": "resize",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#resize",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 378,
    "kind": "member",
    "name": "drag",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#drag",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 379,
    "kind": "member",
    "name": "isResizing",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#isResizing",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 380,
    "kind": "member",
    "name": "isDragging",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#isDragging",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 381,
    "kind": "member",
    "name": "loop",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#loop",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "member",
    "name": "color",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#color",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 383,
    "kind": "member",
    "name": "data",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#data",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 384,
    "kind": "member",
    "name": "attributes",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#attributes",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "member",
    "name": "maxLength",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#maxLength",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 386,
    "kind": "member",
    "name": "minLength",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#minLength",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 387,
    "kind": "member",
    "name": "_onRedraw",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#_onRedraw",
    "access": "private",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 388,
    "kind": "member",
    "name": "scroll",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#scroll",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 389,
    "kind": "member",
    "name": "scrollSpeed",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#scrollSpeed",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 390,
    "kind": "member",
    "name": "scrollThreshold",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#scrollThreshold",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 391,
    "kind": "method",
    "name": "update",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#update",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 402,
    "kind": "method",
    "name": "remove",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#remove",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 403,
    "kind": "member",
    "name": "element",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#element",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "play",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#play",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "playLoop",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#playLoop",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "render",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#render",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 408,
    "kind": "method",
    "name": "formatTime",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#formatTime",
    "access": "public",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "end",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "getWidth",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#getWidth",
    "access": "public",
    "description": null,
    "lineNumber": 178,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "updateRender",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#updateRender",
    "access": "public",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "bindInOut",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#bindInOut",
    "access": "public",
    "description": null,
    "lineNumber": 232,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 412,
    "kind": "member",
    "name": "firedIn",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#firedIn",
    "access": "public",
    "description": null,
    "lineNumber": 233,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 413,
    "kind": "member",
    "name": "firedOut",
    "memberof": "src/plugin/regions.js~Region",
    "static": false,
    "longname": "src/plugin/regions.js~Region#firedOut",
    "access": "public",
    "description": null,
    "lineNumber": 234,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "bindEvents",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#bindEvents",
    "access": "public",
    "description": null,
    "lineNumber": 274,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 425,
    "kind": "method",
    "name": "onDrag",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#onDrag",
    "access": "public",
    "description": null,
    "lineNumber": 517,
    "undocument": true,
    "params": [
      {
        "name": "delta",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 426,
    "kind": "method",
    "name": "onResize",
    "memberof": "src/plugin/regions.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~Region#onResize",
    "access": "public",
    "description": null,
    "lineNumber": 529,
    "undocument": true,
    "params": [
      {
        "name": "delta",
        "types": [
          "*"
        ]
      },
      {
        "name": "direction",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 427,
    "kind": "typedef",
    "name": "RegionsPluginParams",
    "memberof": "src/plugin/regions.js",
    "static": true,
    "longname": "src/plugin/regions.js~RegionsPluginParams",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "dragSelection",
        "description": "Enable creating regions by dragging with\nthe mouse"
      },
      {
        "nullable": true,
        "types": [
          "RegionParams[]"
        ],
        "spread": false,
        "optional": false,
        "name": "regions",
        "description": "Regions that should be added upon\ninitialisation"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "slop",
        "description": "The sensitivity of the mouse dragging"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "snapToGridInterval",
        "description": "Snap the regions to a grid of the specified multiples in seconds"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "snapToGridOffset",
        "description": "Shift the snap-to-grid by the specified seconds. May also be negative."
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "deferInit",
        "description": "Set to true to manually call\n`initPlugin('regions')`"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "RegionsPluginParams"
    }
  },
  {
    "__docId__": 428,
    "kind": "typedef",
    "name": "RegionParams",
    "memberof": "src/plugin/regions.js",
    "static": true,
    "longname": "src/plugin/regions.js~RegionParams",
    "access": "public",
    "description": "The parameters used to describe a region.",
    "examples": [
      "wavesurfer.addRegion(regionParams);"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "→random",
        "defaultRaw": "→random",
        "name": "id",
        "description": "The id of the region"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "start",
        "description": "The start position of the region (in seconds)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "end",
        "description": "The end position of the region (in seconds)."
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "loop",
        "description": "Whether to loop the region when played back."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "drag",
        "description": "Allow/disallow dragging the region."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "resize",
        "description": "Allow/disallow resizing the region."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'rgba(0, 0, 0, 0.1)'",
        "defaultRaw": "'rgba(0, 0, 0, 0.1)'",
        "name": "color",
        "description": "HTML color code."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "RegionParams"
    }
  },
  {
    "__docId__": 429,
    "kind": "class",
    "name": "RegionsPlugin",
    "memberof": "src/plugin/regions.js",
    "static": true,
    "longname": "src/plugin/regions.js~RegionsPlugin",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/plugin/regions.js",
    "importStyle": "RegionsPlugin",
    "description": "Regions are visual overlays on waveform that can be used to play and loop\nportions of audio. Regions can be dragged and resized.\n\nVisual customization is possible via CSS (using the selectors\n`.wavesurfer-region` and `.wavesurfer-handle`).",
    "examples": [
      "// es6\nimport RegionsPlugin from 'wavesurfer.regions.js';\n\n// commonjs\nvar RegionsPlugin = require('wavesurfer.regions.js');\n\n// if you are using <script> tags\nvar RegionsPlugin = window.WaveSurfer.regions;\n\n// ... initialising wavesurfer with the plugin\nvar wavesurfer = WaveSurfer.create({\n  // wavesurfer options ...\n  plugins: [\n    RegionsPlugin.create({\n      // plugin options ...\n    })\n  ]\n});"
    ],
    "lineNumber": 600,
    "interface": false,
    "extends": [
      "Observer"
    ],
    "implements": [
      "PluginClass"
    ]
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "create",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugin/regions.js~RegionsPlugin.create",
    "access": "public",
    "description": "Regions plugin definition factory\n\nThis function must be used to create a plugin definition which can be\nused by wavesurfer to correctly instantiate the plugin.",
    "lineNumber": 610,
    "params": [
      {
        "nullable": null,
        "types": [
          "RegionsPluginParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "parameters use to initialise the plugin"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PluginDefinition"
      ],
      "spread": false,
      "description": "an object representing the plugin"
    }
  },
  {
    "__docId__": 431,
    "kind": "member",
    "name": "regions",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "static": true,
    "longname": "src/plugin/regions.js~RegionsPlugin.regions",
    "access": "public",
    "description": null,
    "lineNumber": 624,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 432,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 642,
    "undocument": true
  },
  {
    "__docId__": 433,
    "kind": "member",
    "name": "params",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#params",
    "access": "public",
    "description": null,
    "lineNumber": 643,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 434,
    "kind": "member",
    "name": "wavesurfer",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#wavesurfer",
    "access": "public",
    "description": null,
    "lineNumber": 644,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 435,
    "kind": "member",
    "name": "util",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#util",
    "access": "public",
    "description": null,
    "lineNumber": 645,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 436,
    "kind": "member",
    "name": "_onBackendCreated",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#_onBackendCreated",
    "access": "private",
    "description": null,
    "lineNumber": 659,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 437,
    "kind": "member",
    "name": "wrapper",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#wrapper",
    "access": "public",
    "description": null,
    "lineNumber": 660,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 438,
    "kind": "member",
    "name": "list",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#list",
    "access": "public",
    "description": null,
    "lineNumber": 669,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 439,
    "kind": "member",
    "name": "_onReady",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#_onReady",
    "access": "private",
    "description": null,
    "lineNumber": 670,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 441,
    "kind": "method",
    "name": "init",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#init",
    "access": "public",
    "description": null,
    "lineNumber": 681,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 442,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 692,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 443,
    "kind": "method",
    "name": "add",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#add",
    "access": "public",
    "description": "Add a region",
    "lineNumber": 705,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Region parameters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Region"
      ],
      "spread": false,
      "description": "The created region"
    }
  },
  {
    "__docId__": 444,
    "kind": "method",
    "name": "clear",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#clear",
    "access": "public",
    "description": "Remove all regions",
    "lineNumber": 720,
    "params": [],
    "return": null
  },
  {
    "__docId__": 445,
    "kind": "method",
    "name": "enableDragSelection",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#enableDragSelection",
    "access": "public",
    "description": null,
    "lineNumber": 726,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "disableDragSelection",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#disableDragSelection",
    "access": "public",
    "description": null,
    "lineNumber": 877,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 447,
    "kind": "method",
    "name": "getCurrentRegion",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#getCurrentRegion",
    "access": "public",
    "description": "Get current region\n\nThe smallest region that contains the current time. If several such\nregions exist, take the first. Return `null` if none exist.",
    "lineNumber": 889,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Region} The current region"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Region"
      ],
      "spread": false,
      "description": "The current region"
    },
    "params": []
  },
  {
    "__docId__": 448,
    "kind": "method",
    "name": "getRegionSnapToGridValue",
    "memberof": "src/plugin/regions.js~RegionsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/regions.js~RegionsPlugin#getRegionSnapToGridValue",
    "access": "public",
    "description": "Match the value to the grid, if required\n\nIf the regions plugin params have a snapToGridInterval set, return the\nvalue matching the nearest grid interval. If no snapToGridInterval is set,\nthe passed value will be returned without modification.",
    "lineNumber": 915,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} value"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the value to snap to the grid, if needed"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "the regions plugin params"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "value"
    }
  },
  {
    "__docId__": 449,
    "kind": "file",
    "name": "src/plugin/spectrogram.js",
    "content": "/**\n * Calculate FFT - Based on https://github.com/corbanbrook/dsp.js\n */\n/* eslint-disable complexity, no-redeclare, no-var, one-var */\nconst FFT = function(bufferSize, sampleRate, windowFunc, alpha) {\n    this.bufferSize = bufferSize;\n    this.sampleRate = sampleRate;\n    this.bandwidth = (2 / bufferSize) * (sampleRate / 2);\n\n    this.sinTable = new Float32Array(bufferSize);\n    this.cosTable = new Float32Array(bufferSize);\n    this.windowValues = new Float32Array(bufferSize);\n    this.reverseTable = new Uint32Array(bufferSize);\n\n    this.peakBand = 0;\n    this.peak = 0;\n\n    var i;\n    switch (windowFunc) {\n        case 'bartlett':\n            for (i = 0; i < bufferSize; i++) {\n                this.windowValues[i] =\n                    (2 / (bufferSize - 1)) *\n                    ((bufferSize - 1) / 2 - Math.abs(i - (bufferSize - 1) / 2));\n            }\n            break;\n        case 'bartlettHann':\n            for (i = 0; i < bufferSize; i++) {\n                this.windowValues[i] =\n                    0.62 -\n                    0.48 * Math.abs(i / (bufferSize - 1) - 0.5) -\n                    0.38 * Math.cos((Math.PI * 2 * i) / (bufferSize - 1));\n            }\n            break;\n        case 'blackman':\n            alpha = alpha || 0.16;\n            for (i = 0; i < bufferSize; i++) {\n                this.windowValues[i] =\n                    (1 - alpha) / 2 -\n                    0.5 * Math.cos((Math.PI * 2 * i) / (bufferSize - 1)) +\n                    (alpha / 2) *\n                        Math.cos((4 * Math.PI * i) / (bufferSize - 1));\n            }\n            break;\n        case 'cosine':\n            for (i = 0; i < bufferSize; i++) {\n                this.windowValues[i] = Math.cos(\n                    (Math.PI * i) / (bufferSize - 1) - Math.PI / 2\n                );\n            }\n            break;\n        case 'gauss':\n            alpha = alpha || 0.25;\n            for (i = 0; i < bufferSize; i++) {\n                this.windowValues[i] = Math.pow(\n                    Math.E,\n                    -0.5 *\n                        Math.pow(\n                            (i - (bufferSize - 1) / 2) /\n                                ((alpha * (bufferSize - 1)) / 2),\n                            2\n                        )\n                );\n            }\n            break;\n        case 'hamming':\n            for (i = 0; i < bufferSize; i++) {\n                this.windowValues[i] =\n                    (0.54 - 0.46) *\n                    Math.cos((Math.PI * 2 * i) / (bufferSize - 1));\n            }\n            break;\n        case 'hann':\n        case undefined:\n            for (i = 0; i < bufferSize; i++) {\n                this.windowValues[i] =\n                    0.5 * (1 - Math.cos((Math.PI * 2 * i) / (bufferSize - 1)));\n            }\n            break;\n        case 'lanczoz':\n            for (i = 0; i < bufferSize; i++) {\n                this.windowValues[i] =\n                    Math.sin(Math.PI * ((2 * i) / (bufferSize - 1) - 1)) /\n                    (Math.PI * ((2 * i) / (bufferSize - 1) - 1));\n            }\n            break;\n        case 'rectangular':\n            for (i = 0; i < bufferSize; i++) {\n                this.windowValues[i] = 1;\n            }\n            break;\n        case 'triangular':\n            for (i = 0; i < bufferSize; i++) {\n                this.windowValues[i] =\n                    (2 / bufferSize) *\n                    (bufferSize / 2 - Math.abs(i - (bufferSize - 1) / 2));\n            }\n            break;\n        default:\n            throw Error(\"No such window function '\" + windowFunc + \"'\");\n    }\n\n    var limit = 1;\n    var bit = bufferSize >> 1;\n    var i;\n\n    while (limit < bufferSize) {\n        for (i = 0; i < limit; i++) {\n            this.reverseTable[i + limit] = this.reverseTable[i] + bit;\n        }\n\n        limit = limit << 1;\n        bit = bit >> 1;\n    }\n\n    for (i = 0; i < bufferSize; i++) {\n        this.sinTable[i] = Math.sin(-Math.PI / i);\n        this.cosTable[i] = Math.cos(-Math.PI / i);\n    }\n\n    this.calculateSpectrum = function(buffer) {\n        // Locally scope variables for speed up\n        var bufferSize = this.bufferSize,\n            cosTable = this.cosTable,\n            sinTable = this.sinTable,\n            reverseTable = this.reverseTable,\n            real = new Float32Array(bufferSize),\n            imag = new Float32Array(bufferSize),\n            bSi = 2 / this.bufferSize,\n            sqrt = Math.sqrt,\n            rval,\n            ival,\n            mag,\n            spectrum = new Float32Array(bufferSize / 2);\n\n        var k = Math.floor(Math.log(bufferSize) / Math.LN2);\n\n        if (Math.pow(2, k) !== bufferSize) {\n            throw 'Invalid buffer size, must be a power of 2.';\n        }\n        if (bufferSize !== buffer.length) {\n            throw 'Supplied buffer is not the same size as defined FFT. FFT Size: ' +\n                bufferSize +\n                ' Buffer Size: ' +\n                buffer.length;\n        }\n\n        var halfSize = 1,\n            phaseShiftStepReal,\n            phaseShiftStepImag,\n            currentPhaseShiftReal,\n            currentPhaseShiftImag,\n            off,\n            tr,\n            ti,\n            tmpReal;\n\n        for (var i = 0; i < bufferSize; i++) {\n            real[i] =\n                buffer[reverseTable[i]] * this.windowValues[reverseTable[i]];\n            imag[i] = 0;\n        }\n\n        while (halfSize < bufferSize) {\n            phaseShiftStepReal = cosTable[halfSize];\n            phaseShiftStepImag = sinTable[halfSize];\n\n            currentPhaseShiftReal = 1;\n            currentPhaseShiftImag = 0;\n\n            for (var fftStep = 0; fftStep < halfSize; fftStep++) {\n                var i = fftStep;\n\n                while (i < bufferSize) {\n                    off = i + halfSize;\n                    tr =\n                        currentPhaseShiftReal * real[off] -\n                        currentPhaseShiftImag * imag[off];\n                    ti =\n                        currentPhaseShiftReal * imag[off] +\n                        currentPhaseShiftImag * real[off];\n\n                    real[off] = real[i] - tr;\n                    imag[off] = imag[i] - ti;\n                    real[i] += tr;\n                    imag[i] += ti;\n\n                    i += halfSize << 1;\n                }\n\n                tmpReal = currentPhaseShiftReal;\n                currentPhaseShiftReal =\n                    tmpReal * phaseShiftStepReal -\n                    currentPhaseShiftImag * phaseShiftStepImag;\n                currentPhaseShiftImag =\n                    tmpReal * phaseShiftStepImag +\n                    currentPhaseShiftImag * phaseShiftStepReal;\n            }\n\n            halfSize = halfSize << 1;\n        }\n\n        for (var i = 0, N = bufferSize / 2; i < N; i++) {\n            rval = real[i];\n            ival = imag[i];\n            mag = bSi * sqrt(rval * rval + ival * ival);\n\n            if (mag > this.peak) {\n                this.peakBand = i;\n                this.peak = mag;\n            }\n            spectrum[i] = mag;\n        }\n        return spectrum;\n    };\n};\n/* eslint-enable complexity, no-redeclare, no-var, one-var */\n\n/**\n * @typedef {Object} SpectrogramPluginParams\n * @property {string|HTMLElement} container Selector of element or element in\n * which to render\n * @property {number} fftSamples=512 Number of samples to fetch to FFT. Must be\n * a power of 2.\n * @property {boolean} labels Set to true to display frequency labels.\n * @property {number} noverlap Size of the overlapping window. Must be <\n * fftSamples. Auto deduced from canvas size by default.\n * @property {string} windowFunc='hann' The window function to be used. One of\n * these: `'bartlett'`, `'bartlettHann'`, `'blackman'`, `'cosine'`, `'gauss'`,\n * `'hamming'`, `'hann'`, `'lanczoz'`, `'rectangular'`, `'triangular'`\n * @property {?number} alpha Some window functions have this extra value.\n * (Between 0 and 1)\n * @property {number} pixelRatio=wavesurfer.params.pixelRatio to control the\n * size of the spectrogram in relation with its canvas. 1 = Draw on the whole\n * canvas. 2 = Draw on a quarter (1/2 the length and 1/2 the width)\n * @property {?boolean} deferInit Set to true to manually call\n * `initPlugin('spectrogram')`\n * @property {?number[][]} colorMap A 256 long array of 4-element arrays.\n * Each entry should contain a float between 0 and 1 and specify\n * r, g, b, and alpha.\n */\n\n/**\n * Render a spectrogram visualisation of the audio.\n *\n * @implements {PluginClass}\n * @extends {Observer}\n * @example\n * // es6\n * import SpectrogramPlugin from 'wavesurfer.spectrogram.js';\n *\n * // commonjs\n * var SpectrogramPlugin = require('wavesurfer.spectrogram.js');\n *\n * // if you are using <script> tags\n * var SpectrogramPlugin = window.WaveSurfer.spectrogram;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     SpectrogramPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class SpectrogramPlugin {\n    /**\n     * Spectrogram plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param  {SpectrogramPluginParams} params Parameters used to initialise the plugin\n     * @return {PluginDefinition} An object representing the plugin.\n     */\n    static create(params) {\n        return {\n            name: 'spectrogram',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            staticProps: {\n                FFT: FFT\n            },\n            instance: SpectrogramPlugin\n        };\n    }\n\n    constructor(params, ws) {\n        this.params = params;\n        this.wavesurfer = ws;\n        this.util = ws.util;\n\n        this.frequenciesDataUrl = params.frequenciesDataUrl;\n        this._onScroll = e => {\n            this.updateScroll(e);\n        };\n        this._onRender = () => {\n            this.render();\n        };\n        this._onWrapperClick = e => {\n            this._wrapperClickHandler(e);\n        };\n        this._onReady = () => {\n            const drawer = (this.drawer = ws.drawer);\n\n            this.container =\n                'string' == typeof params.container\n                    ? document.querySelector(params.container)\n                    : params.container;\n\n            if (!this.container) {\n                throw Error('No container for WaveSurfer spectrogram');\n            }\n            if (params.colorMap) {\n                if (params.colorMap.length < 256) {\n                    throw new Error('Colormap must contain 256 elements');\n                }\n                for (let i = 0; i < params.colorMap.length; i++) {\n                    const cmEntry = params.colorMap[i];\n                    if (cmEntry.length !== 4) {\n                        throw new Error(\n                            'ColorMap entries must contain 4 values'\n                        );\n                    }\n                }\n                this.colorMap = params.colorMap;\n            } else {\n                this.colorMap = [];\n                for (let i = 0; i < 256; i++) {\n                    const val = (255 - i) / 256;\n                    this.colorMap.push([val, val, val, 1]);\n                }\n            }\n            this.width = drawer.width;\n            this.pixelRatio = this.params.pixelRatio || ws.params.pixelRatio;\n            this.fftSamples =\n                this.params.fftSamples || ws.params.fftSamples || 512;\n            this.height = this.fftSamples / 2;\n            this.noverlap = params.noverlap;\n            this.windowFunc = params.windowFunc;\n            this.alpha = params.alpha;\n\n            this.createWrapper();\n            this.createCanvas();\n            this.render();\n\n            drawer.wrapper.addEventListener('scroll', this._onScroll);\n            ws.on('redraw', this._onRender);\n        };\n    }\n\n    init() {\n        // Check if wavesurfer is ready\n        if (this.wavesurfer.isReady) {\n            this._onReady();\n        } else {\n            this.wavesurfer.once('ready', this._onReady);\n        }\n    }\n\n    destroy() {\n        this.unAll();\n        this.wavesurfer.un('ready', this._onReady);\n        this.wavesurfer.un('redraw', this._onRender);\n        this.drawer.wrapper.removeEventListener('scroll', this._onScroll);\n        this.wavesurfer = null;\n        this.util = null;\n        this.params = null;\n        if (this.wrapper) {\n            this.wrapper.removeEventListener('click', this._onWrapperClick);\n            this.wrapper.parentNode.removeChild(this.wrapper);\n            this.wrapper = null;\n        }\n    }\n\n    createWrapper() {\n        const prevSpectrogram = this.container.querySelector('spectrogram');\n        if (prevSpectrogram) {\n            this.container.removeChild(prevSpectrogram);\n        }\n        const wsParams = this.wavesurfer.params;\n        this.wrapper = document.createElement('spectrogram');\n        // if labels are active\n        if (this.params.labels) {\n            const labelsEl = (this.labelsEl = document.createElement('canvas'));\n            labelsEl.classList.add('spec-labels');\n            this.drawer.style(labelsEl, {\n                left: 0,\n                position: 'absolute',\n                zIndex: 9,\n                height: `${this.height / this.pixelRatio}px`,\n                width: `${55 / this.pixelRatio}px`\n            });\n            this.wrapper.appendChild(labelsEl);\n            this.loadLabels(\n                'rgba(68,68,68,0.5)',\n                '12px',\n                '10px',\n                '',\n                '#fff',\n                '#f7f7f7',\n                'center',\n                '#specLabels'\n            );\n        }\n\n        this.drawer.style(this.wrapper, {\n            display: 'block',\n            position: 'relative',\n            userSelect: 'none',\n            webkitUserSelect: 'none',\n            height: `${this.height / this.pixelRatio}px`\n        });\n\n        if (wsParams.fillParent || wsParams.scrollParent) {\n            this.drawer.style(this.wrapper, {\n                width: '100%',\n                overflowX: 'hidden',\n                overflowY: 'hidden'\n            });\n        }\n        this.container.appendChild(this.wrapper);\n\n        this.wrapper.addEventListener('click', this._onWrapperClick);\n    }\n\n    _wrapperClickHandler(event) {\n        event.preventDefault();\n        const relX = 'offsetX' in event ? event.offsetX : event.layerX;\n        this.fireEvent('click', relX / this.width || 0);\n    }\n\n    createCanvas() {\n        const canvas = (this.canvas = this.wrapper.appendChild(\n            document.createElement('canvas')\n        ));\n\n        this.spectrCc = canvas.getContext('2d');\n\n        this.util.style(canvas, {\n            position: 'absolute',\n            zIndex: 4\n        });\n    }\n\n    render() {\n        this.updateCanvasStyle();\n\n        if (this.frequenciesDataUrl) {\n            this.loadFrequenciesData(this.frequenciesDataUrl);\n        } else {\n            this.getFrequencies(this.drawSpectrogram);\n        }\n    }\n\n    updateCanvasStyle() {\n        const width = Math.round(this.width / this.pixelRatio) + 'px';\n        this.canvas.width = this.width;\n        this.canvas.height = this.height;\n        this.canvas.style.width = width;\n    }\n\n    drawSpectrogram(frequenciesData, my) {\n        const spectrCc = my.spectrCc;\n        const length = my.wavesurfer.backend.getDuration();\n        const height = my.height;\n        const pixels = my.resample(frequenciesData);\n        const heightFactor = my.buffer ? 2 / my.buffer.numberOfChannels : 1;\n        let i;\n        let j;\n\n        for (i = 0; i < pixels.length; i++) {\n            for (j = 0; j < pixels[i].length; j++) {\n                const colorMap = my.colorMap[pixels[i][j]];\n                my.spectrCc.fillStyle =\n                    'rgba(' +\n                    colorMap[0] * 256 +\n                    ', ' +\n                    colorMap[1] * 256 +\n                    ', ' +\n                    colorMap[2] * 256 +\n                    ',' +\n                    colorMap[3] +\n                    ')';\n                my.spectrCc.fillRect(\n                    i,\n                    height - j * heightFactor,\n                    1,\n                    heightFactor\n                );\n            }\n        }\n    }\n\n    getFrequencies(callback) {\n        const fftSamples = this.fftSamples;\n        const buffer = (this.buffer = this.wavesurfer.backend.buffer);\n        const channelOne = buffer.getChannelData(0);\n        const bufferLength = buffer.length;\n        const sampleRate = buffer.sampleRate;\n        const frequencies = [];\n\n        if (!buffer) {\n            this.fireEvent('error', 'Web Audio buffer is not available');\n            return;\n        }\n\n        let noverlap = this.noverlap;\n        if (!noverlap) {\n            const uniqueSamplesPerPx = buffer.length / this.canvas.width;\n            noverlap = Math.max(0, Math.round(fftSamples - uniqueSamplesPerPx));\n        }\n\n        const fft = new FFT(\n            fftSamples,\n            sampleRate,\n            this.windowFunc,\n            this.alpha\n        );\n        const maxSlicesCount = Math.floor(\n            bufferLength / (fftSamples - noverlap)\n        );\n        let currentOffset = 0;\n\n        while (currentOffset + fftSamples < channelOne.length) {\n            const segment = channelOne.slice(\n                currentOffset,\n                currentOffset + fftSamples\n            );\n            const spectrum = fft.calculateSpectrum(segment);\n            const array = new Uint8Array(fftSamples / 2);\n            let j;\n            for (j = 0; j < fftSamples / 2; j++) {\n                array[j] = Math.max(-255, Math.log10(spectrum[j]) * 45);\n            }\n            frequencies.push(array);\n            currentOffset += fftSamples - noverlap;\n        }\n        callback(frequencies, this);\n    }\n\n    loadFrequenciesData(url) {\n        const request = this.util.fetchFile({ url: url });\n\n        request.on('success', data =>\n            this.drawSpectrogram(JSON.parse(data), this)\n        );\n        request.on('error', e => this.fireEvent('error', e));\n\n        return request;\n    }\n\n    freqType(freq) {\n        return freq >= 1000 ? (freq / 1000).toFixed(1) : Math.round(freq);\n    }\n\n    unitType(freq) {\n        return freq >= 1000 ? 'KHz' : 'Hz';\n    }\n\n    loadLabels(\n        bgFill,\n        fontSizeFreq,\n        fontSizeUnit,\n        fontType,\n        textColorFreq,\n        textColorUnit,\n        textAlign,\n        container\n    ) {\n        const frequenciesHeight = this.height;\n        bgFill = bgFill || 'rgba(68,68,68,0)';\n        fontSizeFreq = fontSizeFreq || '12px';\n        fontSizeUnit = fontSizeUnit || '10px';\n        fontType = fontType || 'Helvetica';\n        textColorFreq = textColorFreq || '#fff';\n        textColorUnit = textColorUnit || '#fff';\n        textAlign = textAlign || 'center';\n        container = container || '#specLabels';\n        const bgWidth = 55;\n        const getMaxY = frequenciesHeight || 512;\n        const labelIndex = 5 * (getMaxY / 256);\n        const freqStart = 0;\n        const step =\n            (this.wavesurfer.backend.ac.sampleRate / 2 - freqStart) /\n            labelIndex;\n\n        // prepare canvas element for labels\n        const ctx = this.labelsEl.getContext('2d');\n        this.labelsEl.height = this.height;\n        this.labelsEl.width = bgWidth;\n\n        // fill background\n        ctx.fillStyle = bgFill;\n        ctx.fillRect(0, 0, bgWidth, getMaxY);\n        ctx.fill();\n        let i;\n\n        // render labels\n        for (i = 0; i <= labelIndex; i++) {\n            ctx.textAlign = textAlign;\n            ctx.textBaseline = 'middle';\n\n            const freq = freqStart + step * i;\n            const index = Math.round(\n                (freq / (this.sampleRate / 2)) * this.fftSamples\n            );\n            const label = this.freqType(freq);\n            const units = this.unitType(freq);\n            const yLabelOffset = 2;\n            const x = 16;\n            let y;\n\n            if (i == 0) {\n                y = getMaxY + i - 10;\n                // unit label\n                ctx.fillStyle = textColorUnit;\n                ctx.font = fontSizeUnit + ' ' + fontType;\n                ctx.fillText(units, x + 24, y);\n                // freq label\n                ctx.fillStyle = textColorFreq;\n                ctx.font = fontSizeFreq + ' ' + fontType;\n                ctx.fillText(label, x, y);\n            } else {\n                y = getMaxY - i * 50 + yLabelOffset;\n                // unit label\n                ctx.fillStyle = textColorUnit;\n                ctx.font = fontSizeUnit + ' ' + fontType;\n                ctx.fillText(units, x + 24, y);\n                // freq label\n                ctx.fillStyle = textColorFreq;\n                ctx.font = fontSizeFreq + ' ' + fontType;\n                ctx.fillText(label, x, y);\n            }\n        }\n    }\n\n    updateScroll(e) {\n        if (this.wrapper) {\n            this.wrapper.scrollLeft = e.target.scrollLeft;\n        }\n    }\n\n    resample(oldMatrix) {\n        const columnsNumber = this.width;\n        const newMatrix = [];\n\n        const oldPiece = 1 / oldMatrix.length;\n        const newPiece = 1 / columnsNumber;\n        let i;\n\n        for (i = 0; i < columnsNumber; i++) {\n            const column = new Array(oldMatrix[0].length);\n            let j;\n\n            for (j = 0; j < oldMatrix.length; j++) {\n                const oldStart = j * oldPiece;\n                const oldEnd = oldStart + oldPiece;\n                const newStart = i * newPiece;\n                const newEnd = newStart + newPiece;\n\n                const overlap =\n                    oldEnd <= newStart || newEnd <= oldStart\n                        ? 0\n                        : Math.min(\n                              Math.max(oldEnd, newStart),\n                              Math.max(newEnd, oldStart)\n                          ) -\n                          Math.max(\n                              Math.min(oldEnd, newStart),\n                              Math.min(newEnd, oldStart)\n                          );\n                let k;\n                /* eslint-disable max-depth */\n                if (overlap > 0) {\n                    for (k = 0; k < oldMatrix[0].length; k++) {\n                        if (column[k] == null) {\n                            column[k] = 0;\n                        }\n                        column[k] += (overlap / newPiece) * oldMatrix[j][k];\n                    }\n                }\n                /* eslint-enable max-depth */\n            }\n\n            const intColumn = new Uint8Array(oldMatrix[0].length);\n            let m;\n\n            for (m = 0; m < oldMatrix[0].length; m++) {\n                intColumn[m] = column[m];\n            }\n\n            newMatrix.push(intColumn);\n        }\n\n        return newMatrix;\n    }\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/plugin/spectrogram.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 450,
    "kind": "function",
    "name": "FFT",
    "memberof": "src/plugin/spectrogram.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugin/spectrogram.js~FFT",
    "access": "public",
    "export": false,
    "importPath": "wavesurfer.js/src/plugin/spectrogram.js",
    "importStyle": null,
    "description": "Calculate FFT - Based on https://github.com/corbanbrook/dsp.js",
    "lineNumber": 5,
    "params": [
      {
        "name": "bufferSize",
        "types": [
          "*"
        ]
      },
      {
        "name": "sampleRate",
        "types": [
          "*"
        ]
      },
      {
        "name": "windowFunc",
        "types": [
          "*"
        ]
      },
      {
        "name": "alpha",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 451,
    "kind": "typedef",
    "name": "SpectrogramPluginParams",
    "memberof": "src/plugin/spectrogram.js",
    "static": true,
    "longname": "src/plugin/spectrogram.js~SpectrogramPluginParams",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string",
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": "Selector of element or element in\nwhich to render"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "512",
        "defaultRaw": 512,
        "name": "fftSamples",
        "description": "Number of samples to fetch to FFT. Must be\na power of 2."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "labels",
        "description": "Set to true to display frequency labels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "noverlap",
        "description": "Size of the overlapping window. Must be <\nfftSamples. Auto deduced from canvas size by default."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'hann'",
        "defaultRaw": "'hann'",
        "name": "windowFunc",
        "description": "The window function to be used. One of\nthese: `'bartlett'`, `'bartlettHann'`, `'blackman'`, `'cosine'`, `'gauss'`,\n`'hamming'`, `'hann'`, `'lanczoz'`, `'rectangular'`, `'triangular'`"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "alpha",
        "description": "Some window functions have this extra value.\n(Between 0 and 1)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "wavesurfer.params.pixelRatio",
        "defaultRaw": "wavesurfer.params.pixelRatio",
        "name": "pixelRatio",
        "description": "to control the\nsize of the spectrogram in relation with its canvas. 1 = Draw on the whole\ncanvas. 2 = Draw on a quarter (1/2 the length and 1/2 the width)"
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "deferInit",
        "description": "Set to true to manually call\n`initPlugin('spectrogram')`"
      },
      {
        "nullable": true,
        "types": [
          "number[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "colorMap",
        "description": "A 256 long array of 4-element arrays.\nEach entry should contain a float between 0 and 1 and specify\nr, g, b, and alpha."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SpectrogramPluginParams"
    }
  },
  {
    "__docId__": 452,
    "kind": "class",
    "name": "SpectrogramPlugin",
    "memberof": "src/plugin/spectrogram.js",
    "static": true,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/plugin/spectrogram.js",
    "importStyle": "SpectrogramPlugin",
    "description": "Render a spectrogram visualisation of the audio.",
    "examples": [
      "// es6\nimport SpectrogramPlugin from 'wavesurfer.spectrogram.js';\n\n// commonjs\nvar SpectrogramPlugin = require('wavesurfer.spectrogram.js');\n\n// if you are using <script> tags\nvar SpectrogramPlugin = window.WaveSurfer.spectrogram;\n\n// ... initialising wavesurfer with the plugin\nvar wavesurfer = WaveSurfer.create({\n  // wavesurfer options ...\n  plugins: [\n    SpectrogramPlugin.create({\n      // plugin options ...\n    })\n  ]\n});"
    ],
    "lineNumber": 268,
    "interface": false,
    "extends": [
      "Observer"
    ],
    "implements": [
      "PluginClass"
    ]
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "create",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin.create",
    "access": "public",
    "description": "Spectrogram plugin definition factory\n\nThis function must be used to create a plugin definition which can be\nused by wavesurfer to correctly instantiate the plugin.",
    "lineNumber": 278,
    "params": [
      {
        "nullable": null,
        "types": [
          "SpectrogramPluginParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Parameters used to initialise the plugin"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PluginDefinition"
      ],
      "spread": false,
      "description": "An object representing the plugin."
    }
  },
  {
    "__docId__": 454,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 290,
    "undocument": true
  },
  {
    "__docId__": 455,
    "kind": "member",
    "name": "params",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#params",
    "access": "public",
    "description": null,
    "lineNumber": 291,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 456,
    "kind": "member",
    "name": "wavesurfer",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#wavesurfer",
    "access": "public",
    "description": null,
    "lineNumber": 292,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 457,
    "kind": "member",
    "name": "util",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#util",
    "access": "public",
    "description": null,
    "lineNumber": 293,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 458,
    "kind": "member",
    "name": "frequenciesDataUrl",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#frequenciesDataUrl",
    "access": "public",
    "description": null,
    "lineNumber": 295,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 459,
    "kind": "member",
    "name": "_onScroll",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#_onScroll",
    "access": "private",
    "description": null,
    "lineNumber": 296,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 460,
    "kind": "member",
    "name": "_onRender",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#_onRender",
    "access": "private",
    "description": null,
    "lineNumber": 299,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 461,
    "kind": "member",
    "name": "_onWrapperClick",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#_onWrapperClick",
    "access": "private",
    "description": null,
    "lineNumber": 302,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 462,
    "kind": "member",
    "name": "_onReady",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#_onReady",
    "access": "private",
    "description": null,
    "lineNumber": 305,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 463,
    "kind": "member",
    "name": "container",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#container",
    "access": "public",
    "description": null,
    "lineNumber": 308,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 464,
    "kind": "member",
    "name": "colorMap",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#colorMap",
    "access": "public",
    "description": null,
    "lineNumber": 328,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 466,
    "kind": "member",
    "name": "width",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#width",
    "access": "public",
    "description": null,
    "lineNumber": 336,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 467,
    "kind": "member",
    "name": "pixelRatio",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#pixelRatio",
    "access": "public",
    "description": null,
    "lineNumber": 337,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 468,
    "kind": "member",
    "name": "fftSamples",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#fftSamples",
    "access": "public",
    "description": null,
    "lineNumber": 338,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 469,
    "kind": "member",
    "name": "height",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#height",
    "access": "public",
    "description": null,
    "lineNumber": 340,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 470,
    "kind": "member",
    "name": "noverlap",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#noverlap",
    "access": "public",
    "description": null,
    "lineNumber": 341,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 471,
    "kind": "member",
    "name": "windowFunc",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#windowFunc",
    "access": "public",
    "description": null,
    "lineNumber": 342,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 472,
    "kind": "member",
    "name": "alpha",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#alpha",
    "access": "public",
    "description": null,
    "lineNumber": 343,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 473,
    "kind": "method",
    "name": "init",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#init",
    "access": "public",
    "description": null,
    "lineNumber": 354,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 474,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 363,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 478,
    "kind": "member",
    "name": "wrapper",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#wrapper",
    "access": "public",
    "description": null,
    "lineNumber": 374,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 479,
    "kind": "method",
    "name": "createWrapper",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#createWrapper",
    "access": "public",
    "description": null,
    "lineNumber": 378,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 481,
    "kind": "method",
    "name": "_wrapperClickHandler",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#_wrapperClickHandler",
    "access": "private",
    "description": null,
    "lineNumber": 429,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 482,
    "kind": "method",
    "name": "createCanvas",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#createCanvas",
    "access": "public",
    "description": null,
    "lineNumber": 435,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 483,
    "kind": "member",
    "name": "spectrCc",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#spectrCc",
    "access": "public",
    "description": null,
    "lineNumber": 440,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 484,
    "kind": "method",
    "name": "render",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#render",
    "access": "public",
    "description": null,
    "lineNumber": 448,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 485,
    "kind": "method",
    "name": "updateCanvasStyle",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#updateCanvasStyle",
    "access": "public",
    "description": null,
    "lineNumber": 458,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 486,
    "kind": "method",
    "name": "drawSpectrogram",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#drawSpectrogram",
    "access": "public",
    "description": null,
    "lineNumber": 465,
    "undocument": true,
    "params": [
      {
        "name": "frequenciesData",
        "types": [
          "*"
        ]
      },
      {
        "name": "my",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 487,
    "kind": "method",
    "name": "getFrequencies",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#getFrequencies",
    "access": "public",
    "description": null,
    "lineNumber": 497,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 488,
    "kind": "method",
    "name": "loadFrequenciesData",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#loadFrequenciesData",
    "access": "public",
    "description": null,
    "lineNumber": 544,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 489,
    "kind": "method",
    "name": "freqType",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#freqType",
    "access": "public",
    "description": null,
    "lineNumber": 555,
    "undocument": true,
    "params": [
      {
        "name": "freq",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 490,
    "kind": "method",
    "name": "unitType",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#unitType",
    "access": "public",
    "description": null,
    "lineNumber": 559,
    "undocument": true,
    "params": [
      {
        "name": "freq",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 491,
    "kind": "method",
    "name": "loadLabels",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#loadLabels",
    "access": "public",
    "description": null,
    "lineNumber": 563,
    "undocument": true,
    "params": [
      {
        "name": "bgFill",
        "types": [
          "*"
        ]
      },
      {
        "name": "fontSizeFreq",
        "types": [
          "*"
        ]
      },
      {
        "name": "fontSizeUnit",
        "types": [
          "*"
        ]
      },
      {
        "name": "fontType",
        "types": [
          "*"
        ]
      },
      {
        "name": "textColorFreq",
        "types": [
          "*"
        ]
      },
      {
        "name": "textColorUnit",
        "types": [
          "*"
        ]
      },
      {
        "name": "textAlign",
        "types": [
          "*"
        ]
      },
      {
        "name": "container",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 492,
    "kind": "method",
    "name": "updateScroll",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#updateScroll",
    "access": "public",
    "description": null,
    "lineNumber": 640,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "resample",
    "memberof": "src/plugin/spectrogram.js~SpectrogramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/spectrogram.js~SpectrogramPlugin#resample",
    "access": "public",
    "description": null,
    "lineNumber": 646,
    "undocument": true,
    "params": [
      {
        "name": "oldMatrix",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 494,
    "kind": "file",
    "name": "src/plugin/timeline.js",
    "content": "/**\n * @typedef {Object} TimelinePluginParams\n * @desc Extends the `WavesurferParams` wavesurfer was initialised with\n * @property {!string|HTMLElement} container CSS selector or HTML element where\n * the timeline should be drawn. This is the only required parameter.\n * @property {number} notchPercentHeight=90 Height of notches in percent\n * @property {string} unlabeledNotchColor='#c0c0c0' The colour of the notches\n * that do not have labels\n * @property {string} primaryColor='#000' The colour of the main notches\n * @property {string} secondaryColor='#c0c0c0' The colour of the secondary\n * notches\n * @property {string} primaryFontColor='#000' The colour of the labels next to\n * the main notches\n * @property {string} secondaryFontColor='#000' The colour of the labels next to\n * the secondary notches\n * @property {number} labelPadding=5 The padding between the label and the notch\n * @property {?number} zoomDebounce A debounce timeout to increase rendering\n * performance for large files\n * @property {string} fontFamily='Arial'\n * @property {number} fontSize=10 Font size of labels in pixels\n * @property {?number} duration Length of the track in seconds. Overrides\n * getDuration() for setting length of timeline\n * @property {function} formatTimeCallback (sec, pxPerSec) -> label\n * @property {function} timeInterval (pxPerSec) -> seconds between notches\n * @property {function} primaryLabelInterval (pxPerSec) -> cadence between\n * labels in primary color\n * @property {function} secondaryLabelInterval (pxPerSec) -> cadence between\n * labels in secondary color\n * @property {?number} offset Offset for the timeline start in seconds. May also be\n * negative.\n * @property {?boolean} deferInit Set to true to manually call\n * `initPlugin('timeline')`\n */\n\n/**\n * Adds a timeline to the waveform.\n *\n * @implements {PluginClass}\n * @extends {Observer}\n * @example\n * // es6\n * import TimelinePlugin from 'wavesurfer.timeline.js';\n *\n * // commonjs\n * var TimelinePlugin = require('wavesurfer.timeline.js');\n *\n * // if you are using <script> tags\n * var TimelinePlugin = window.WaveSurfer.timeline;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     TimelinePlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class TimelinePlugin {\n    /**\n     * Timeline plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param  {TimelinePluginParams} params parameters use to initialise the plugin\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    static create(params) {\n        return {\n            name: 'timeline',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            instance: TimelinePlugin\n        };\n    }\n\n    // event handlers\n    /** @private */\n    _onScroll = () => {\n        if (this.wrapper && this.drawer.wrapper) {\n            this.wrapper.scrollLeft = this.drawer.wrapper.scrollLeft;\n        }\n    };\n\n    /**\n     * @private\n     * @returns {void}\n     */\n    _onRedraw = () => this.render();\n\n    /** @private */\n    _onReady = () => {\n        const ws = this.wavesurfer;\n        this.drawer = ws.drawer;\n        this.pixelRatio = ws.drawer.params.pixelRatio;\n        this.maxCanvasWidth = ws.drawer.maxCanvasWidth || ws.drawer.width;\n        this.maxCanvasElementWidth =\n            ws.drawer.maxCanvasElementWidth ||\n            Math.round(this.maxCanvasWidth / this.pixelRatio);\n\n        // add listeners\n        ws.drawer.wrapper.addEventListener('scroll', this._onScroll);\n        ws.on('redraw', this._onRedraw);\n        ws.on('zoom', this._onZoom);\n\n        this.render();\n    };\n\n    /**\n     * @private\n     * @param {object} e Click event\n     */\n    _onWrapperClick = e => {\n        e.preventDefault();\n        const relX = 'offsetX' in e ? e.offsetX : e.layerX;\n        this.fireEvent('click', relX / this.wrapper.scrollWidth || 0);\n    };\n\n    /**\n     * Creates an instance of TimelinePlugin.\n     *\n     * You probably want to use TimelinePlugin.create()\n     *\n     * @param {TimelinePluginParams} params Plugin parameters\n     * @param {object} ws Wavesurfer instance\n     */\n    constructor(params, ws) {\n        /** @private */\n        this.container =\n            'string' == typeof params.container\n                ? document.querySelector(params.container)\n                : params.container;\n\n        if (!this.container) {\n            throw new Error('No container for wavesurfer timeline');\n        }\n        /** @private */\n        this.wavesurfer = ws;\n        /** @private */\n        this.util = ws.util;\n        /** @private */\n        this.params = this.util.extend(\n            {},\n            {\n                height: 20,\n                notchPercentHeight: 90,\n                labelPadding: 5,\n                unlabeledNotchColor: '#c0c0c0',\n                primaryColor: '#000',\n                secondaryColor: '#c0c0c0',\n                primaryFontColor: '#000',\n                secondaryFontColor: '#000',\n                fontFamily: 'Arial',\n                fontSize: 10,\n                duration: null,\n                zoomDebounce: false,\n                formatTimeCallback: this.defaultFormatTimeCallback,\n                timeInterval: this.defaultTimeInterval,\n                primaryLabelInterval: this.defaultPrimaryLabelInterval,\n                secondaryLabelInterval: this.defaultSecondaryLabelInterval,\n                offset: 0\n            },\n            params\n        );\n\n        /** @private */\n        this.canvases = [];\n        /** @private */\n        this.wrapper = null;\n        /** @private */\n        this.drawer = null;\n        /** @private */\n        this.pixelRatio = null;\n        /** @private */\n        this.maxCanvasWidth = null;\n        /** @private */\n        this.maxCanvasElementWidth = null;\n        /**\n         * This event handler has to be in the constructor function because it\n         * relies on the debounce function which is only available after\n         * instantiation\n         *\n         * Use a debounced function if `params.zoomDebounce` is defined\n         *\n         * @private\n         * @returns {void}\n         */\n        this._onZoom = this.params.zoomDebounce\n            ? this.wavesurfer.util.debounce(\n                  () => this.render(),\n                  this.params.zoomDebounce\n              )\n            : () => this.render();\n    }\n\n    /**\n     * Initialisation function used by the plugin API\n     */\n    init() {\n        // Check if ws is ready\n        if (this.wavesurfer.isReady) {\n            this._onReady();\n        } else {\n            this.wavesurfer.once('ready', this._onReady);\n        }\n    }\n\n    /**\n     * Destroy function used by the plugin API\n     */\n    destroy() {\n        this.unAll();\n        this.wavesurfer.un('redraw', this._onRedraw);\n        this.wavesurfer.un('zoom', this._onZoom);\n        this.wavesurfer.un('ready', this._onReady);\n        this.wavesurfer.drawer.wrapper.removeEventListener(\n            'scroll',\n            this._onScroll\n        );\n        if (this.wrapper && this.wrapper.parentNode) {\n            this.wrapper.removeEventListener('click', this._onWrapperClick);\n            this.wrapper.parentNode.removeChild(this.wrapper);\n            this.wrapper = null;\n        }\n    }\n\n    /**\n     * Create a timeline element to wrap the canvases drawn by this plugin\n     *\n     * @private\n     */\n    createWrapper() {\n        const wsParams = this.wavesurfer.params;\n        this.container.innerHTML = '';\n        this.wrapper = this.container.appendChild(\n            document.createElement('timeline')\n        );\n        this.util.style(this.wrapper, {\n            display: 'block',\n            position: 'relative',\n            userSelect: 'none',\n            webkitUserSelect: 'none',\n            height: `${this.params.height}px`\n        });\n\n        if (wsParams.fillParent || wsParams.scrollParent) {\n            this.util.style(this.wrapper, {\n                width: '100%',\n                overflowX: 'hidden',\n                overflowY: 'hidden'\n            });\n        }\n\n        this.wrapper.addEventListener('click', this._onWrapperClick);\n    }\n\n    /**\n     * Render the timeline (also updates the already rendered timeline)\n     *\n     * @private\n     */\n    render() {\n        if (!this.wrapper) {\n            this.createWrapper();\n        }\n        this.updateCanvases();\n        this.updateCanvasesPositioning();\n        this.renderCanvases();\n    }\n\n    /**\n     * Add new timeline canvas\n     *\n     * @private\n     */\n    addCanvas() {\n        const canvas = this.wrapper.appendChild(\n            document.createElement('canvas')\n        );\n        this.canvases.push(canvas);\n        this.util.style(canvas, {\n            position: 'absolute',\n            zIndex: 4\n        });\n    }\n\n    /**\n     * Remove timeline canvas\n     *\n     * @private\n     */\n    removeCanvas() {\n        const canvas = this.canvases.pop();\n        canvas.parentElement.removeChild(canvas);\n    }\n\n    /**\n     * Make sure the correct of timeline canvas elements exist and are cached in\n     * this.canvases\n     *\n     * @private\n     */\n    updateCanvases() {\n        const totalWidth = Math.round(this.drawer.wrapper.scrollWidth);\n        const requiredCanvases = Math.ceil(\n            totalWidth / this.maxCanvasElementWidth\n        );\n\n        while (this.canvases.length < requiredCanvases) {\n            this.addCanvas();\n        }\n\n        while (this.canvases.length > requiredCanvases) {\n            this.removeCanvas();\n        }\n    }\n\n    /**\n     * Update the dimensions and positioning style for all the timeline canvases\n     *\n     * @private\n     */\n    updateCanvasesPositioning() {\n        // cache length for performance\n        const canvasesLength = this.canvases.length;\n        this.canvases.forEach((canvas, i) => {\n            // canvas width is the max element width, or if it is the last the\n            // required width\n            const canvasWidth =\n                i === canvasesLength - 1\n                    ? this.drawer.wrapper.scrollWidth -\n                      this.maxCanvasElementWidth * (canvasesLength - 1)\n                    : this.maxCanvasElementWidth;\n            // set dimensions and style\n            canvas.width = canvasWidth * this.pixelRatio;\n            // on certain pixel ratios the canvas appears cut off at the bottom,\n            // therefore leave 1px extra\n            canvas.height = (this.params.height + 1) * this.pixelRatio;\n            this.util.style(canvas, {\n                width: `${canvasWidth}px`,\n                height: `${this.params.height}px`,\n                left: `${i * this.maxCanvasElementWidth}px`\n            });\n        });\n    }\n\n    /**\n     * Render the timeline labels and notches\n     *\n     * @private\n     */\n    renderCanvases() {\n        const duration =\n            this.wavesurfer.timeline.params.duration ||\n            this.wavesurfer.backend.getDuration();\n\n        if (duration <= 0) {\n            return;\n        }\n        const wsParams = this.wavesurfer.params;\n        const fontSize = this.params.fontSize * wsParams.pixelRatio;\n        const totalSeconds = parseInt(duration, 10) + 1;\n        const width =\n            wsParams.fillParent && !wsParams.scrollParent\n                ? this.drawer.getWidth()\n                : this.drawer.wrapper.scrollWidth * wsParams.pixelRatio;\n        const height1 = this.params.height * this.pixelRatio;\n        const height2 =\n            this.params.height *\n            (this.params.notchPercentHeight / 100) *\n            this.pixelRatio;\n        const pixelsPerSecond = width / duration;\n\n        const formatTime = this.params.formatTimeCallback;\n        // if parameter is function, call the function with\n        // pixelsPerSecond, otherwise simply take the value as-is\n        const intervalFnOrVal = option =>\n            typeof option === 'function' ? option(pixelsPerSecond) : option;\n        const timeInterval = intervalFnOrVal(this.params.timeInterval);\n        const primaryLabelInterval = intervalFnOrVal(\n            this.params.primaryLabelInterval\n        );\n        const secondaryLabelInterval = intervalFnOrVal(\n            this.params.secondaryLabelInterval\n        );\n\n        let curPixel = pixelsPerSecond * this.params.offset;\n        let curSeconds = 0;\n        let i;\n        // build an array of position data with index, second and pixel data,\n        // this is then used multiple times below\n        const positioning = [];\n        for (i = 0; i < totalSeconds / timeInterval; i++) {\n            positioning.push([i, curSeconds, curPixel]);\n            curSeconds += timeInterval;\n            curPixel += pixelsPerSecond * timeInterval;\n        }\n\n        // iterate over each position\n        const renderPositions = cb => {\n            positioning.forEach(pos => {\n                cb(pos[0], pos[1], pos[2]);\n            });\n        };\n\n        // render primary labels\n        this.setFillStyles(this.params.primaryColor);\n        this.setFonts(`${fontSize}px ${this.params.fontFamily}`);\n        this.setFillStyles(this.params.primaryFontColor);\n        renderPositions((i, curSeconds, curPixel) => {\n            if (i % primaryLabelInterval === 0) {\n                this.fillRect(curPixel, 0, 1, height1);\n                this.fillText(\n                    formatTime(curSeconds, pixelsPerSecond),\n                    curPixel + this.params.labelPadding * this.pixelRatio,\n                    height1\n                );\n            }\n        });\n\n        // render secondary labels\n        this.setFillStyles(this.params.secondaryColor);\n        this.setFonts(`${fontSize}px ${this.params.fontFamily}`);\n        this.setFillStyles(this.params.secondaryFontColor);\n        renderPositions((i, curSeconds, curPixel) => {\n            if (i % secondaryLabelInterval === 0) {\n                this.fillRect(curPixel, 0, 1, height1);\n                this.fillText(\n                    formatTime(curSeconds, pixelsPerSecond),\n                    curPixel + this.params.labelPadding * this.pixelRatio,\n                    height1\n                );\n            }\n        });\n\n        // render the actual notches (when no labels are used)\n        this.setFillStyles(this.params.unlabeledNotchColor);\n        renderPositions((i, curSeconds, curPixel) => {\n            if (\n                i % secondaryLabelInterval !== 0 &&\n                i % primaryLabelInterval !== 0\n            ) {\n                this.fillRect(curPixel, 0, 1, height2);\n            }\n        });\n    }\n\n    /**\n     * Set the canvas fill style\n     *\n     * @param {DOMString|CanvasGradient|CanvasPattern} fillStyle Fill style to\n     * use\n     * @private\n     */\n    setFillStyles(fillStyle) {\n        this.canvases.forEach(canvas => {\n            canvas.getContext('2d').fillStyle = fillStyle;\n        });\n    }\n\n    /**\n     * Set the canvas font\n     *\n     * @param {DOMString} font Font to use\n     * @private\n     */\n    setFonts(font) {\n        this.canvases.forEach(canvas => {\n            canvas.getContext('2d').font = font;\n        });\n    }\n\n    /**\n     * Draw a rectangle on the canvases\n     *\n     * (it figures out the offset for each canvas)\n     *\n     * @param {number} x X-position\n     * @param {number} y Y-position\n     * @param {number} width Width\n     * @param {number} height Height\n     * @private\n     */\n    fillRect(x, y, width, height) {\n        this.canvases.forEach((canvas, i) => {\n            const leftOffset = i * this.maxCanvasWidth;\n\n            const intersection = {\n                x1: Math.max(x, i * this.maxCanvasWidth),\n                y1: y,\n                x2: Math.min(x + width, i * this.maxCanvasWidth + canvas.width),\n                y2: y + height\n            };\n\n            if (intersection.x1 < intersection.x2) {\n                canvas\n                    .getContext('2d')\n                    .fillRect(\n                        intersection.x1 - leftOffset,\n                        intersection.y1,\n                        intersection.x2 - intersection.x1,\n                        intersection.y2 - intersection.y1\n                    );\n            }\n        });\n    }\n\n    /**\n     * Fill a given text on the canvases\n     *\n     * @param {string} text Text to render\n     * @param {number} x X-position\n     * @param {number} y Y-position\n     * @private\n     */\n    fillText(text, x, y) {\n        let textWidth;\n        let xOffset = 0;\n\n        this.canvases.forEach(canvas => {\n            const context = canvas.getContext('2d');\n            const canvasWidth = context.canvas.width;\n\n            if (xOffset > x + textWidth) {\n                return;\n            }\n\n            if (xOffset + canvasWidth > x) {\n                textWidth = context.measureText(text).width;\n                context.fillText(text, x - xOffset, y);\n            }\n\n            xOffset += canvasWidth;\n        });\n    }\n\n    /**\n     * Turn the time into a suitable label for the time.\n     *\n     * @param {number} seconds Seconds to format\n     * @param {number} pxPerSec Pixels per second\n     * @returns {number} Time\n     */\n    defaultFormatTimeCallback(seconds, pxPerSec) {\n        if (seconds / 60 > 1) {\n            // calculate minutes and seconds from seconds count\n            const minutes = parseInt(seconds / 60, 10);\n            seconds = parseInt(seconds % 60, 10);\n            // fill up seconds with zeroes\n            seconds = seconds < 10 ? '0' + seconds : seconds;\n            return `${minutes}:${seconds}`;\n        }\n        return Math.round(seconds * 1000) / 1000;\n    }\n\n    /**\n     * Return how many seconds should be between each notch\n     *\n     * @param {number} pxPerSec Pixels per second\n     * @returns {number} Time\n     */\n    defaultTimeInterval(pxPerSec) {\n        if (pxPerSec >= 25) {\n            return 1;\n        } else if (pxPerSec * 5 >= 25) {\n            return 5;\n        } else if (pxPerSec * 15 >= 25) {\n            return 15;\n        }\n        return Math.ceil(0.5 / pxPerSec) * 60;\n    }\n\n    /**\n     * Return the cadence of notches that get labels in the primary color.\n     *\n     * @param {number} pxPerSec Pixels per second\n     * @returns {number} Cadence\n     */\n    defaultPrimaryLabelInterval(pxPerSec) {\n        if (pxPerSec >= 25) {\n            return 10;\n        } else if (pxPerSec * 5 >= 25) {\n            return 6;\n        } else if (pxPerSec * 15 >= 25) {\n            return 4;\n        }\n        return 4;\n    }\n\n    /**\n     * Return the cadence of notches that get labels in the secondary color.\n     *\n     * @param {number} pxPerSec Pixels per second\n     * @returns {number} Cadence\n     */\n    defaultSecondaryLabelInterval(pxPerSec) {\n        if (pxPerSec >= 25) {\n            return 5;\n        } else if (pxPerSec * 5 >= 25) {\n            return 2;\n        } else if (pxPerSec * 15 >= 25) {\n            return 2;\n        }\n        return 2;\n    }\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/plugin/timeline.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 495,
    "kind": "typedef",
    "name": "TimelinePluginParams",
    "memberof": "src/plugin/timeline.js",
    "static": true,
    "longname": "src/plugin/timeline.js~TimelinePluginParams",
    "access": "public",
    "description": "Extends the `WavesurferParams` wavesurfer was initialised with",
    "properties": [
      {
        "nullable": false,
        "types": [
          "string",
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": "CSS selector or HTML element where\nthe timeline should be drawn. This is the only required parameter."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "90",
        "defaultRaw": 90,
        "name": "notchPercentHeight",
        "description": "Height of notches in percent"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'#c0c0c0'",
        "defaultRaw": "'#c0c0c0'",
        "name": "unlabeledNotchColor",
        "description": "The colour of the notches\nthat do not have labels"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'#000'",
        "defaultRaw": "'#000'",
        "name": "primaryColor",
        "description": "The colour of the main notches"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'#c0c0c0'",
        "defaultRaw": "'#c0c0c0'",
        "name": "secondaryColor",
        "description": "The colour of the secondary\nnotches"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'#000'",
        "defaultRaw": "'#000'",
        "name": "primaryFontColor",
        "description": "The colour of the labels next to\nthe main notches"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'#000'",
        "defaultRaw": "'#000'",
        "name": "secondaryFontColor",
        "description": "The colour of the labels next to\nthe secondary notches"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "5",
        "defaultRaw": 5,
        "name": "labelPadding",
        "description": "The padding between the label and the notch"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "zoomDebounce",
        "description": "A debounce timeout to increase rendering\nperformance for large files"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'Arial'",
        "defaultRaw": "'Arial'",
        "name": "fontFamily",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "fontSize",
        "description": "Font size of labels in pixels"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "Length of the track in seconds. Overrides\ngetDuration() for setting length of timeline"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "formatTimeCallback",
        "description": "(sec, pxPerSec) -> label"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "timeInterval",
        "description": "(pxPerSec) -> seconds between notches"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "primaryLabelInterval",
        "description": "(pxPerSec) -> cadence between\nlabels in primary color"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "secondaryLabelInterval",
        "description": "(pxPerSec) -> cadence between\nlabels in secondary color"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "offset",
        "description": "Offset for the timeline start in seconds. May also be\nnegative."
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "deferInit",
        "description": "Set to true to manually call\n`initPlugin('timeline')`"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TimelinePluginParams"
    }
  },
  {
    "__docId__": 496,
    "kind": "class",
    "name": "TimelinePlugin",
    "memberof": "src/plugin/timeline.js",
    "static": true,
    "longname": "src/plugin/timeline.js~TimelinePlugin",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/plugin/timeline.js",
    "importStyle": "TimelinePlugin",
    "description": "Adds a timeline to the waveform.",
    "examples": [
      "// es6\nimport TimelinePlugin from 'wavesurfer.timeline.js';\n\n// commonjs\nvar TimelinePlugin = require('wavesurfer.timeline.js');\n\n// if you are using <script> tags\nvar TimelinePlugin = window.WaveSurfer.timeline;\n\n// ... initialising wavesurfer with the plugin\nvar wavesurfer = WaveSurfer.create({\n  // wavesurfer options ...\n  plugins: [\n    TimelinePlugin.create({\n      // plugin options ...\n    })\n  ]\n});"
    ],
    "lineNumber": 60,
    "interface": false,
    "extends": [
      "Observer"
    ],
    "implements": [
      "PluginClass"
    ]
  },
  {
    "__docId__": 497,
    "kind": "method",
    "name": "create",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugin/timeline.js~TimelinePlugin.create",
    "access": "public",
    "description": "Timeline plugin definition factory\n\nThis function must be used to create a plugin definition which can be\nused by wavesurfer to correctly instantiate the plugin.",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "TimelinePluginParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "parameters use to initialise the plugin"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PluginDefinition"
      ],
      "spread": false,
      "description": "an object representing the plugin"
    }
  },
  {
    "__docId__": 498,
    "kind": "member",
    "name": "_onScroll",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#_onScroll",
    "access": "private",
    "description": null,
    "lineNumber": 81,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 499,
    "kind": "member",
    "name": "_onRedraw",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#_onRedraw",
    "access": "private",
    "description": "",
    "lineNumber": 91,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 500,
    "kind": "member",
    "name": "_onReady",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#_onReady",
    "access": "private",
    "description": null,
    "lineNumber": 94,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 501,
    "kind": "member",
    "name": "drawer",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "longname": "src/plugin/timeline.js~TimelinePlugin#drawer",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 502,
    "kind": "member",
    "name": "pixelRatio",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "longname": "src/plugin/timeline.js~TimelinePlugin#pixelRatio",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 503,
    "kind": "member",
    "name": "maxCanvasWidth",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "longname": "src/plugin/timeline.js~TimelinePlugin#maxCanvasWidth",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 504,
    "kind": "member",
    "name": "maxCanvasElementWidth",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "longname": "src/plugin/timeline.js~TimelinePlugin#maxCanvasElementWidth",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 505,
    "kind": "member",
    "name": "_onWrapperClick",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#_onWrapperClick",
    "access": "private",
    "description": "",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "Click event"
      }
    ],
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 506,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#constructor",
    "access": "public",
    "description": "Creates an instance of TimelinePlugin.\n\nYou probably want to use TimelinePlugin.create()",
    "lineNumber": 129,
    "params": [
      {
        "nullable": null,
        "types": [
          "TimelinePluginParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Plugin parameters"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ws",
        "description": "Wavesurfer instance"
      }
    ]
  },
  {
    "__docId__": 507,
    "kind": "member",
    "name": "container",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#container",
    "access": "private",
    "description": null,
    "lineNumber": 131,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 508,
    "kind": "member",
    "name": "wavesurfer",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#wavesurfer",
    "access": "private",
    "description": null,
    "lineNumber": 140,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 509,
    "kind": "member",
    "name": "util",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#util",
    "access": "private",
    "description": null,
    "lineNumber": 142,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 510,
    "kind": "member",
    "name": "params",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#params",
    "access": "private",
    "description": null,
    "lineNumber": 144,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 511,
    "kind": "member",
    "name": "canvases",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#canvases",
    "access": "private",
    "description": null,
    "lineNumber": 169,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 512,
    "kind": "member",
    "name": "wrapper",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#wrapper",
    "access": "private",
    "description": null,
    "lineNumber": 171,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 517,
    "kind": "member",
    "name": "_onZoom",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#_onZoom",
    "access": "private",
    "description": "This event handler has to be in the constructor function because it\nrelies on the debounce function which is only available after\ninstantiation\n\nUse a debounced function if `params.zoomDebounce` is defined",
    "lineNumber": 190,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 518,
    "kind": "method",
    "name": "init",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#init",
    "access": "public",
    "description": "Initialisation function used by the plugin API",
    "lineNumber": 201,
    "params": [],
    "return": null
  },
  {
    "__docId__": 519,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#destroy",
    "access": "public",
    "description": "Destroy function used by the plugin API",
    "lineNumber": 213,
    "params": [],
    "return": null
  },
  {
    "__docId__": 521,
    "kind": "method",
    "name": "createWrapper",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#createWrapper",
    "access": "private",
    "description": "Create a timeline element to wrap the canvases drawn by this plugin",
    "lineNumber": 234,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 523,
    "kind": "method",
    "name": "render",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#render",
    "access": "private",
    "description": "Render the timeline (also updates the already rendered timeline)",
    "lineNumber": 264,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 524,
    "kind": "method",
    "name": "addCanvas",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#addCanvas",
    "access": "private",
    "description": "Add new timeline canvas",
    "lineNumber": 278,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 525,
    "kind": "method",
    "name": "removeCanvas",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#removeCanvas",
    "access": "private",
    "description": "Remove timeline canvas",
    "lineNumber": 294,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 526,
    "kind": "method",
    "name": "updateCanvases",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#updateCanvases",
    "access": "private",
    "description": "Make sure the correct of timeline canvas elements exist and are cached in\nthis.canvases",
    "lineNumber": 305,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 527,
    "kind": "method",
    "name": "updateCanvasesPositioning",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#updateCanvasesPositioning",
    "access": "private",
    "description": "Update the dimensions and positioning style for all the timeline canvases",
    "lineNumber": 325,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 528,
    "kind": "method",
    "name": "renderCanvases",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#renderCanvases",
    "access": "private",
    "description": "Render the timeline labels and notches",
    "lineNumber": 354,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 529,
    "kind": "method",
    "name": "setFillStyles",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#setFillStyles",
    "access": "private",
    "description": "Set the canvas fill style",
    "lineNumber": 457,
    "params": [
      {
        "nullable": null,
        "types": [
          "DOMString",
          "CanvasGradient",
          "CanvasPattern"
        ],
        "spread": false,
        "optional": false,
        "name": "fillStyle",
        "description": "Fill style to\nuse"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 530,
    "kind": "method",
    "name": "setFonts",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#setFonts",
    "access": "private",
    "description": "Set the canvas font",
    "lineNumber": 469,
    "params": [
      {
        "nullable": null,
        "types": [
          "DOMString"
        ],
        "spread": false,
        "optional": false,
        "name": "font",
        "description": "Font to use"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 531,
    "kind": "method",
    "name": "fillRect",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#fillRect",
    "access": "private",
    "description": "Draw a rectangle on the canvases\n\n(it figures out the offset for each canvas)",
    "lineNumber": 486,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X-position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y-position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "Width"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Height"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 532,
    "kind": "method",
    "name": "fillText",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#fillText",
    "access": "private",
    "description": "Fill a given text on the canvases",
    "lineNumber": 518,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Text to render"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X-position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y-position"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 533,
    "kind": "method",
    "name": "defaultFormatTimeCallback",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#defaultFormatTimeCallback",
    "access": "public",
    "description": "Turn the time into a suitable label for the time.",
    "lineNumber": 546,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Time"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seconds",
        "description": "Seconds to format"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pxPerSec",
        "description": "Pixels per second"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Time"
    }
  },
  {
    "__docId__": 534,
    "kind": "method",
    "name": "defaultTimeInterval",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#defaultTimeInterval",
    "access": "public",
    "description": "Return how many seconds should be between each notch",
    "lineNumber": 564,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Time"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pxPerSec",
        "description": "Pixels per second"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Time"
    }
  },
  {
    "__docId__": 535,
    "kind": "method",
    "name": "defaultPrimaryLabelInterval",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#defaultPrimaryLabelInterval",
    "access": "public",
    "description": "Return the cadence of notches that get labels in the primary color.",
    "lineNumber": 581,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Cadence"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pxPerSec",
        "description": "Pixels per second"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Cadence"
    }
  },
  {
    "__docId__": 536,
    "kind": "method",
    "name": "defaultSecondaryLabelInterval",
    "memberof": "src/plugin/timeline.js~TimelinePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/timeline.js~TimelinePlugin#defaultSecondaryLabelInterval",
    "access": "public",
    "description": "Return the cadence of notches that get labels in the secondary color.",
    "lineNumber": 598,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Cadence"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pxPerSec",
        "description": "Pixels per second"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Cadence"
    }
  },
  {
    "__docId__": 537,
    "kind": "file",
    "name": "src/util/ajax.js",
    "content": "import Observer from './observer';\n\n/**\n * Perform an ajax request using `XMLHttpRequest`.\n *\n * @deprecated Use `util.fetchFile` instead.\n *\n * @param {Object} options AJAX options to use. See example below for options.\n * @returns {Observer} Observer instance\n * @example\n * // default options\n * let options = {\n *     method: 'GET',\n *     url: undefined,\n *     responseType: 'json',\n *     xhr: {}\n * };\n *\n * // override default options\n * options.url = '../media/demo.wav';\n * options.responseType = 'arraybuffer';\n * options.xhr = {\n *     requestHeaders: [\n *         {\n *             key: 'Authorization',\n *             value: 'my-token'\n *         }\n *     ],\n *     withCredentials: true\n * };\n *\n * // make ajax call\n * let ajaxCall = util.ajax(options);\n * ajaxCall.on('progress', e => {\n *     console.log('progress', e);\n * });\n * ajaxCall.on('success', (data, e) => {\n *     console.log('success!', data);\n * });\n * ajaxCall.on('error', e => {\n *     console.warn('ajax error: ' + e.target.statusText);\n * });\n */\nexport default function ajax(options) {\n    const instance = new Observer();\n    const xhr = new XMLHttpRequest();\n    let fired100 = false;\n    xhr.open(options.method || 'GET', options.url, true);\n    xhr.responseType = options.responseType || 'json';\n\n    if (options.xhr) {\n        if (options.xhr.requestHeaders) {\n            // add custom request headers\n            options.xhr.requestHeaders.forEach(header => {\n                xhr.setRequestHeader(header.key, header.value);\n            });\n        }\n        if (options.xhr.withCredentials) {\n            // use credentials\n            xhr.withCredentials = true;\n        }\n    }\n\n    xhr.addEventListener('progress', e => {\n        instance.fireEvent('progress', e);\n        if (e.lengthComputable && e.loaded == e.total) {\n            fired100 = true;\n        }\n    });\n    xhr.addEventListener('load', e => {\n        if (!fired100) {\n            instance.fireEvent('progress', e);\n        }\n        instance.fireEvent('load', e);\n        if (200 == xhr.status || 206 == xhr.status) {\n            instance.fireEvent('success', xhr.response, e);\n        } else {\n            instance.fireEvent('error', e);\n        }\n    });\n    xhr.addEventListener('error', e => instance.fireEvent('error', e));\n    xhr.send();\n    instance.xhr = xhr;\n    return instance;\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/util/ajax.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 538,
    "kind": "function",
    "name": "ajax",
    "memberof": "src/util/ajax.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/ajax.js~ajax",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/util/ajax.js",
    "importStyle": "ajax",
    "description": "Perform an ajax request using `XMLHttpRequest`.",
    "examples": [
      "// default options\nlet options = {\n    method: 'GET',\n    url: undefined,\n    responseType: 'json',\n    xhr: {}\n};\n\n// override default options\noptions.url = '../media/demo.wav';\noptions.responseType = 'arraybuffer';\noptions.xhr = {\n    requestHeaders: [\n        {\n            key: 'Authorization',\n            value: 'my-token'\n        }\n    ],\n    withCredentials: true\n};\n\n// make ajax call\nlet ajaxCall = util.ajax(options);\najaxCall.on('progress', e => {\n    console.log('progress', e);\n});\najaxCall.on('success', (data, e) => {\n    console.log('success!', data);\n});\najaxCall.on('error', e => {\n    console.warn('ajax error: ' + e.target.statusText);\n});"
    ],
    "lineNumber": 44,
    "deprecated": "Use `util.fetchFile` instead.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Observer} Observer instance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "AJAX options to use. See example below for options."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observer"
      ],
      "spread": false,
      "description": "Observer instance"
    }
  },
  {
    "__docId__": 539,
    "kind": "file",
    "name": "src/util/extend.js",
    "content": "/**\n * Extend an object shallowly with others\n *\n * @param {Object} dest The target object\n * @param {Object[]} sources The objects to use for extending\n *\n * @return {Object} Merged object\n */\nexport default function extend(dest, ...sources) {\n    sources.forEach(source => {\n        Object.keys(source).forEach(key => {\n            dest[key] = source[key];\n        });\n    });\n    return dest;\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/util/extend.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 540,
    "kind": "function",
    "name": "extend",
    "memberof": "src/util/extend.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/extend.js~extend",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/util/extend.js",
    "importStyle": "extend",
    "description": "Extend an object shallowly with others",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dest",
        "description": "The target object"
      },
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "sources",
        "description": "The objects to use for extending"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Merged object"
    }
  },
  {
    "__docId__": 541,
    "kind": "file",
    "name": "src/util/fetch.js",
    "content": "/**\n * @since 3.0.0\n */\n\nimport Observer from './observer';\n\nclass ProgressHandler {\n    /**\n     * Instantiate ProgressHandler\n     *\n     * @param {Observer} instance The `fetchFile` observer instance.\n     * @param {Number} contentLength Content length.\n     * @param {Response} response Response object.\n     */\n    constructor(instance, contentLength, response) {\n        this.instance = instance;\n        this.instance._reader = response.body.getReader();\n\n        this.total = parseInt(contentLength, 10);\n        this.loaded = 0;\n    }\n\n    /**\n     * A method that is called once, immediately after the `ReadableStream``\n     * is constructed.\n     *\n     * @param {ReadableStreamDefaultController} controller Controller instance\n     *     used to control the stream.\n     */\n    start(controller) {\n        const read = () => {\n            // instance._reader.read() returns a promise that resolves\n            // when a value has been received\n            this.instance._reader\n                .read()\n                .then(({ done, value }) => {\n                    // result objects contain two properties:\n                    // done  - true if the stream has already given you all its data.\n                    // value - some data. Always undefined when done is true.\n                    if (done) {\n                        // ensure onProgress called when content-length=0\n                        if (this.total === 0) {\n                            this.instance.onProgress.call(this.instance, {\n                                loaded: this.loaded,\n                                total: this.total,\n                                lengthComputable: false\n                            });\n                        }\n                        // no more data needs to be consumed, close the stream\n                        controller.close();\n                        return;\n                    }\n\n                    this.loaded += value.byteLength;\n                    this.instance.onProgress.call(this.instance, {\n                        loaded: this.loaded,\n                        total: this.total,\n                        lengthComputable: !(this.total === 0)\n                    });\n                    // enqueue the next data chunk into our target stream\n                    controller.enqueue(value);\n                    read();\n                })\n                .catch(error => {\n                    controller.error(error);\n                });\n        };\n\n        read();\n    }\n}\n\n/**\n * Load a file using `fetch`.\n *\n * @param {object} options Request options to use. See example below.\n * @returns {Observer} Observer instance\n * @example\n * // default options\n * let options = {\n *     url: undefined,\n *     method: 'GET',\n *     mode: 'cors',\n *     credentials: 'same-origin',\n *     cache: 'default',\n *     responseType: 'json',\n *     requestHeaders: [],\n *     redirect: 'follow',\n *     referrer: 'client'\n * };\n *\n * // override some options\n * options.url = '../media/demo.wav';\n\n * // available types: 'arraybuffer', 'blob', 'json' or 'text'\n * options.responseType = 'arraybuffer';\n *\n * // make fetch call\n * let request = util.fetchFile(options);\n *\n * // listen for events\n * request.on('progress', e => {\n *     console.log('progress', e);\n * });\n *\n * request.on('success', data => {\n *     console.log('success!', data);\n * });\n *\n * request.on('error', e => {\n *     console.warn('fetchFile error: ', e);\n * });\n */\nexport default function fetchFile(options) {\n    if (!options) {\n        throw new Error('fetch options missing');\n    } else if (!options.url) {\n        throw new Error('fetch url missing');\n    }\n    const instance = new Observer();\n    const fetchHeaders = new Headers();\n    const fetchRequest = new Request(options.url);\n\n    // add ability to abort\n    instance.controller = new AbortController();\n\n    // check if headers have to be added\n    if (options && options.requestHeaders) {\n        // add custom request headers\n        options.requestHeaders.forEach(header => {\n            fetchHeaders.append(header.key, header.value);\n        });\n    }\n\n    // parse fetch options\n    const responseType = options.responseType || 'json';\n    const fetchOptions = {\n        method: options.method || 'GET',\n        headers: fetchHeaders,\n        mode: options.mode || 'cors',\n        credentials: options.credentials || 'same-origin',\n        cache: options.cache || 'default',\n        redirect: options.redirect || 'follow',\n        referrer: options.referrer || 'client',\n        signal: instance.controller.signal\n    };\n\n    fetch(fetchRequest, fetchOptions)\n        .then(response => {\n            // store response reference\n            instance.response = response;\n\n            let progressAvailable = true;\n            if (!response.body) {\n                // ReadableStream is not yet supported in this browser\n                // see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n                progressAvailable = false;\n            }\n\n            // Server must send CORS header \"Access-Control-Expose-Headers: content-length\"\n            const contentLength = response.headers.get('content-length');\n            if (contentLength === null) {\n                // Content-Length server response header missing.\n                // Don't evaluate download progress if we can't compare against a total size\n                // see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Access-Control-Expose-Headers\n                progressAvailable = false;\n            }\n\n            if (!progressAvailable) {\n                // not able to check download progress so skip it\n                return response;\n            }\n\n            // fire progress event when during load\n            instance.onProgress = e => {\n                instance.fireEvent('progress', e);\n            };\n\n            return new Response(\n                new ReadableStream(\n                    new ProgressHandler(instance, contentLength, response)\n                ),\n                fetchOptions\n            );\n        })\n        .then(response => {\n            let errMsg;\n            if (response.ok) {\n                switch (responseType) {\n                    case 'arraybuffer':\n                        return response.arrayBuffer();\n\n                    case 'json':\n                        return response.json();\n\n                    case 'blob':\n                        return response.blob();\n\n                    case 'text':\n                        return response.text();\n\n                    default:\n                        errMsg = 'Unknown responseType: ' + responseType;\n                        break;\n                }\n            }\n            if (!errMsg) {\n                errMsg = 'HTTP error status: ' + response.status;\n            }\n            throw new Error(errMsg);\n        })\n        .then(response => {\n            instance.fireEvent('success', response);\n        })\n        .catch(error => {\n            instance.fireEvent('error', error);\n        });\n\n    // return the fetch request\n    instance.fetchRequest = fetchRequest;\n    return instance;\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/util/fetch.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 542,
    "kind": "class",
    "name": "ProgressHandler",
    "memberof": "src/util/fetch.js",
    "static": true,
    "longname": "src/util/fetch.js~ProgressHandler",
    "access": "public",
    "export": false,
    "importPath": "wavesurfer.js/src/util/fetch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 543,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/util/fetch.js~ProgressHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/fetch.js~ProgressHandler#constructor",
    "access": "public",
    "description": "Instantiate ProgressHandler",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Observer"
        ],
        "spread": false,
        "optional": false,
        "name": "instance",
        "description": "The `fetchFile` observer instance."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "contentLength",
        "description": "Content length."
      },
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": "Response object."
      }
    ]
  },
  {
    "__docId__": 544,
    "kind": "member",
    "name": "instance",
    "memberof": "src/util/fetch.js~ProgressHandler",
    "static": false,
    "longname": "src/util/fetch.js~ProgressHandler#instance",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 545,
    "kind": "member",
    "name": "total",
    "memberof": "src/util/fetch.js~ProgressHandler",
    "static": false,
    "longname": "src/util/fetch.js~ProgressHandler#total",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 546,
    "kind": "member",
    "name": "loaded",
    "memberof": "src/util/fetch.js~ProgressHandler",
    "static": false,
    "longname": "src/util/fetch.js~ProgressHandler#loaded",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 547,
    "kind": "method",
    "name": "start",
    "memberof": "src/util/fetch.js~ProgressHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/fetch.js~ProgressHandler#start",
    "access": "public",
    "description": "A method that is called once, immediately after the `ReadableStream``\nis constructed.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "ReadableStreamDefaultController"
        ],
        "spread": false,
        "optional": false,
        "name": "controller",
        "description": "Controller instance\n    used to control the stream."
      }
    ],
    "return": null
  },
  {
    "__docId__": 549,
    "kind": "function",
    "name": "fetchFile",
    "memberof": "src/util/fetch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/fetch.js~fetchFile",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/util/fetch.js",
    "importStyle": "fetchFile",
    "description": "Load a file using `fetch`.",
    "examples": [
      "// default options\nlet options = {\n    url: undefined,\n    method: 'GET',\n    mode: 'cors',\n    credentials: 'same-origin',\n    cache: 'default',\n    responseType: 'json',\n    requestHeaders: [],\n    redirect: 'follow',\n    referrer: 'client'\n};\n\n// override some options\noptions.url = '../media/demo.wav';\n\n// available types: 'arraybuffer', 'blob', 'json' or 'text'\noptions.responseType = 'arraybuffer';\n\n// make fetch call\nlet request = util.fetchFile(options);\n\n// listen for events\nrequest.on('progress', e => {\n    console.log('progress', e);\n});\n\nrequest.on('success', data => {\n    console.log('success!', data);\n});\n\nrequest.on('error', e => {\n    console.warn('fetchFile error: ', e);\n});"
    ],
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Observer} Observer instance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Request options to use. See example below."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observer"
      ],
      "spread": false,
      "description": "Observer instance"
    }
  },
  {
    "__docId__": 550,
    "kind": "file",
    "name": "src/util/frame.js",
    "content": "import reqAnimationFrame from './request-animation-frame';\n\n/**\n * Create a function which will be called at the next requestAnimationFrame\n * cycle\n *\n * @param {function} func The function to call\n *\n * @return {func} The function wrapped within a requestAnimationFrame\n */\nexport default function frame(func) {\n    return (...args) => reqAnimationFrame(() => func(...args));\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/util/frame.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 551,
    "kind": "function",
    "name": "frame",
    "memberof": "src/util/frame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/frame.js~frame",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/util/frame.js",
    "importStyle": "frame",
    "description": "Create a function which will be called at the next requestAnimationFrame\ncycle",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "The function to call"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "func"
      ],
      "spread": false,
      "description": "The function wrapped within a requestAnimationFrame"
    }
  },
  {
    "__docId__": 552,
    "kind": "file",
    "name": "src/util/get-id.js",
    "content": "/**\n * Get a random prefixed ID\n *\n * @param {String} prefix Prefix to use. Default is `'wavesurfer_'`.\n * @returns {String} Random prefixed ID\n * @example\n * console.log(getId()); // logs 'wavesurfer_b5pors4ru6g'\n *\n * let prefix = 'foo-';\n * console.log(getId(prefix)); // logs 'foo-b5pors4ru6g'\n */\nexport default function getId(prefix) {\n    if (prefix === undefined) {\n        prefix = 'wavesurfer_';\n    }\n    return (\n        prefix +\n        Math.random()\n            .toString(32)\n            .substring(2)\n    );\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/util/get-id.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 553,
    "kind": "function",
    "name": "getId",
    "memberof": "src/util/get-id.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/get-id.js~getId",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/util/get-id.js",
    "importStyle": "getId",
    "description": "Get a random prefixed ID",
    "examples": [
      "console.log(getId()); // logs 'wavesurfer_b5pors4ru6g'\n\nlet prefix = 'foo-';\nconsole.log(getId(prefix)); // logs 'foo-b5pors4ru6g'"
    ],
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Random prefixed ID"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "prefix",
        "description": "Prefix to use. Default is `'wavesurfer_'`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Random prefixed ID"
    }
  },
  {
    "__docId__": 554,
    "kind": "file",
    "name": "src/util/index.js",
    "content": "export { default as ajax } from './ajax';\nexport { default as getId } from './get-id';\nexport { default as max } from './max';\nexport { default as min } from './min';\nexport { default as Observer } from './observer';\nexport { default as extend } from './extend';\nexport { default as style } from './style';\nexport { default as requestAnimationFrame } from './request-animation-frame';\nexport { default as frame } from './frame';\nexport { default as debounce } from 'debounce';\nexport { default as preventClick } from './prevent-click';\nexport { default as fetchFile } from './fetch';\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/util/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 555,
    "kind": "file",
    "name": "src/util/max.js",
    "content": "/**\n * Get the largest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Largest number found\n * @example console.log(max([1, 2, 3])); // logs 3\n */\nexport default function max(values) {\n    let largest = -Infinity;\n    Object.keys(values).forEach(i => {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    });\n    return largest;\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/util/max.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 556,
    "kind": "function",
    "name": "max",
    "memberof": "src/util/max.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/max.js~max",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/util/max.js",
    "importStyle": "max",
    "description": "Get the largest value",
    "examples": [
      "console.log(max([1, 2, 3])); // logs 3"
    ],
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} Largest number found"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "Array of numbers"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Largest number found"
    }
  },
  {
    "__docId__": 557,
    "kind": "file",
    "name": "src/util/min.js",
    "content": "/**\n * Get the smallest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Smallest number found\n * @example console.log(min([1, 2, 3])); // logs 1\n */\nexport default function min(values) {\n    let smallest = Number(Infinity);\n    Object.keys(values).forEach(i => {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    });\n    return smallest;\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/util/min.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 558,
    "kind": "function",
    "name": "min",
    "memberof": "src/util/min.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/min.js~min",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/util/min.js",
    "importStyle": "min",
    "description": "Get the smallest value",
    "examples": [
      "console.log(min([1, 2, 3])); // logs 1"
    ],
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} Smallest number found"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "Array of numbers"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Smallest number found"
    }
  },
  {
    "__docId__": 559,
    "kind": "file",
    "name": "src/util/observer.js",
    "content": "/**\n * @typedef {Object} ListenerDescriptor\n * @property {string} name The name of the event\n * @property {function} callback The callback\n * @property {function} un The function to call to remove the listener\n */\n\n/**\n * Observer class\n */\nexport default class Observer {\n    /**\n     * Instantiate Observer\n     */\n    constructor() {\n        /**\n         * @private\n         * @todo Initialise the handlers here already and remove the conditional\n         * assignment in `on()`\n         */\n        this.handlers = null;\n    }\n    /**\n     * Attach a handler function for an event.\n     *\n     * @param {string} event Name of the event to listen to\n     * @param {function} fn The callback to trigger when the event is fired\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    on(event, fn) {\n        if (!this.handlers) {\n            this.handlers = {};\n        }\n\n        let handlers = this.handlers[event];\n        if (!handlers) {\n            handlers = this.handlers[event] = [];\n        }\n        handlers.push(fn);\n\n        // Return an event descriptor\n        return {\n            name: event,\n            callback: fn,\n            un: (e, fn) => this.un(e, fn)\n        };\n    }\n\n    /**\n     * Remove an event handler.\n     *\n     * @param {string} event Name of the event the listener that should be\n     * removed listens to\n     * @param {function} fn The callback that should be removed\n     */\n    un(event, fn) {\n        if (!this.handlers) {\n            return;\n        }\n\n        const handlers = this.handlers[event];\n        let i;\n        if (handlers) {\n            if (fn) {\n                for (i = handlers.length - 1; i >= 0; i--) {\n                    if (handlers[i] == fn) {\n                        handlers.splice(i, 1);\n                    }\n                }\n            } else {\n                handlers.length = 0;\n            }\n        }\n    }\n\n    /**\n     * Remove all event handlers.\n     */\n    unAll() {\n        this.handlers = null;\n    }\n\n    /**\n     * Attach a handler to an event. The handler is executed at most once per\n     * event type.\n     *\n     * @param {string} event The event to listen to\n     * @param {function} handler The callback that is only to be called once\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    once(event, handler) {\n        const fn = (...args) => {\n            /*  eslint-disable no-invalid-this */\n            handler.apply(this, args);\n            /*  eslint-enable no-invalid-this */\n            setTimeout(() => {\n                this.un(event, fn);\n            }, 0);\n        };\n        return this.on(event, fn);\n    }\n\n    /**\n     * Manually fire an event\n     *\n     * @param {string} event The event to fire manually\n     * @param {...any} args The arguments with which to call the listeners\n     */\n    fireEvent(event, ...args) {\n        if (!this.handlers) {\n            return;\n        }\n        const handlers = this.handlers[event];\n        handlers &&\n            handlers.forEach(fn => {\n                fn(...args);\n            });\n    }\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/util/observer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 560,
    "kind": "typedef",
    "name": "ListenerDescriptor",
    "memberof": "src/util/observer.js",
    "static": true,
    "longname": "src/util/observer.js~ListenerDescriptor",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the event"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "un",
        "description": "The function to call to remove the listener"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ListenerDescriptor"
    }
  },
  {
    "__docId__": 561,
    "kind": "class",
    "name": "Observer",
    "memberof": "src/util/observer.js",
    "static": true,
    "longname": "src/util/observer.js~Observer",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/util/observer.js",
    "importStyle": "Observer",
    "description": "Observer class",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 562,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/util/observer.js~Observer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/observer.js~Observer#constructor",
    "access": "public",
    "description": "Instantiate Observer",
    "lineNumber": 15
  },
  {
    "__docId__": 563,
    "kind": "member",
    "name": "handlers",
    "memberof": "src/util/observer.js~Observer",
    "static": false,
    "longname": "src/util/observer.js~Observer#handlers",
    "access": "private",
    "description": "",
    "lineNumber": 21,
    "todo": [
      "Initialise the handlers here already and remove the conditional\nassignment in `on()`"
    ],
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 564,
    "kind": "method",
    "name": "on",
    "memberof": "src/util/observer.js~Observer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/observer.js~Observer#on",
    "access": "public",
    "description": "Attach a handler function for an event.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Name of the event to listen to"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The callback to trigger when the event is fired"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ListenerDescriptor"
      ],
      "spread": false,
      "description": "The event descriptor"
    }
  },
  {
    "__docId__": 566,
    "kind": "method",
    "name": "un",
    "memberof": "src/util/observer.js~Observer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/observer.js~Observer#un",
    "access": "public",
    "description": "Remove an event handler.",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Name of the event the listener that should be\nremoved listens to"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The callback that should be removed"
      }
    ],
    "return": null
  },
  {
    "__docId__": 567,
    "kind": "method",
    "name": "unAll",
    "memberof": "src/util/observer.js~Observer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/observer.js~Observer#unAll",
    "access": "public",
    "description": "Remove all event handlers.",
    "lineNumber": 79,
    "params": [],
    "return": null
  },
  {
    "__docId__": 569,
    "kind": "method",
    "name": "once",
    "memberof": "src/util/observer.js~Observer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/observer.js~Observer#once",
    "access": "public",
    "description": "Attach a handler to an event. The handler is executed at most once per\nevent type.",
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event to listen to"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "The callback that is only to be called once"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ListenerDescriptor"
      ],
      "spread": false,
      "description": "The event descriptor"
    }
  },
  {
    "__docId__": 570,
    "kind": "method",
    "name": "fireEvent",
    "memberof": "src/util/observer.js~Observer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/observer.js~Observer#fireEvent",
    "access": "public",
    "description": "Manually fire an event",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event to fire manually"
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "The arguments with which to call the listeners"
      }
    ],
    "return": null
  },
  {
    "__docId__": 571,
    "kind": "file",
    "name": "src/util/prevent-click.js",
    "content": "/**\n * Stops propagation of click event and removes event listener\n *\n * @private\n * @param {object} event The click event\n */\nfunction preventClickHandler(event) {\n    event.stopPropagation();\n    document.body.removeEventListener('click', preventClickHandler, true);\n}\n\n/**\n * Starts listening for click event and prevent propagation\n *\n * @param {object} values Values\n */\nexport default function preventClick(values) {\n    document.body.addEventListener('click', preventClickHandler, true);\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/util/prevent-click.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 572,
    "kind": "function",
    "name": "preventClickHandler",
    "memberof": "src/util/prevent-click.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/prevent-click.js~preventClickHandler",
    "access": "private",
    "export": false,
    "importPath": "wavesurfer.js/src/util/prevent-click.js",
    "importStyle": null,
    "description": "Stops propagation of click event and removes event listener",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The click event"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 573,
    "kind": "function",
    "name": "preventClick",
    "memberof": "src/util/prevent-click.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/prevent-click.js~preventClick",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/util/prevent-click.js",
    "importStyle": "preventClick",
    "description": "Starts listening for click event and prevent propagation",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "Values"
      }
    ],
    "return": null
  },
  {
    "__docId__": 574,
    "kind": "file",
    "name": "src/util/request-animation-frame.js",
    "content": "/* eslint-disable valid-jsdoc */\n/**\n * Returns the `requestAnimationFrame` function for the browser, or a shim with\n * `setTimeout` if the function is not found\n *\n * @return {function} Available `requestAnimationFrame` function for the browser\n */\nexport default (\n    window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    ((callback, element) => setTimeout(callback, 1000 / 60))\n).bind(window);\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/util/request-animation-frame.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 575,
    "kind": "file",
    "name": "src/util/style.js",
    "content": "/**\n * Apply a map of styles to an element\n *\n * @param {HTMLElement} el The element that the styles will be applied to\n * @param {Object} styles The map of propName: attribute, both are used as-is\n *\n * @return {HTMLElement} el\n */\nexport default function style(el, styles) {\n    Object.keys(styles).forEach(prop => {\n        if (el.style[prop] !== styles[prop]) {\n            el.style[prop] = styles[prop];\n        }\n    });\n    return el;\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/util/style.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 576,
    "kind": "function",
    "name": "style",
    "memberof": "src/util/style.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/style.js~style",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/util/style.js",
    "importStyle": "style",
    "description": "Apply a map of styles to an element",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "el",
        "description": "The element that the styles will be applied to"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "styles",
        "description": "The map of propName: attribute, both are used as-is"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": "el"
    }
  },
  {
    "__docId__": 577,
    "kind": "file",
    "name": "src/wavesurfer.js",
    "content": "import * as util from './util';\nimport MultiCanvas from './drawer.multicanvas';\nimport WebAudio from './webaudio';\nimport MediaElement from './mediaelement';\nimport PeakCache from './peakcache';\nimport MediaElementWebAudio from './mediaelement-webaudio';\n\n/*\n * This work is licensed under a BSD-3-Clause License.\n */\n\n/** @external {HTMLElement} https://developer.mozilla.org/en/docs/Web/API/HTMLElement */\n/** @external {OfflineAudioContext} https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext */\n/** @external {File} https://developer.mozilla.org/en-US/docs/Web/API/File */\n/** @external {Blob} https://developer.mozilla.org/en-US/docs/Web/API/Blob */\n/** @external {CanvasRenderingContext2D} https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D */\n/** @external {MediaStreamConstraints} https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints */\n/** @external {AudioNode} https://developer.mozilla.org/de/docs/Web/API/AudioNode */\n\n/**\n * @typedef {Object} WavesurferParams\n * @property {AudioContext} audioContext=null Use your own previously\n * initialized AudioContext or leave blank.\n * @property {number} audioRate=1 Speed at which to play audio. Lower number is\n * slower.\n * @property {ScriptProcessorNode} audioScriptProcessor=null Use your own previously\n * initialized ScriptProcessorNode or leave blank.\n * @property {boolean} autoCenter=true If a scrollbar is present, center the\n * waveform on current progress\n * @property {number} autoCenterRate=5 If autoCenter is active, rate at which the\n * waveform is centered\n * @property {boolean} autoCenterImmediately=false If autoCenter is active, immediately\n * center waveform on current progress\n * @property {string} backend='WebAudio' `'WebAudio'|'MediaElement'|'MediaElementWebAudio'` In most cases\n * you don't have to set this manually. MediaElement is a fallback for unsupported browsers.\n * MediaElementWebAudio allows to use WebAudio API also with big audio files, loading audio like with\n * MediaElement backend (HTML5 audio tag). You have to use the same methods of MediaElement backend for loading and\n * playback, giving also peaks, so the audio data are not decoded. In this way you can use WebAudio features, like filters,\n * also with audio with big duration. For example:\n * ` wavesurfer.load(url | HTMLMediaElement, peaks, preload, duration);\n *   wavesurfer.play();\n *   wavesurfer.setFilter(customFilter);\n * `\n * @property {string} backgroundColor=null Change background color of the\n * waveform container.\n * @property {number} barHeight=1 The height of the wave bars.\n * @property {number} barRadius=0 The radius of the wave bars. Makes bars rounded\n * @property {number} barGap=null The optional spacing between bars of the wave,\n * if not provided will be calculated in legacy format.\n * @property {number} barWidth=null Draw the waveform using bars.\n * @property {boolean} closeAudioContext=false Close and nullify all audio\n * contexts when the destroy method is called.\n * @property {!string|HTMLElement} container CSS selector or HTML element where\n * the waveform should be drawn. This is the only required parameter.\n * @property {string} cursorColor='#333' The fill color of the cursor indicating\n * the playhead position.\n * @property {number} cursorWidth=1 Measured in pixels.\n * @property {number} duration=null Optional audio length so pre-rendered peaks\n * can be display immediately for example.\n * @property {boolean} fillParent=true Whether to fill the entire container or\n * draw only according to `minPxPerSec`.\n * @property {boolean} forceDecode=false Force decoding of audio using web audio\n * when zooming to get a more detailed waveform.\n * @property {number} height=128 The height of the waveform. Measured in\n * pixels.\n * @property {boolean} hideScrollbar=false Whether to hide the horizontal\n * scrollbar when one would normally be shown.\n * @property {boolean} interact=true Whether the mouse interaction will be\n * enabled at initialization. You can switch this parameter at any time later\n * on.\n * @property {boolean} loopSelection=true (Use with regions plugin) Enable\n * looping of selected regions\n * @property {number} maxCanvasWidth=4000 Maximum width of a single canvas in\n * pixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\n * even integer). If the waveform is longer than this value, additional canvases\n * will be used to render the waveform, which is useful for very large waveforms\n * that may be too wide for browsers to draw on a single canvas.\n * @property {boolean} mediaControls=false (Use with backend `MediaElement` or `MediaElementWebAudio`)\n * this enables the native controls for the media element\n * @property {string} mediaType='audio' (Use with backend `MediaElement` or `MediaElementWebAudio`)\n * `'audio'|'video'` ('video' only for `MediaElement`)\n * @property {number} minPxPerSec=20 Minimum number of pixels per second of\n * audio.\n * @property {boolean} normalize=false If true, normalize by the maximum peak\n * instead of 1.0.\n * @property {boolean} partialRender=false Use the PeakCache to improve\n * rendering speed of large waveforms\n * @property {number} pixelRatio=window.devicePixelRatio The pixel ratio used to\n * calculate display\n * @property {PluginDefinition[]} plugins=[] An array of plugin definitions to\n * register during instantiation, they will be directly initialised unless they\n * are added with the `deferInit` property set to true.\n * @property {string} progressColor='#555' The fill color of the part of the\n * waveform behind the cursor. When `progressColor` and `waveColor` are the same\n * the progress wave is not rendered at all.\n * @property {boolean} removeMediaElementOnDestroy=true Set to false to keep the\n * media element in the DOM when the player is destroyed. This is useful when\n * reusing an existing media element via the `loadMediaElement` method.\n * @property {Object} renderer=MultiCanvas Can be used to inject a custom\n * renderer.\n * @property {boolean|number} responsive=false If set to `true` resize the\n * waveform, when the window is resized. This is debounced with a `100ms`\n * timeout by default. If this parameter is a number it represents that timeout.\n * @property {boolean} rtl=false If set to `true`, renders waveform from\n * right-to-left.\n * @property {boolean} scrollParent=false Whether to scroll the container with a\n * lengthy waveform. Otherwise the waveform is shrunk to the container width\n * (see fillParent).\n * @property {number} skipLength=2 Number of seconds to skip with the\n * skipForward() and skipBackward() methods.\n * @property {boolean} splitChannels=false Render with separate waveforms for\n * the channels of the audio\n * @property {string} waveColor='#999' The fill color of the waveform after the\n * cursor.\n * @property {object} xhr={} XHR options. For example:\n * `let xhr = {\n *     cache: 'default',\n *     mode: 'cors',\n *     method: 'GET',\n *     credentials: 'same-origin',\n *     redirect: 'follow',\n *     referrer: 'client',\n *     headers: [\n *         {\n *             key: 'Authorization',\n *             value: 'my-token'\n *         }\n *     ]\n * };`\n */\n\n/**\n * @typedef {Object} PluginDefinition\n * @desc The Object used to describe a plugin\n * @example wavesurfer.addPlugin(pluginDefinition);\n * @property {string} name The name of the plugin, the plugin instance will be\n * added as a property to the wavesurfer instance under this name\n * @property {?Object} staticProps The properties that should be added to the\n * wavesurfer instance as static properties\n * @property {?boolean} deferInit Don't initialise plugin\n * automatically\n * @property {Object} params={} The plugin parameters, they are the first parameter\n * passed to the plugin class constructor function\n * @property {PluginClass} instance The plugin instance factory, is called with\n * the dependency specified in extends. Returns the plugin class.\n */\n\n/**\n * @interface PluginClass\n *\n * @desc This is the interface which is implemented by all plugin classes. Note\n * that this only turns into an observer after being passed through\n * `wavesurfer.addPlugin`.\n *\n * @extends {Observer}\n */\nclass PluginClass {\n    /**\n     * Plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * It returns a `PluginDefinition` object representing the plugin.\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     */\n    create(params) {}\n    /**\n     * Construct the plugin\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     * @param {Object} ws The wavesurfer instance\n     */\n    constructor(params, ws) {}\n    /**\n     * Initialise the plugin\n     *\n     * Start doing something. This is called by\n     * `wavesurfer.initPlugin(pluginName)`\n     */\n    init() {}\n    /**\n     * Destroy the plugin instance\n     *\n     * Stop doing something. This is called by\n     * `wavesurfer.destroyPlugin(pluginName)`\n     */\n    destroy() {}\n}\n\n/**\n * WaveSurfer core library class\n *\n * @extends {Observer}\n * @example\n * const params = {\n *   container: '#waveform',\n *   waveColor: 'violet',\n *   progressColor: 'purple'\n * };\n *\n * // initialise like this\n * const wavesurfer = WaveSurfer.create(params);\n *\n * // or like this ...\n * const wavesurfer = new WaveSurfer(params);\n * wavesurfer.init();\n *\n * // load audio file\n * wavesurfer.load('example/media/demo.wav');\n */\nexport default class WaveSurfer extends util.Observer {\n    /** @private */\n    defaultParams = {\n        audioContext: null,\n        audioScriptProcessor: null,\n        audioRate: 1,\n        autoCenter: true,\n        autoCenterRate: 5,\n        autoCenterImmediately: false,\n        backend: 'WebAudio',\n        backgroundColor: null,\n        barHeight: 1,\n        barRadius: 0,\n        barGap: null,\n        container: null,\n        cursorColor: '#333',\n        cursorWidth: 1,\n        dragSelection: true,\n        duration: null,\n        fillParent: true,\n        forceDecode: false,\n        height: 128,\n        hideScrollbar: false,\n        interact: true,\n        loopSelection: true,\n        maxCanvasWidth: 4000,\n        mediaContainer: null,\n        mediaControls: false,\n        mediaType: 'audio',\n        minPxPerSec: 20,\n        normalize: false,\n        partialRender: false,\n        pixelRatio:\n            window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI,\n        plugins: [],\n        progressColor: '#555',\n        removeMediaElementOnDestroy: true,\n        renderer: MultiCanvas,\n        responsive: false,\n        rtl: false,\n        scrollParent: false,\n        skipLength: 2,\n        splitChannels: false,\n        waveColor: '#999',\n        xhr: {}\n    };\n\n    /** @private */\n    backends = {\n        MediaElement,\n        WebAudio,\n        MediaElementWebAudio\n    };\n\n    /**\n     * Instantiate this class, call its `init` function and returns it\n     *\n     * @param {WavesurferParams} params The wavesurfer parameters\n     * @return {Object} WaveSurfer instance\n     * @example const wavesurfer = WaveSurfer.create(params);\n     */\n    static create(params) {\n        const wavesurfer = new WaveSurfer(params);\n        return wavesurfer.init();\n    }\n\n    /**\n     * The library version number is available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {String}\n     * @example\n     * console.log('Using wavesurfer.js ' + WaveSurfer.VERSION);\n     */\n    static VERSION = __VERSION__;\n\n    /**\n     * Functions in the `util` property are available as a prototype property to\n     * all instances\n     *\n     * @type {Object}\n     * @example\n     * const wavesurfer = WaveSurfer.create(params);\n     * wavesurfer.util.style(myElement, { background: 'blue' });\n     */\n    util = util;\n\n    /**\n     * Functions in the `util` property are available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {Object}\n     * @example\n     * WaveSurfer.util.style(myElement, { background: 'blue' });\n     */\n    static util = util;\n\n    /**\n     * Initialise wavesurfer instance\n     *\n     * @param {WavesurferParams} params Instantiation options for wavesurfer\n     * @example\n     * const wavesurfer = new WaveSurfer(params);\n     * @returns {this} Wavesurfer instance\n     */\n    constructor(params) {\n        super();\n        /**\n         * Extract relevant parameters (or defaults)\n         * @private\n         */\n        this.params = util.extend({}, this.defaultParams, params);\n\n        /** @private */\n        this.container =\n            'string' == typeof params.container\n                ? document.querySelector(this.params.container)\n                : this.params.container;\n\n        if (!this.container) {\n            throw new Error('Container element not found');\n        }\n\n        if (this.params.mediaContainer == null) {\n            /** @private */\n            this.mediaContainer = this.container;\n        } else if (typeof this.params.mediaContainer == 'string') {\n            /** @private */\n            this.mediaContainer = document.querySelector(\n                this.params.mediaContainer\n            );\n        } else {\n            /** @private */\n            this.mediaContainer = this.params.mediaContainer;\n        }\n\n        if (!this.mediaContainer) {\n            throw new Error('Media Container element not found');\n        }\n\n        if (this.params.maxCanvasWidth <= 1) {\n            throw new Error('maxCanvasWidth must be greater than 1');\n        } else if (this.params.maxCanvasWidth % 2 == 1) {\n            throw new Error('maxCanvasWidth must be an even number');\n        }\n\n        if (this.params.rtl === true) {\n            util.style(this.container, { transform: 'rotateY(180deg)' });\n        }\n\n        if (this.params.backgroundColor) {\n            this.setBackgroundColor(this.params.backgroundColor);\n        }\n\n        /**\n         * @private Used to save the current volume when muting so we can\n         * restore once unmuted\n         * @type {number}\n         */\n        this.savedVolume = 0;\n\n        /**\n         * @private The current muted state\n         * @type {boolean}\n         */\n        this.isMuted = false;\n\n        /**\n         * @private Will hold a list of event descriptors that need to be\n         * canceled on subsequent loads of audio\n         * @type {Object[]}\n         */\n        this.tmpEvents = [];\n\n        /**\n         * @private Holds any running audio downloads\n         * @type {Observer}\n         */\n        this.currentRequest = null;\n        /** @private */\n        this.arraybuffer = null;\n        /** @private */\n        this.drawer = null;\n        /** @private */\n        this.backend = null;\n        /** @private */\n        this.peakCache = null;\n\n        // cache constructor objects\n        if (typeof this.params.renderer !== 'function') {\n            throw new Error('Renderer parameter is invalid');\n        }\n        /**\n         * @private The uninitialised Drawer class\n         */\n        this.Drawer = this.params.renderer;\n        /**\n         * @private The uninitialised Backend class\n         */\n        // Back compat\n        if (this.params.backend == 'AudioElement') {\n            this.params.backend = 'MediaElement';\n        }\n\n        if (\n            (this.params.backend == 'WebAudio' ||\n                this.params.backend === 'MediaElementWebAudio') &&\n            !WebAudio.prototype.supportsWebAudio.call(null)\n        ) {\n            this.params.backend = 'MediaElement';\n        }\n        this.Backend = this.backends[this.params.backend];\n\n        /**\n         * @private map of plugin names that are currently initialised\n         */\n        this.initialisedPluginList = {};\n        /** @private */\n        this.isDestroyed = false;\n\n        /**\n         * Get the current ready status.\n         *\n         * @example const isReady = wavesurfer.isReady;\n         * @return {boolean}\n         */\n        this.isReady = false;\n\n        // responsive debounced event listener. If this.params.responsive is not\n        // set, this is never called. Use 100ms or this.params.responsive as\n        // timeout for the debounce function.\n        let prevWidth = 0;\n        this._onResize = util.debounce(\n            () => {\n                if (\n                    prevWidth != this.drawer.wrapper.clientWidth &&\n                    !this.params.scrollParent\n                ) {\n                    prevWidth = this.drawer.wrapper.clientWidth;\n                    this.drawer.fireEvent('redraw');\n                }\n            },\n            typeof this.params.responsive === 'number'\n                ? this.params.responsive\n                : 100\n        );\n\n        return this;\n    }\n\n    /**\n     * Initialise the wave\n     *\n     * @example\n     * var wavesurfer = new WaveSurfer(params);\n     * wavesurfer.init();\n     * @return {this} The wavesurfer instance\n     */\n    init() {\n        this.registerPlugins(this.params.plugins);\n        this.createDrawer();\n        this.createBackend();\n        this.createPeakCache();\n        return this;\n    }\n\n    /**\n     * Add and initialise array of plugins (if `plugin.deferInit` is falsey),\n     * this function is called in the init function of wavesurfer\n     *\n     * @param {PluginDefinition[]} plugins An array of plugin definitions\n     * @emits {WaveSurfer#plugins-registered} Called with the array of plugin definitions\n     * @return {this} The wavesurfer instance\n     */\n    registerPlugins(plugins) {\n        // first instantiate all the plugins\n        plugins.forEach(plugin => this.addPlugin(plugin));\n\n        // now run the init functions\n        plugins.forEach(plugin => {\n            // call init function of the plugin if deferInit is falsey\n            // in that case you would manually use initPlugins()\n            if (!plugin.deferInit) {\n                this.initPlugin(plugin.name);\n            }\n        });\n        this.fireEvent('plugins-registered', plugins);\n        return this;\n    }\n\n    /**\n     * Get a map of plugin names that are currently initialised\n     *\n     * @example wavesurfer.getPlugins();\n     * @return {Object} Object with plugin names\n     */\n    getActivePlugins() {\n        return this.initialisedPluginList;\n    }\n\n    /**\n     * Add a plugin object to wavesurfer\n     *\n     * @param {PluginDefinition} plugin A plugin definition\n     * @emits {WaveSurfer#plugin-added} Called with the name of the plugin that was added\n     * @example wavesurfer.addPlugin(WaveSurfer.minimap());\n     * @return {this} The wavesurfer instance\n     */\n    addPlugin(plugin) {\n        if (!plugin.name) {\n            throw new Error('Plugin does not have a name!');\n        }\n        if (!plugin.instance) {\n            throw new Error(\n                `Plugin ${plugin.name} does not have an instance property!`\n            );\n        }\n\n        // staticProps properties are applied to wavesurfer instance\n        if (plugin.staticProps) {\n            Object.keys(plugin.staticProps).forEach(pluginStaticProp => {\n                /**\n                 * Properties defined in a plugin definition's `staticProps` property are added as\n                 * staticProps properties of the WaveSurfer instance\n                 */\n                this[pluginStaticProp] = plugin.staticProps[pluginStaticProp];\n            });\n        }\n\n        const Instance = plugin.instance;\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Instance.prototype[key] = util.Observer.prototype[key];\n        });\n\n        /**\n         * Instantiated plugin classes are added as a property of the wavesurfer\n         * instance\n         * @type {Object}\n         */\n        this[plugin.name] = new Instance(plugin.params || {}, this);\n        this.fireEvent('plugin-added', plugin.name);\n        return this;\n    }\n\n    /**\n     * Initialise a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-initialised\n     * @example wavesurfer.initPlugin('minimap');\n     * @return {this} The wavesurfer instance\n     */\n    initPlugin(name) {\n        if (!this[name]) {\n            throw new Error(`Plugin ${name} has not been added yet!`);\n        }\n        if (this.initialisedPluginList[name]) {\n            // destroy any already initialised plugins\n            this.destroyPlugin(name);\n        }\n        this[name].init();\n        this.initialisedPluginList[name] = true;\n        this.fireEvent('plugin-initialised', name);\n        return this;\n    }\n\n    /**\n     * Destroy a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-destroyed\n     * @example wavesurfer.destroyPlugin('minimap');\n     * @returns {this} The wavesurfer instance\n     */\n    destroyPlugin(name) {\n        if (!this[name]) {\n            throw new Error(\n                `Plugin ${name} has not been added yet and cannot be destroyed!`\n            );\n        }\n        if (!this.initialisedPluginList[name]) {\n            throw new Error(\n                `Plugin ${name} is not active and cannot be destroyed!`\n            );\n        }\n        if (typeof this[name].destroy !== 'function') {\n            throw new Error(`Plugin ${name} does not have a destroy function!`);\n        }\n\n        this[name].destroy();\n        delete this.initialisedPluginList[name];\n        this.fireEvent('plugin-destroyed', name);\n        return this;\n    }\n\n    /**\n     * Destroy all initialised plugins. Convenience function to use when\n     * wavesurfer is removed\n     *\n     * @private\n     */\n    destroyAllPlugins() {\n        Object.keys(this.initialisedPluginList).forEach(name =>\n            this.destroyPlugin(name)\n        );\n    }\n\n    /**\n     * Create the drawer and draw the waveform\n     *\n     * @private\n     * @emits WaveSurfer#drawer-created\n     */\n    createDrawer() {\n        this.drawer = new this.Drawer(this.container, this.params);\n        this.drawer.init();\n        this.fireEvent('drawer-created', this.drawer);\n\n        if (this.params.responsive !== false) {\n            window.addEventListener('resize', this._onResize, true);\n            window.addEventListener('orientationchange', this._onResize, true);\n        }\n\n        this.drawer.on('redraw', () => {\n            this.drawBuffer();\n            this.drawer.progress(this.backend.getPlayedPercents());\n        });\n\n        // Click-to-seek\n        this.drawer.on('click', (e, progress) => {\n            setTimeout(() => this.seekTo(progress), 0);\n        });\n\n        // Relay the scroll event from the drawer\n        this.drawer.on('scroll', e => {\n            if (this.params.partialRender) {\n                this.drawBuffer();\n            }\n            this.fireEvent('scroll', e);\n        });\n    }\n\n    /**\n     * Create the backend\n     *\n     * @private\n     * @emits WaveSurfer#backend-created\n     */\n    createBackend() {\n        if (this.backend) {\n            this.backend.destroy();\n        }\n\n        this.backend = new this.Backend(this.params);\n        this.backend.init();\n        this.fireEvent('backend-created', this.backend);\n\n        this.backend.on('finish', () => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('finish');\n        });\n        this.backend.on('play', () => this.fireEvent('play'));\n        this.backend.on('pause', () => this.fireEvent('pause'));\n\n        this.backend.on('audioprocess', time => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('audioprocess', time);\n        });\n\n        // only needed for MediaElement and MediaElementWebAudio backend\n        if (\n            this.params.backend === 'MediaElement' ||\n            this.params.backend === 'MediaElementWebAudio'\n        ) {\n            this.backend.on('seek', () => {\n                this.drawer.progress(this.backend.getPlayedPercents());\n            });\n\n            this.backend.on('volume', () => {\n                let newVolume = this.getVolume();\n                this.fireEvent('volume', newVolume);\n\n                if (this.backend.isMuted !== this.isMuted) {\n                    this.isMuted = this.backend.isMuted;\n                    this.fireEvent('mute', this.isMuted);\n                }\n            });\n        }\n    }\n\n    /**\n     * Create the peak cache\n     *\n     * @private\n     */\n    createPeakCache() {\n        if (this.params.partialRender) {\n            this.peakCache = new PeakCache();\n        }\n    }\n\n    /**\n     * Get the duration of the audio clip\n     *\n     * @example const duration = wavesurfer.getDuration();\n     * @return {number} Duration in seconds\n     */\n    getDuration() {\n        return this.backend.getDuration();\n    }\n\n    /**\n     * Get the current playback position\n     *\n     * @example const currentTime = wavesurfer.getCurrentTime();\n     * @return {number} Playback position in seconds\n     */\n    getCurrentTime() {\n        return this.backend.getCurrentTime();\n    }\n\n    /**\n     * Set the current play time in seconds.\n     *\n     * @param {number} seconds A positive number in seconds. E.g. 10 means 10\n     * seconds, 60 means 1 minute\n     */\n    setCurrentTime(seconds) {\n        if (seconds >= this.getDuration()) {\n            this.seekTo(1);\n        } else {\n            this.seekTo(seconds / this.getDuration());\n        }\n    }\n\n    /**\n     * Starts playback from the current position. Optional start and end\n     * measured in seconds can be used to set the range of audio to play.\n     *\n     * @param {?number} start Position to start at\n     * @param {?number} end Position to end at\n     * @emits WaveSurfer#interaction\n     * @return {Promise} Result of the backend play method\n     * @example\n     * // play from second 1 to 5\n     * wavesurfer.play(1, 5);\n     */\n    play(start, end) {\n        this.fireEvent('interaction', () => this.play(start, end));\n        return this.backend.play(start, end);\n    }\n\n    /**\n     * Stops and pauses playback\n     *\n     * @example wavesurfer.pause();\n     * @return {Promise} Result of the backend pause method\n     */\n    pause() {\n        if (!this.backend.isPaused()) {\n            return this.backend.pause();\n        }\n    }\n\n    /**\n     * Toggle playback\n     *\n     * @example wavesurfer.playPause();\n     * @return {Promise} Result of the backend play or pause method\n     */\n    playPause() {\n        return this.backend.isPaused() ? this.play() : this.pause();\n    }\n\n    /**\n     * Get the current playback state\n     *\n     * @example const isPlaying = wavesurfer.isPlaying();\n     * @return {boolean} False if paused, true if playing\n     */\n    isPlaying() {\n        return !this.backend.isPaused();\n    }\n\n    /**\n     * Skip backward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipBackward();\n     */\n    skipBackward(seconds) {\n        this.skip(-seconds || -this.params.skipLength);\n    }\n\n    /**\n     * Skip forward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipForward();\n     */\n    skipForward(seconds) {\n        this.skip(seconds || this.params.skipLength);\n    }\n\n    /**\n     * Skip a number of seconds from the current position (use a negative value\n     * to go backwards).\n     *\n     * @param {number} offset Amount to skip back or forwards\n     * @example\n     * // go back 2 seconds\n     * wavesurfer.skip(-2);\n     */\n    skip(offset) {\n        const duration = this.getDuration() || 1;\n        let position = this.getCurrentTime() || 0;\n        position = Math.max(0, Math.min(duration, position + (offset || 0)));\n        this.seekAndCenter(position / duration);\n    }\n\n    /**\n     * Seeks to a position and centers the view\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @example\n     * // seek and go to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekAndCenter(progress) {\n        this.seekTo(progress);\n        this.drawer.recenter(progress);\n    }\n\n    /**\n     * Seeks to a position\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @emits WaveSurfer#interaction\n     * @emits WaveSurfer#seek\n     * @example\n     * // seek to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekTo(progress) {\n        // return an error if progress is not a number between 0 and 1\n        if (\n            typeof progress !== 'number' ||\n            !isFinite(progress) ||\n            progress < 0 ||\n            progress > 1\n        ) {\n            throw new Error(\n                'Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!'\n            );\n        }\n        this.fireEvent('interaction', () => this.seekTo(progress));\n\n        const paused = this.backend.isPaused();\n        // avoid draw wrong position while playing backward seeking\n        if (!paused) {\n            this.backend.pause();\n        }\n        // avoid small scrolls while paused seeking\n        const oldScrollParent = this.params.scrollParent;\n        this.params.scrollParent = false;\n        this.backend.seekTo(progress * this.getDuration());\n        this.drawer.progress(progress);\n\n        if (!paused) {\n            this.backend.play();\n        }\n        this.params.scrollParent = oldScrollParent;\n        this.fireEvent('seek', progress);\n    }\n\n    /**\n     * Stops and goes to the beginning.\n     *\n     * @example wavesurfer.stop();\n     */\n    stop() {\n        this.pause();\n        this.seekTo(0);\n        this.drawer.progress(0);\n    }\n\n    /**\n     * Sets the ID of the audio device to use for output and returns a Promise.\n     *\n     * @param {string} deviceId String value representing underlying output\n     * device\n     * @returns {Promise} `Promise` that resolves to `undefined` when there are\n     * no errors detected.\n     */\n    setSinkId(deviceId) {\n        return this.backend.setSinkId(deviceId);\n    }\n\n    /**\n     * Set the playback volume.\n     *\n     * @param {number} newVolume A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     * @emits WaveSurfer#volume\n     */\n    setVolume(newVolume) {\n        this.backend.setVolume(newVolume);\n        this.fireEvent('volume', newVolume);\n    }\n\n    /**\n     * Get the playback volume.\n     *\n     * @return {number} A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     */\n    getVolume() {\n        return this.backend.getVolume();\n    }\n\n    /**\n     * Set the playback rate.\n     *\n     * @param {number} rate A positive number. E.g. 0.5 means half the normal\n     * speed, 2 means double speed and so on.\n     * @example wavesurfer.setPlaybackRate(2);\n     */\n    setPlaybackRate(rate) {\n        this.backend.setPlaybackRate(rate);\n    }\n\n    /**\n     * Get the playback rate.\n     *\n     * @return {number} The current playback rate.\n     */\n    getPlaybackRate() {\n        return this.backend.getPlaybackRate();\n    }\n\n    /**\n     * Toggle the volume on and off. If not currently muted it will save the\n     * current volume value and turn the volume off. If currently muted then it\n     * will restore the volume to the saved value, and then rest the saved\n     * value.\n     *\n     * @example wavesurfer.toggleMute();\n     */\n    toggleMute() {\n        this.setMute(!this.isMuted);\n    }\n\n    /**\n     * Enable or disable muted audio\n     *\n     * @param {boolean} mute Specify `true` to mute audio.\n     * @emits WaveSurfer#volume\n     * @emits WaveSurfer#mute\n     * @example\n     * // unmute\n     * wavesurfer.setMute(false);\n     * console.log(wavesurfer.getMute()) // logs false\n     */\n    setMute(mute) {\n        // ignore all muting requests if the audio is already in that state\n        if (mute === this.isMuted) {\n            this.fireEvent('mute', this.isMuted);\n            return;\n        }\n\n        if (mute) {\n            // If currently not muted then save current volume,\n            // turn off the volume and update the mute properties\n            this.savedVolume = this.backend.getVolume();\n            this.backend.setVolume(0);\n            this.isMuted = true;\n            this.fireEvent('volume', 0);\n        } else {\n            // If currently muted then restore to the saved volume\n            // and update the mute properties\n            this.backend.setVolume(this.savedVolume);\n            this.isMuted = false;\n            this.fireEvent('volume', this.savedVolume);\n        }\n        this.fireEvent('mute', this.isMuted);\n    }\n\n    /**\n     * Get the current mute status.\n     *\n     * @example const isMuted = wavesurfer.getMute();\n     * @return {boolean} Current mute status\n     */\n    getMute() {\n        return this.isMuted;\n    }\n\n    /**\n     * Get the list of current set filters as an array.\n     *\n     * Filters must be set with setFilters method first\n     *\n     * @return {array} List of enabled filters\n     */\n    getFilters() {\n        return this.backend.filters || [];\n    }\n\n    /**\n     * Toggles `scrollParent` and redraws\n     *\n     * @example wavesurfer.toggleScroll();\n     */\n    toggleScroll() {\n        this.params.scrollParent = !this.params.scrollParent;\n        this.drawBuffer();\n    }\n\n    /**\n     * Toggle mouse interaction\n     *\n     * @example wavesurfer.toggleInteraction();\n     */\n    toggleInteraction() {\n        this.params.interact = !this.params.interact;\n    }\n\n    /**\n     * Get the fill color of the waveform after the cursor.\n     *\n     * @return {string} A CSS color string.\n     */\n    getWaveColor() {\n        return this.params.waveColor;\n    }\n\n    /**\n     * Set the fill color of the waveform after the cursor.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setWaveColor('#ddd');\n     */\n    setWaveColor(color) {\n        this.params.waveColor = color;\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the fill color of the waveform behind the cursor.\n     *\n     * @return {string} A CSS color string.\n     */\n    getProgressColor() {\n        return this.params.progressColor;\n    }\n\n    /**\n     * Set the fill color of the waveform behind the cursor.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setProgressColor('#400');\n     */\n    setProgressColor(color) {\n        this.params.progressColor = color;\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the background color of the waveform container.\n     *\n     * @return {string} A CSS color string.\n     */\n    getBackgroundColor() {\n        return this.params.backgroundColor;\n    }\n\n    /**\n     * Set the background color of the waveform container.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setBackgroundColor('#FF00FF');\n     */\n    setBackgroundColor(color) {\n        this.params.backgroundColor = color;\n        util.style(this.container, { background: this.params.backgroundColor });\n    }\n\n    /**\n     * Get the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @return {string} A CSS color string.\n     */\n    getCursorColor() {\n        return this.params.cursorColor;\n    }\n\n    /**\n     * Set the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setCursorColor('#222');\n     */\n    setCursorColor(color) {\n        this.params.cursorColor = color;\n        this.drawer.updateCursor();\n    }\n\n    /**\n     * Get the height of the waveform.\n     *\n     * @return {number} Height measured in pixels.\n     */\n    getHeight() {\n        return this.params.height;\n    }\n\n    /**\n     * Set the height of the waveform.\n     *\n     * @param {number} height Height measured in pixels.\n     * @example wavesurfer.setHeight(200);\n     */\n    setHeight(height) {\n        this.params.height = height;\n        this.drawer.setHeight(height * this.params.pixelRatio);\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the correct peaks for current wave view-port and render wave\n     *\n     * @private\n     * @emits WaveSurfer#redraw\n     */\n    drawBuffer() {\n        const nominalWidth = Math.round(\n            this.getDuration() *\n                this.params.minPxPerSec *\n                this.params.pixelRatio\n        );\n        const parentWidth = this.drawer.getWidth();\n        let width = nominalWidth;\n        // always start at 0 after zooming for scrolling : issue redraw left part\n        let start = 0;\n        let end = Math.max(start + parentWidth, width);\n        // Fill container\n        if (\n            this.params.fillParent &&\n            (!this.params.scrollParent || nominalWidth < parentWidth)\n        ) {\n            width = parentWidth;\n            start = 0;\n            end = width;\n        }\n\n        let peaks;\n        if (this.params.partialRender) {\n            const newRanges = this.peakCache.addRangeToPeakCache(\n                width,\n                start,\n                end\n            );\n            let i;\n            for (i = 0; i < newRanges.length; i++) {\n                peaks = this.backend.getPeaks(\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n                this.drawer.drawPeaks(\n                    peaks,\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n            }\n        } else {\n            peaks = this.backend.getPeaks(width, start, end);\n            this.drawer.drawPeaks(peaks, width, start, end);\n        }\n        this.fireEvent('redraw', peaks, width);\n    }\n\n    /**\n     * Horizontally zooms the waveform in and out. It also changes the parameter\n     * `minPxPerSec` and enables the `scrollParent` option. Calling the function\n     * with a falsey parameter will reset the zoom state.\n     *\n     * @param {?number} pxPerSec Number of horizontal pixels per second of\n     * audio, if none is set the waveform returns to unzoomed state\n     * @emits WaveSurfer#zoom\n     * @example wavesurfer.zoom(20);\n     */\n    zoom(pxPerSec) {\n        if (!pxPerSec) {\n            this.params.minPxPerSec = this.defaultParams.minPxPerSec;\n            this.params.scrollParent = false;\n        } else {\n            this.params.minPxPerSec = pxPerSec;\n            this.params.scrollParent = true;\n        }\n\n        this.drawBuffer();\n        this.drawer.progress(this.backend.getPlayedPercents());\n\n        this.drawer.recenter(this.getCurrentTime() / this.getDuration());\n        this.fireEvent('zoom', pxPerSec);\n    }\n\n    /**\n     * Decode buffer and load\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer Buffer to process\n     */\n    loadArrayBuffer(arraybuffer) {\n        this.decodeArrayBuffer(arraybuffer, data => {\n            if (!this.isDestroyed) {\n                this.loadDecodedBuffer(data);\n            }\n        });\n    }\n\n    /**\n     * Directly load an externally decoded AudioBuffer\n     *\n     * @private\n     * @param {AudioBuffer} buffer Buffer to process\n     * @emits WaveSurfer#ready\n     */\n    loadDecodedBuffer(buffer) {\n        this.backend.load(buffer);\n        this.drawBuffer();\n        this.isReady = true;\n        this.fireEvent('ready');\n    }\n\n    /**\n     * Loads audio data from a Blob or File object\n     *\n     * @param {Blob|File} blob Audio data\n     * @example\n     */\n    loadBlob(blob) {\n        // Create file reader\n        const reader = new FileReader();\n        reader.addEventListener('progress', e => this.onProgress(e));\n        reader.addEventListener('load', e =>\n            this.loadArrayBuffer(e.target.result)\n        );\n        reader.addEventListener('error', () =>\n            this.fireEvent('error', 'Error reading file')\n        );\n        reader.readAsArrayBuffer(blob);\n        this.empty();\n    }\n\n    /**\n     * Loads audio and re-renders the waveform.\n     *\n     * @param {string|HTMLMediaElement} url The url of the audio file or the\n     * audio element with the audio\n     * @param {number[]|Number.<Array[]>} peaks Wavesurfer does not have to decode\n     * the audio to render the waveform if this is specified\n     * @param {?string} preload (Use with backend `MediaElement` and `MediaElementWebAudio`)\n     * `'none'|'metadata'|'auto'` Preload attribute for the media element\n     * @param {?number} duration The duration of the audio. This is used to\n     * render the peaks data in the correct size for the audio duration (as\n     * befits the current `minPxPerSec` and zoom value) without having to decode\n     * the audio.\n     * @returns {void}\n     * @throws Will throw an error if the `url` argument is empty.\n     * @example\n     * // uses fetch or media element to load file (depending on backend)\n     * wavesurfer.load('http://example.com/demo.wav');\n     *\n     * // setting preload attribute with media element backend and supplying\n     * // peaks\n     * wavesurfer.load(\n     *   'http://example.com/demo.wav',\n     *   [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\n     *   true\n     * );\n     */\n    load(url, peaks, preload, duration) {\n        if (!url) {\n            throw new Error('url parameter cannot be empty');\n        }\n        this.empty();\n        if (preload) {\n            // check whether the preload attribute will be usable and if not log\n            // a warning listing the reasons why not and nullify the variable\n            const preloadIgnoreReasons = {\n                \"Preload is not 'auto', 'none' or 'metadata'\":\n                    ['auto', 'metadata', 'none'].indexOf(preload) === -1,\n                'Peaks are not provided': !peaks,\n                \"Backend is not of type 'MediaElement' or 'MediaElementWebAudio'\":\n                    ['MediaElement', 'MediaElementWebAudio'].indexOf(\n                        this.params.backend\n                    ) === -1,\n                'Url is not of type string': typeof url !== 'string'\n            };\n            const activeReasons = Object.keys(preloadIgnoreReasons).filter(\n                reason => preloadIgnoreReasons[reason]\n            );\n            if (activeReasons.length) {\n                // eslint-disable-next-line no-console\n                console.warn(\n                    'Preload parameter of wavesurfer.load will be ignored because:\\n\\t- ' +\n                        activeReasons.join('\\n\\t- ')\n                );\n                // stop invalid values from being used\n                preload = null;\n            }\n        }\n\n        switch (this.params.backend) {\n            case 'WebAudio':\n                return this.loadBuffer(url, peaks, duration);\n            case 'MediaElement':\n            case 'MediaElementWebAudio':\n                return this.loadMediaElement(url, peaks, preload, duration);\n        }\n    }\n\n    /**\n     * Loads audio using Web Audio buffer backend.\n     *\n     * @private\n     * @param {string} url URL of audio file\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Optional duration of audio file\n     * @returns {void}\n     */\n    loadBuffer(url, peaks, duration) {\n        const load = action => {\n            if (action) {\n                this.tmpEvents.push(this.once('ready', action));\n            }\n            return this.getArrayBuffer(url, data => this.loadArrayBuffer(data));\n        };\n\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n            this.drawBuffer();\n            this.tmpEvents.push(this.once('interaction', load));\n        } else {\n            return load();\n        }\n    }\n\n    /**\n     * Either create a media element, or load an existing media element.\n     *\n     * @private\n     * @param {string|HTMLMediaElement} urlOrElt Either a path to a media file, or an\n     * existing HTML5 Audio/Video Element\n     * @param {number[]|Number.<Array[]>} peaks Array of peaks. Required to bypass web audio\n     * dependency\n     * @param {?boolean} preload Set to true if the preload attribute of the\n     * audio element should be enabled\n     * @param {?number} duration Optional duration of audio file\n     */\n    loadMediaElement(urlOrElt, peaks, preload, duration) {\n        let url = urlOrElt;\n\n        if (typeof urlOrElt === 'string') {\n            this.backend.load(url, this.mediaContainer, peaks, preload);\n        } else {\n            const elt = urlOrElt;\n            this.backend.loadElt(elt, peaks);\n\n            // If peaks are not provided,\n            // url = element.src so we can get peaks with web audio\n            url = elt.src;\n        }\n\n        this.tmpEvents.push(\n            this.backend.once('canplay', () => {\n                // ignore when backend was already destroyed\n                if (!this.backend.destroyed) {\n                    this.drawBuffer();\n                    this.isReady = true;\n                    this.fireEvent('ready');\n                }\n            }),\n            this.backend.once('error', err => this.fireEvent('error', err))\n        );\n\n        // If no pre-decoded peaks provided or pre-decoded peaks are\n        // provided with forceDecode flag, attempt to download the\n        // audio file and decode it with Web Audio.\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n        }\n\n        if (\n            (!peaks || this.params.forceDecode) &&\n            this.backend.supportsWebAudio()\n        ) {\n            this.getArrayBuffer(url, arraybuffer => {\n                this.decodeArrayBuffer(arraybuffer, buffer => {\n                    this.backend.buffer = buffer;\n                    this.backend.setPeaks(null);\n                    this.drawBuffer();\n                    this.fireEvent('waveform-ready');\n                });\n            });\n        }\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {Object} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete\n     */\n    decodeArrayBuffer(arraybuffer, callback) {\n        this.arraybuffer = arraybuffer;\n        this.backend.decodeArrayBuffer(\n            arraybuffer,\n            data => {\n                // Only use the decoded data if we haven't been destroyed or\n                // another decode started in the meantime\n                if (!this.isDestroyed && this.arraybuffer == arraybuffer) {\n                    callback(data);\n                    this.arraybuffer = null;\n                }\n            },\n            () => this.fireEvent('error', 'Error decoding audiobuffer')\n        );\n    }\n\n    /**\n     * Load an array buffer using fetch and pass the result to a callback\n     *\n     * @param {string} url The URL of the file object\n     * @param {function} callback The function to call on complete\n     * @returns {util.fetchFile} fetch call\n     * @private\n     */\n    getArrayBuffer(url, callback) {\n        let options = util.extend(\n            {\n                url: url,\n                responseType: 'arraybuffer'\n            },\n            this.params.xhr\n        );\n        const request = util.fetchFile(options);\n\n        this.currentRequest = request;\n\n        this.tmpEvents.push(\n            request.on('progress', e => {\n                this.onProgress(e);\n            }),\n            request.on('success', data => {\n                callback(data);\n                this.currentRequest = null;\n            }),\n            request.on('error', e => {\n                this.fireEvent('error', e);\n                this.currentRequest = null;\n            })\n        );\n\n        return request;\n    }\n\n    /**\n     * Called while the audio file is loading\n     *\n     * @private\n     * @param {Event} e Progress event\n     * @emits WaveSurfer#loading\n     */\n    onProgress(e) {\n        let percentComplete;\n        if (e.lengthComputable) {\n            percentComplete = e.loaded / e.total;\n        } else {\n            // Approximate progress with an asymptotic\n            // function, and assume downloads in the 1-3 MB range.\n            percentComplete = e.loaded / (e.loaded + 1000000);\n        }\n        this.fireEvent('loading', Math.round(percentComplete * 100), e.target);\n    }\n\n    /**\n     * Exports PCM data into a JSON array and opens in a new window.\n     *\n     * @param {number} length=1024 The scale in which to export the peaks. (Integer)\n     * @param {number} accuracy=10000 (Integer)\n     * @param {?boolean} noWindow Set to true to disable opening a new\n     * window with the JSON\n     * @param {number} start Start index\n     * @todo Update exportPCM to work with new getPeaks signature\n     * @return {string} JSON of peaks\n     */\n    exportPCM(length, accuracy, noWindow, start) {\n        length = length || 1024;\n        start = start || 0;\n        accuracy = accuracy || 10000;\n        noWindow = noWindow || false;\n        const peaks = this.backend.getPeaks(length, start);\n        const arr = [].map.call(\n            peaks,\n            val => Math.round(val * accuracy) / accuracy\n        );\n        const json = JSON.stringify(arr);\n        if (!noWindow) {\n            window.open(\n                'data:application/json;charset=utf-8,' +\n                    encodeURIComponent(json)\n            );\n        }\n        return json;\n    }\n\n    /**\n     * Save waveform image as data URI.\n     *\n     * The default format is `'image/png'`. Other supported types are\n     * `'image/jpeg'` and `'image/webp'`.\n     *\n     * @param {string} format='image/png' A string indicating the image format.\n     * The default format type is `'image/png'`.\n     * @param {number} quality=1 A number between 0 and 1 indicating the image\n     * quality to use for image formats that use lossy compression such as\n     * `'image/jpeg'`` and `'image/webp'`.\n     * @param {string} type Image data type to return. Either 'dataURL' (default)\n     * or 'blob'.\n     * @return {string|string[]|Promise} When using `'dataURL'` type this returns\n     * a single data URL or an array of data URLs, one for each canvas. When using\n     * `'blob'` type this returns a `Promise` resolving with an array of `Blob`\n     * instances, one for each canvas.\n     */\n    exportImage(format, quality, type) {\n        if (!format) {\n            format = 'image/png';\n        }\n        if (!quality) {\n            quality = 1;\n        }\n        if (!type) {\n            type = 'dataURL';\n        }\n\n        return this.drawer.getImage(format, quality, type);\n    }\n\n    /**\n     * Cancel any fetch request currently in progress\n     */\n    cancelAjax() {\n        if (this.currentRequest && this.currentRequest.controller) {\n            this.currentRequest.controller.abort();\n            this.currentRequest = null;\n        }\n    }\n\n    /**\n     * @private\n     */\n    clearTmpEvents() {\n        this.tmpEvents.forEach(e => e.un());\n    }\n\n    /**\n     * Display empty waveform.\n     */\n    empty() {\n        if (!this.backend.isPaused()) {\n            this.stop();\n            this.backend.disconnectSource();\n        }\n        this.isReady = false;\n        this.cancelAjax();\n        this.clearTmpEvents();\n\n        // empty drawer\n        this.drawer.progress(0);\n        this.drawer.setWidth(0);\n        this.drawer.drawPeaks({ length: this.drawer.getWidth() }, 0);\n    }\n\n    /**\n     * Remove events, elements and disconnect WebAudio nodes.\n     *\n     * @emits WaveSurfer#destroy\n     */\n    destroy() {\n        this.destroyAllPlugins();\n        this.fireEvent('destroy');\n        this.cancelAjax();\n        this.clearTmpEvents();\n        this.unAll();\n        if (this.params.responsive !== false) {\n            window.removeEventListener('resize', this._onResize, true);\n            window.removeEventListener(\n                'orientationchange',\n                this._onResize,\n                true\n            );\n        }\n        if (this.backend) {\n            this.backend.destroy();\n        }\n        if (this.drawer) {\n            this.drawer.destroy();\n        }\n        this.isDestroyed = true;\n        this.isReady = false;\n        this.arraybuffer = null;\n    }\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/wavesurfer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 578,
    "kind": "external",
    "name": "HTMLElement",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/HTMLElement",
    "memberof": "src/wavesurfer.js",
    "static": true,
    "longname": "src/wavesurfer.js~HTMLElement",
    "access": "public",
    "description": null
  },
  {
    "__docId__": 579,
    "kind": "external",
    "name": "OfflineAudioContext",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext",
    "memberof": "src/wavesurfer.js",
    "static": true,
    "longname": "src/wavesurfer.js~OfflineAudioContext",
    "access": "public",
    "description": null
  },
  {
    "__docId__": 580,
    "kind": "external",
    "name": "File",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/File",
    "memberof": "src/wavesurfer.js",
    "static": true,
    "longname": "src/wavesurfer.js~File",
    "access": "public",
    "description": null
  },
  {
    "__docId__": 581,
    "kind": "external",
    "name": "Blob",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Blob",
    "memberof": "src/wavesurfer.js",
    "static": true,
    "longname": "src/wavesurfer.js~Blob",
    "access": "public",
    "description": null
  },
  {
    "__docId__": 582,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "src/wavesurfer.js",
    "static": true,
    "longname": "src/wavesurfer.js~CanvasRenderingContext2D",
    "access": "public",
    "description": null
  },
  {
    "__docId__": 583,
    "kind": "external",
    "name": "MediaStreamConstraints",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints",
    "memberof": "src/wavesurfer.js",
    "static": true,
    "longname": "src/wavesurfer.js~MediaStreamConstraints",
    "access": "public",
    "description": null
  },
  {
    "__docId__": 584,
    "kind": "external",
    "name": "AudioNode",
    "externalLink": "https://developer.mozilla.org/de/docs/Web/API/AudioNode",
    "memberof": "src/wavesurfer.js",
    "static": true,
    "longname": "src/wavesurfer.js~AudioNode",
    "access": "public",
    "description": null
  },
  {
    "__docId__": 585,
    "kind": "typedef",
    "name": "WavesurferParams",
    "memberof": "src/wavesurfer.js",
    "static": true,
    "longname": "src/wavesurfer.js~WavesurferParams",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "AudioContext"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "audioContext",
        "description": "Use your own previously\ninitialized AudioContext or leave blank."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "audioRate",
        "description": "Speed at which to play audio. Lower number is\nslower."
      },
      {
        "nullable": null,
        "types": [
          "ScriptProcessorNode"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "audioScriptProcessor",
        "description": "Use your own previously\ninitialized ScriptProcessorNode or leave blank."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "autoCenter",
        "description": "If a scrollbar is present, center the\nwaveform on current progress"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "5",
        "defaultRaw": 5,
        "name": "autoCenterRate",
        "description": "If autoCenter is active, rate at which the\nwaveform is centered"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "autoCenterImmediately",
        "description": "If autoCenter is active, immediately\ncenter waveform on current progress"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'WebAudio'",
        "defaultRaw": "'WebAudio'",
        "name": "backend",
        "description": "`'WebAudio'|'MediaElement'|'MediaElementWebAudio'` In most cases\nyou don't have to set this manually. MediaElement is a fallback for unsupported browsers.\nMediaElementWebAudio allows to use WebAudio API also with big audio files, loading audio like with\nMediaElement backend (HTML5 audio tag). You have to use the same methods of MediaElement backend for loading and\nplayback, giving also peaks, so the audio data are not decoded. In this way you can use WebAudio features, like filters,\nalso with audio with big duration. For example:\n` wavesurfer.load(url | HTMLMediaElement, peaks, preload, duration);\n  wavesurfer.play();\n  wavesurfer.setFilter(customFilter);\n`"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "backgroundColor",
        "description": "Change background color of the\nwaveform container."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "barHeight",
        "description": "The height of the wave bars."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "barRadius",
        "description": "The radius of the wave bars. Makes bars rounded"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "barGap",
        "description": "The optional spacing between bars of the wave,\nif not provided will be calculated in legacy format."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "barWidth",
        "description": "Draw the waveform using bars."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "closeAudioContext",
        "description": "Close and nullify all audio\ncontexts when the destroy method is called."
      },
      {
        "nullable": false,
        "types": [
          "string",
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": "CSS selector or HTML element where\nthe waveform should be drawn. This is the only required parameter."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'#333'",
        "defaultRaw": "'#333'",
        "name": "cursorColor",
        "description": "The fill color of the cursor indicating\nthe playhead position."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cursorWidth",
        "description": "Measured in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "duration",
        "description": "Optional audio length so pre-rendered peaks\ncan be display immediately for example."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "fillParent",
        "description": "Whether to fill the entire container or\ndraw only according to `minPxPerSec`."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "forceDecode",
        "description": "Force decoding of audio using web audio\nwhen zooming to get a more detailed waveform."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "128",
        "defaultRaw": 128,
        "name": "height",
        "description": "The height of the waveform. Measured in\npixels."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "hideScrollbar",
        "description": "Whether to hide the horizontal\nscrollbar when one would normally be shown."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "interact",
        "description": "Whether the mouse interaction will be\nenabled at initialization. You can switch this parameter at any time later\non."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "loopSelection",
        "description": "(Use with regions plugin) Enable\nlooping of selected regions"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "4000",
        "defaultRaw": 4000,
        "name": "maxCanvasWidth",
        "description": "Maximum width of a single canvas in\npixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\neven integer). If the waveform is longer than this value, additional canvases\nwill be used to render the waveform, which is useful for very large waveforms\nthat may be too wide for browsers to draw on a single canvas."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "mediaControls",
        "description": "(Use with backend `MediaElement` or `MediaElementWebAudio`)\nthis enables the native controls for the media element"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'audio'",
        "defaultRaw": "'audio'",
        "name": "mediaType",
        "description": "(Use with backend `MediaElement` or `MediaElementWebAudio`)\n`'audio'|'video'` ('video' only for `MediaElement`)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "20",
        "defaultRaw": 20,
        "name": "minPxPerSec",
        "description": "Minimum number of pixels per second of\naudio."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "normalize",
        "description": "If true, normalize by the maximum peak\ninstead of 1.0."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "partialRender",
        "description": "Use the PeakCache to improve\nrendering speed of large waveforms"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "window.devicePixelRatio",
        "defaultRaw": "window.devicePixelRatio",
        "name": "pixelRatio",
        "description": "The pixel ratio used to\ncalculate display"
      },
      {
        "nullable": null,
        "types": [
          "PluginDefinition[]"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "plugins",
        "description": "An array of plugin definitions to\nregister during instantiation, they will be directly initialised unless they\nare added with the `deferInit` property set to true."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'#555'",
        "defaultRaw": "'#555'",
        "name": "progressColor",
        "description": "The fill color of the part of the\nwaveform behind the cursor. When `progressColor` and `waveColor` are the same\nthe progress wave is not rendered at all."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "removeMediaElementOnDestroy",
        "description": "Set to false to keep the\nmedia element in the DOM when the player is destroyed. This is useful when\nreusing an existing media element via the `loadMediaElement` method."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "MultiCanvas",
        "defaultRaw": "MultiCanvas",
        "name": "renderer",
        "description": "Can be used to inject a custom\nrenderer."
      },
      {
        "nullable": null,
        "types": [
          "boolean",
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "responsive",
        "description": "If set to `true` resize the\nwaveform, when the window is resized. This is debounced with a `100ms`\ntimeout by default. If this parameter is a number it represents that timeout."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "rtl",
        "description": "If set to `true`, renders waveform from\nright-to-left."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "scrollParent",
        "description": "Whether to scroll the container with a\nlengthy waveform. Otherwise the waveform is shrunk to the container width\n(see fillParent)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "skipLength",
        "description": "Number of seconds to skip with the\nskipForward() and skipBackward() methods."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "splitChannels",
        "description": "Render with separate waveforms for\nthe channels of the audio"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'#999'",
        "defaultRaw": "'#999'",
        "name": "waveColor",
        "description": "The fill color of the waveform after the\ncursor."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "xhr",
        "description": "XHR options. For example:\n`let xhr = {\n    cache: 'default',\n    mode: 'cors',\n    method: 'GET',\n    credentials: 'same-origin',\n    redirect: 'follow',\n    referrer: 'client',\n    headers: [\n        {\n            key: 'Authorization',\n            value: 'my-token'\n        }\n    ]\n};`"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "WavesurferParams"
    }
  },
  {
    "__docId__": 586,
    "kind": "typedef",
    "name": "PluginDefinition",
    "memberof": "src/wavesurfer.js",
    "static": true,
    "longname": "src/wavesurfer.js~PluginDefinition",
    "access": "public",
    "description": "The Object used to describe a plugin",
    "examples": [
      "wavesurfer.addPlugin(pluginDefinition);"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin, the plugin instance will be\nadded as a property to the wavesurfer instance under this name"
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "staticProps",
        "description": "The properties that should be added to the\nwavesurfer instance as static properties"
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "deferInit",
        "description": "Don't initialise plugin\nautomatically"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "params",
        "description": "The plugin parameters, they are the first parameter\npassed to the plugin class constructor function"
      },
      {
        "nullable": null,
        "types": [
          "PluginClass"
        ],
        "spread": false,
        "optional": false,
        "name": "instance",
        "description": "The plugin instance factory, is called with\nthe dependency specified in extends. Returns the plugin class."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "PluginDefinition"
    }
  },
  {
    "__docId__": 587,
    "kind": "class",
    "name": "PluginClass",
    "memberof": "src/wavesurfer.js",
    "static": true,
    "longname": "src/wavesurfer.js~PluginClass",
    "access": "public",
    "export": false,
    "importPath": "wavesurfer.js/src/wavesurfer.js",
    "importStyle": null,
    "description": "This is the interface which is implemented by all plugin classes. Note\nthat this only turns into an observer after being passed through\n`wavesurfer.addPlugin`.",
    "lineNumber": 157,
    "interface": false,
    "extends": [
      "Observer"
    ],
    "ignore": true
  },
  {
    "__docId__": 588,
    "kind": "method",
    "name": "create",
    "memberof": "src/wavesurfer.js~PluginClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~PluginClass#create",
    "access": "public",
    "description": "Plugin definition factory\n\nThis function must be used to create a plugin definition which can be\nused by wavesurfer to correctly instantiate the plugin.\n\nIt returns a `PluginDefinition` object representing the plugin.",
    "lineNumber": 168,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "params",
        "description": "The plugin params (specific to the plugin)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 589,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/wavesurfer.js~PluginClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~PluginClass#constructor",
    "access": "public",
    "description": "Construct the plugin",
    "lineNumber": 175,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "params",
        "description": "The plugin params (specific to the plugin)"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "ws",
        "description": "The wavesurfer instance"
      }
    ]
  },
  {
    "__docId__": 590,
    "kind": "method",
    "name": "init",
    "memberof": "src/wavesurfer.js~PluginClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~PluginClass#init",
    "access": "public",
    "description": "Initialise the plugin\n\nStart doing something. This is called by\n`wavesurfer.initPlugin(pluginName)`",
    "lineNumber": 182,
    "params": [],
    "return": null
  },
  {
    "__docId__": 591,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/wavesurfer.js~PluginClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~PluginClass#destroy",
    "access": "public",
    "description": "Destroy the plugin instance\n\nStop doing something. This is called by\n`wavesurfer.destroyPlugin(pluginName)`",
    "lineNumber": 189,
    "params": [],
    "return": null
  },
  {
    "__docId__": 592,
    "kind": "class",
    "name": "WaveSurfer",
    "memberof": "src/wavesurfer.js",
    "static": true,
    "longname": "src/wavesurfer.js~WaveSurfer",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/wavesurfer.js",
    "importStyle": "WaveSurfer",
    "description": "WaveSurfer core library class",
    "examples": [
      "const params = {\n  container: '#waveform',\n  waveColor: 'violet',\n  progressColor: 'purple'\n};\n\n// initialise like this\nconst wavesurfer = WaveSurfer.create(params);\n\n// or like this ...\nconst wavesurfer = new WaveSurfer(params);\nwavesurfer.init();\n\n// load audio file\nwavesurfer.load('example/media/demo.wav');"
    ],
    "lineNumber": 213,
    "interface": false,
    "extends": [
      "Observer"
    ]
  },
  {
    "__docId__": 593,
    "kind": "member",
    "name": "defaultParams",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#defaultParams",
    "access": "private",
    "description": null,
    "lineNumber": 215,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 594,
    "kind": "member",
    "name": "backends",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#backends",
    "access": "private",
    "description": null,
    "lineNumber": 261,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 595,
    "kind": "method",
    "name": "create",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/wavesurfer.js~WaveSurfer.create",
    "access": "public",
    "description": "Instantiate this class, call its `init` function and returns it",
    "examples": [
      "const wavesurfer = WaveSurfer.create(params);"
    ],
    "lineNumber": 274,
    "params": [
      {
        "nullable": null,
        "types": [
          "WavesurferParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The wavesurfer parameters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "WaveSurfer instance"
    }
  },
  {
    "__docId__": 596,
    "kind": "member",
    "name": "VERSION",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": true,
    "longname": "src/wavesurfer.js~WaveSurfer.VERSION",
    "access": "public",
    "description": "The library version number is available as a static property of the\nWaveSurfer class",
    "examples": [
      "console.log('Using wavesurfer.js ' + WaveSurfer.VERSION);"
    ],
    "lineNumber": 287,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 597,
    "kind": "member",
    "name": "util",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#util",
    "access": "public",
    "description": "Functions in the `util` property are available as a prototype property to\nall instances",
    "examples": [
      "const wavesurfer = WaveSurfer.create(params);\nwavesurfer.util.style(myElement, { background: 'blue' });"
    ],
    "lineNumber": 298,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 598,
    "kind": "member",
    "name": "util",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": true,
    "longname": "src/wavesurfer.js~WaveSurfer.util",
    "access": "public",
    "description": "Functions in the `util` property are available as a static property of the\nWaveSurfer class",
    "examples": [
      "WaveSurfer.util.style(myElement, { background: 'blue' });"
    ],
    "lineNumber": 308,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 599,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#constructor",
    "access": "public",
    "description": "Initialise wavesurfer instance",
    "examples": [
      "const wavesurfer = new WaveSurfer(params);"
    ],
    "lineNumber": 318,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{this} Wavesurfer instance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "WavesurferParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Instantiation options for wavesurfer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": "Wavesurfer instance"
    }
  },
  {
    "__docId__": 600,
    "kind": "member",
    "name": "params",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#params",
    "access": "private",
    "description": "Extract relevant parameters (or defaults)",
    "lineNumber": 324,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 601,
    "kind": "member",
    "name": "container",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#container",
    "access": "private",
    "description": null,
    "lineNumber": 327,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 602,
    "kind": "member",
    "name": "mediaContainer",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#mediaContainer",
    "access": "private",
    "description": null,
    "lineNumber": 338,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 605,
    "kind": "member",
    "name": "savedVolume",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#savedVolume",
    "access": "private",
    "description": "",
    "lineNumber": 372,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 606,
    "kind": "member",
    "name": "isMuted",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#isMuted",
    "access": "private",
    "description": "",
    "lineNumber": 378,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 607,
    "kind": "member",
    "name": "tmpEvents",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#tmpEvents",
    "access": "private",
    "description": "",
    "lineNumber": 385,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 608,
    "kind": "member",
    "name": "currentRequest",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#currentRequest",
    "access": "private",
    "description": "",
    "lineNumber": 391,
    "type": {
      "nullable": null,
      "types": [
        "Observer"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 609,
    "kind": "member",
    "name": "arraybuffer",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#arraybuffer",
    "access": "private",
    "description": null,
    "lineNumber": 393,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 610,
    "kind": "member",
    "name": "drawer",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#drawer",
    "access": "private",
    "description": null,
    "lineNumber": 395,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 611,
    "kind": "member",
    "name": "backend",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#backend",
    "access": "private",
    "description": null,
    "lineNumber": 397,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 612,
    "kind": "member",
    "name": "peakCache",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#peakCache",
    "access": "private",
    "description": null,
    "lineNumber": 399,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 613,
    "kind": "member",
    "name": "Drawer",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#Drawer",
    "access": "private",
    "description": "",
    "lineNumber": 408,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 614,
    "kind": "member",
    "name": "Backend",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#Backend",
    "access": "public",
    "description": null,
    "lineNumber": 424,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 615,
    "kind": "member",
    "name": "initialisedPluginList",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#initialisedPluginList",
    "access": "private",
    "description": "",
    "lineNumber": 429,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 616,
    "kind": "member",
    "name": "isDestroyed",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#isDestroyed",
    "access": "private",
    "description": null,
    "lineNumber": 431,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 617,
    "kind": "member",
    "name": "isReady",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#isReady",
    "access": "public",
    "description": "Get the current ready status.",
    "examples": [
      "const isReady = wavesurfer.isReady;"
    ],
    "lineNumber": 439,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 618,
    "kind": "member",
    "name": "_onResize",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#_onResize",
    "access": "private",
    "description": null,
    "lineNumber": 445,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 619,
    "kind": "method",
    "name": "init",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#init",
    "access": "public",
    "description": "Initialise the wave",
    "examples": [
      "var wavesurfer = new WaveSurfer(params);\nwavesurfer.init();"
    ],
    "lineNumber": 471,
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": "The wavesurfer instance"
    },
    "params": []
  },
  {
    "__docId__": 620,
    "kind": "method",
    "name": "registerPlugins",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#registerPlugins",
    "access": "public",
    "description": "Add and initialise array of plugins (if `plugin.deferInit` is falsey),\nthis function is called in the init function of wavesurfer",
    "lineNumber": 487,
    "params": [
      {
        "nullable": null,
        "types": [
          "PluginDefinition[]"
        ],
        "spread": false,
        "optional": false,
        "name": "plugins",
        "description": "An array of plugin definitions"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": "The wavesurfer instance"
    },
    "emits": [
      {
        "types": [
          "WaveSurfer#plugins-registered"
        ],
        "description": "Called with the array of plugin definitions"
      }
    ]
  },
  {
    "__docId__": 621,
    "kind": "method",
    "name": "getActivePlugins",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getActivePlugins",
    "access": "public",
    "description": "Get a map of plugin names that are currently initialised",
    "examples": [
      "wavesurfer.getPlugins();"
    ],
    "lineNumber": 509,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Object with plugin names"
    },
    "params": []
  },
  {
    "__docId__": 622,
    "kind": "method",
    "name": "addPlugin",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#addPlugin",
    "access": "public",
    "description": "Add a plugin object to wavesurfer",
    "examples": [
      "wavesurfer.addPlugin(WaveSurfer.minimap());"
    ],
    "lineNumber": 521,
    "params": [
      {
        "nullable": null,
        "types": [
          "PluginDefinition"
        ],
        "spread": false,
        "optional": false,
        "name": "plugin",
        "description": "A plugin definition"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": "The wavesurfer instance"
    },
    "emits": [
      {
        "types": [
          "WaveSurfer#plugin-added"
        ],
        "description": "Called with the name of the plugin that was added"
      }
    ]
  },
  {
    "__docId__": 623,
    "kind": "member",
    "name": "[pluginStaticProp]",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#[pluginStaticProp]",
    "access": "public",
    "description": "Properties defined in a plugin definition's `staticProps` property are added as\nstaticProps properties of the WaveSurfer instance",
    "lineNumber": 538,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 624,
    "kind": "member",
    "name": "[plugin.name]",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#[plugin.name]",
    "access": "public",
    "description": "Instantiated plugin classes are added as a property of the wavesurfer\ninstance",
    "lineNumber": 557,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 625,
    "kind": "method",
    "name": "initPlugin",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#initPlugin",
    "access": "public",
    "description": "Initialise a plugin",
    "examples": [
      "wavesurfer.initPlugin('minimap');"
    ],
    "lineNumber": 570,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "A plugin name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": "The wavesurfer instance"
    },
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#plugin-initialised"
      }
    ]
  },
  {
    "__docId__": 626,
    "kind": "method",
    "name": "destroyPlugin",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#destroyPlugin",
    "access": "public",
    "description": "Destroy a plugin",
    "examples": [
      "wavesurfer.destroyPlugin('minimap');"
    ],
    "lineNumber": 592,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{this} The wavesurfer instance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "A plugin name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": "The wavesurfer instance"
    },
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#plugin-destroyed"
      }
    ]
  },
  {
    "__docId__": 627,
    "kind": "method",
    "name": "destroyAllPlugins",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#destroyAllPlugins",
    "access": "private",
    "description": "Destroy all initialised plugins. Convenience function to use when\nwavesurfer is removed",
    "lineNumber": 619,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 628,
    "kind": "method",
    "name": "createDrawer",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#createDrawer",
    "access": "private",
    "description": "Create the drawer and draw the waveform",
    "lineNumber": 631,
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#drawer-created"
      }
    ],
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 630,
    "kind": "method",
    "name": "createBackend",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#createBackend",
    "access": "private",
    "description": "Create the backend",
    "lineNumber": 666,
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#backend-created"
      }
    ],
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 633,
    "kind": "method",
    "name": "createPeakCache",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#createPeakCache",
    "access": "private",
    "description": "Create the peak cache",
    "lineNumber": 713,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 635,
    "kind": "method",
    "name": "getDuration",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getDuration",
    "access": "public",
    "description": "Get the duration of the audio clip",
    "examples": [
      "const duration = wavesurfer.getDuration();"
    ],
    "lineNumber": 725,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Duration in seconds"
    },
    "params": []
  },
  {
    "__docId__": 636,
    "kind": "method",
    "name": "getCurrentTime",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getCurrentTime",
    "access": "public",
    "description": "Get the current playback position",
    "examples": [
      "const currentTime = wavesurfer.getCurrentTime();"
    ],
    "lineNumber": 735,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Playback position in seconds"
    },
    "params": []
  },
  {
    "__docId__": 637,
    "kind": "method",
    "name": "setCurrentTime",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#setCurrentTime",
    "access": "public",
    "description": "Set the current play time in seconds.",
    "lineNumber": 745,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seconds",
        "description": "A positive number in seconds. E.g. 10 means 10\nseconds, 60 means 1 minute"
      }
    ],
    "return": null
  },
  {
    "__docId__": 638,
    "kind": "method",
    "name": "play",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#play",
    "access": "public",
    "description": "Starts playback from the current position. Optional start and end\nmeasured in seconds can be used to set the range of audio to play.",
    "examples": [
      "// play from second 1 to 5\nwavesurfer.play(1, 5);"
    ],
    "lineNumber": 765,
    "params": [
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Position to start at"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Position to end at"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Result of the backend play method"
    },
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#interaction"
      }
    ]
  },
  {
    "__docId__": 639,
    "kind": "method",
    "name": "pause",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#pause",
    "access": "public",
    "description": "Stops and pauses playback",
    "examples": [
      "wavesurfer.pause();"
    ],
    "lineNumber": 776,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Result of the backend pause method"
    },
    "params": []
  },
  {
    "__docId__": 640,
    "kind": "method",
    "name": "playPause",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#playPause",
    "access": "public",
    "description": "Toggle playback",
    "examples": [
      "wavesurfer.playPause();"
    ],
    "lineNumber": 788,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Result of the backend play or pause method"
    },
    "params": []
  },
  {
    "__docId__": 641,
    "kind": "method",
    "name": "isPlaying",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#isPlaying",
    "access": "public",
    "description": "Get the current playback state",
    "examples": [
      "const isPlaying = wavesurfer.isPlaying();"
    ],
    "lineNumber": 798,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "False if paused, true if playing"
    },
    "params": []
  },
  {
    "__docId__": 642,
    "kind": "method",
    "name": "skipBackward",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#skipBackward",
    "access": "public",
    "description": "Skip backward",
    "examples": [
      "wavesurfer.skipBackward();"
    ],
    "lineNumber": 809,
    "params": [
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seconds",
        "description": "Amount to skip back, if not specified `skipLength`\nis used"
      }
    ],
    "return": null
  },
  {
    "__docId__": 643,
    "kind": "method",
    "name": "skipForward",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#skipForward",
    "access": "public",
    "description": "Skip forward",
    "examples": [
      "wavesurfer.skipForward();"
    ],
    "lineNumber": 820,
    "params": [
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seconds",
        "description": "Amount to skip back, if not specified `skipLength`\nis used"
      }
    ],
    "return": null
  },
  {
    "__docId__": 644,
    "kind": "method",
    "name": "skip",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#skip",
    "access": "public",
    "description": "Skip a number of seconds from the current position (use a negative value\nto go backwards).",
    "examples": [
      "// go back 2 seconds\nwavesurfer.skip(-2);"
    ],
    "lineNumber": 833,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "offset",
        "description": "Amount to skip back or forwards"
      }
    ],
    "return": null
  },
  {
    "__docId__": 645,
    "kind": "method",
    "name": "seekAndCenter",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#seekAndCenter",
    "access": "public",
    "description": "Seeks to a position and centers the view",
    "examples": [
      "// seek and go to the middle of the audio\nwavesurfer.seekTo(0.5);"
    ],
    "lineNumber": 848,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "progress",
        "description": "Between 0 (=beginning) and 1 (=end)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 646,
    "kind": "method",
    "name": "seekTo",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#seekTo",
    "access": "public",
    "description": "Seeks to a position",
    "examples": [
      "// seek to the middle of the audio\nwavesurfer.seekTo(0.5);"
    ],
    "lineNumber": 863,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "progress",
        "description": "Between 0 (=beginning) and 1 (=end)"
      }
    ],
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#interaction"
      },
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#seek"
      }
    ],
    "return": null
  },
  {
    "__docId__": 647,
    "kind": "method",
    "name": "stop",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#stop",
    "access": "public",
    "description": "Stops and goes to the beginning.",
    "examples": [
      "wavesurfer.stop();"
    ],
    "lineNumber": 900,
    "params": [],
    "return": null
  },
  {
    "__docId__": 648,
    "kind": "method",
    "name": "setSinkId",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#setSinkId",
    "access": "public",
    "description": "Sets the ID of the audio device to use for output and returns a Promise.",
    "lineNumber": 914,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} `Promise` that resolves to `undefined` when there are\nno errors detected."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": "String value representing underlying output\ndevice"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "`Promise` that resolves to `undefined` when there are\nno errors detected."
    }
  },
  {
    "__docId__": 649,
    "kind": "method",
    "name": "setVolume",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#setVolume",
    "access": "public",
    "description": "Set the playback volume.",
    "lineNumber": 925,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newVolume",
        "description": "A value between 0 and 1, 0 being no\nvolume and 1 being full volume."
      }
    ],
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#volume"
      }
    ],
    "return": null
  },
  {
    "__docId__": 650,
    "kind": "method",
    "name": "getVolume",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getVolume",
    "access": "public",
    "description": "Get the playback volume.",
    "lineNumber": 936,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A value between 0 and 1, 0 being no\nvolume and 1 being full volume."
    },
    "params": []
  },
  {
    "__docId__": 651,
    "kind": "method",
    "name": "setPlaybackRate",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#setPlaybackRate",
    "access": "public",
    "description": "Set the playback rate.",
    "examples": [
      "wavesurfer.setPlaybackRate(2);"
    ],
    "lineNumber": 947,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "rate",
        "description": "A positive number. E.g. 0.5 means half the normal\nspeed, 2 means double speed and so on."
      }
    ],
    "return": null
  },
  {
    "__docId__": 652,
    "kind": "method",
    "name": "getPlaybackRate",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getPlaybackRate",
    "access": "public",
    "description": "Get the playback rate.",
    "lineNumber": 956,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The current playback rate."
    },
    "params": []
  },
  {
    "__docId__": 653,
    "kind": "method",
    "name": "toggleMute",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#toggleMute",
    "access": "public",
    "description": "Toggle the volume on and off. If not currently muted it will save the\ncurrent volume value and turn the volume off. If currently muted then it\nwill restore the volume to the saved value, and then rest the saved\nvalue.",
    "examples": [
      "wavesurfer.toggleMute();"
    ],
    "lineNumber": 968,
    "params": [],
    "return": null
  },
  {
    "__docId__": 654,
    "kind": "method",
    "name": "setMute",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#setMute",
    "access": "public",
    "description": "Enable or disable muted audio",
    "examples": [
      "// unmute\nwavesurfer.setMute(false);\nconsole.log(wavesurfer.getMute()) // logs false"
    ],
    "lineNumber": 983,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "mute",
        "description": "Specify `true` to mute audio."
      }
    ],
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#volume"
      },
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#mute"
      }
    ],
    "return": null
  },
  {
    "__docId__": 658,
    "kind": "method",
    "name": "getMute",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getMute",
    "access": "public",
    "description": "Get the current mute status.",
    "examples": [
      "const isMuted = wavesurfer.getMute();"
    ],
    "lineNumber": 1013,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Current mute status"
    },
    "params": []
  },
  {
    "__docId__": 659,
    "kind": "method",
    "name": "getFilters",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getFilters",
    "access": "public",
    "description": "Get the list of current set filters as an array.\n\nFilters must be set with setFilters method first",
    "lineNumber": 1024,
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "List of enabled filters"
    },
    "params": []
  },
  {
    "__docId__": 660,
    "kind": "method",
    "name": "toggleScroll",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#toggleScroll",
    "access": "public",
    "description": "Toggles `scrollParent` and redraws",
    "examples": [
      "wavesurfer.toggleScroll();"
    ],
    "lineNumber": 1033,
    "params": [],
    "return": null
  },
  {
    "__docId__": 661,
    "kind": "method",
    "name": "toggleInteraction",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#toggleInteraction",
    "access": "public",
    "description": "Toggle mouse interaction",
    "examples": [
      "wavesurfer.toggleInteraction();"
    ],
    "lineNumber": 1043,
    "params": [],
    "return": null
  },
  {
    "__docId__": 662,
    "kind": "method",
    "name": "getWaveColor",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getWaveColor",
    "access": "public",
    "description": "Get the fill color of the waveform after the cursor.",
    "lineNumber": 1052,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A CSS color string."
    },
    "params": []
  },
  {
    "__docId__": 663,
    "kind": "method",
    "name": "setWaveColor",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#setWaveColor",
    "access": "public",
    "description": "Set the fill color of the waveform after the cursor.",
    "examples": [
      "wavesurfer.setWaveColor('#ddd');"
    ],
    "lineNumber": 1062,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "A CSS color string."
      }
    ],
    "return": null
  },
  {
    "__docId__": 664,
    "kind": "method",
    "name": "getProgressColor",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getProgressColor",
    "access": "public",
    "description": "Get the fill color of the waveform behind the cursor.",
    "lineNumber": 1072,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A CSS color string."
    },
    "params": []
  },
  {
    "__docId__": 665,
    "kind": "method",
    "name": "setProgressColor",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#setProgressColor",
    "access": "public",
    "description": "Set the fill color of the waveform behind the cursor.",
    "examples": [
      "wavesurfer.setProgressColor('#400');"
    ],
    "lineNumber": 1082,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "A CSS color string."
      }
    ],
    "return": null
  },
  {
    "__docId__": 666,
    "kind": "method",
    "name": "getBackgroundColor",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getBackgroundColor",
    "access": "public",
    "description": "Get the background color of the waveform container.",
    "lineNumber": 1092,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A CSS color string."
    },
    "params": []
  },
  {
    "__docId__": 667,
    "kind": "method",
    "name": "setBackgroundColor",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#setBackgroundColor",
    "access": "public",
    "description": "Set the background color of the waveform container.",
    "examples": [
      "wavesurfer.setBackgroundColor('#FF00FF');"
    ],
    "lineNumber": 1102,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "A CSS color string."
      }
    ],
    "return": null
  },
  {
    "__docId__": 668,
    "kind": "method",
    "name": "getCursorColor",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getCursorColor",
    "access": "public",
    "description": "Get the fill color of the cursor indicating the playhead\nposition.",
    "lineNumber": 1113,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A CSS color string."
    },
    "params": []
  },
  {
    "__docId__": 669,
    "kind": "method",
    "name": "setCursorColor",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#setCursorColor",
    "access": "public",
    "description": "Set the fill color of the cursor indicating the playhead\nposition.",
    "examples": [
      "wavesurfer.setCursorColor('#222');"
    ],
    "lineNumber": 1124,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "A CSS color string."
      }
    ],
    "return": null
  },
  {
    "__docId__": 670,
    "kind": "method",
    "name": "getHeight",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getHeight",
    "access": "public",
    "description": "Get the height of the waveform.",
    "lineNumber": 1134,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Height measured in pixels."
    },
    "params": []
  },
  {
    "__docId__": 671,
    "kind": "method",
    "name": "setHeight",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#setHeight",
    "access": "public",
    "description": "Set the height of the waveform.",
    "examples": [
      "wavesurfer.setHeight(200);"
    ],
    "lineNumber": 1144,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Height measured in pixels."
      }
    ],
    "return": null
  },
  {
    "__docId__": 672,
    "kind": "method",
    "name": "drawBuffer",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#drawBuffer",
    "access": "private",
    "description": "Get the correct peaks for current wave view-port and render wave",
    "lineNumber": 1156,
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#redraw"
      }
    ],
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 673,
    "kind": "method",
    "name": "zoom",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#zoom",
    "access": "public",
    "description": "Horizontally zooms the waveform in and out. It also changes the parameter\n`minPxPerSec` and enables the `scrollParent` option. Calling the function\nwith a falsey parameter will reset the zoom state.",
    "examples": [
      "wavesurfer.zoom(20);"
    ],
    "lineNumber": 1215,
    "params": [
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pxPerSec",
        "description": "Number of horizontal pixels per second of\naudio, if none is set the waveform returns to unzoomed state"
      }
    ],
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#zoom"
      }
    ],
    "return": null
  },
  {
    "__docId__": 674,
    "kind": "method",
    "name": "loadArrayBuffer",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#loadArrayBuffer",
    "access": "private",
    "description": "Decode buffer and load",
    "lineNumber": 1237,
    "params": [
      {
        "nullable": null,
        "types": [
          "ArrayBuffer"
        ],
        "spread": false,
        "optional": false,
        "name": "arraybuffer",
        "description": "Buffer to process"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 675,
    "kind": "method",
    "name": "loadDecodedBuffer",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#loadDecodedBuffer",
    "access": "private",
    "description": "Directly load an externally decoded AudioBuffer",
    "lineNumber": 1252,
    "params": [
      {
        "nullable": null,
        "types": [
          "AudioBuffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buffer",
        "description": "Buffer to process"
      }
    ],
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#ready"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 677,
    "kind": "method",
    "name": "loadBlob",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#loadBlob",
    "access": "public",
    "description": "Loads audio data from a Blob or File object",
    "examples": [
      ""
    ],
    "lineNumber": 1265,
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob",
          "File"
        ],
        "spread": false,
        "optional": false,
        "name": "blob",
        "description": "Audio data"
      }
    ],
    "return": null
  },
  {
    "__docId__": 678,
    "kind": "method",
    "name": "load",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#load",
    "access": "public",
    "description": "Loads audio and re-renders the waveform.",
    "examples": [
      "// uses fetch or media element to load file (depending on backend)\nwavesurfer.load('http://example.com/demo.wav');\n\n// setting preload attribute with media element backend and supplying\n// peaks\nwavesurfer.load(\n  'http://example.com/demo.wav',\n  [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\n  true\n);"
    ],
    "lineNumber": 1306,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "HTMLMediaElement"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The url of the audio file or the\naudio element with the audio"
      },
      {
        "nullable": null,
        "types": [
          "number[]",
          "Number.<Array[]>"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Wavesurfer does not have to decode\nthe audio to render the waveform if this is specified"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "preload",
        "description": "(Use with backend `MediaElement` and `MediaElementWebAudio`)\n`'none'|'metadata'|'auto'` Preload attribute for the media element"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "The duration of the audio. This is used to\nrender the peaks data in the correct size for the audio duration (as\nbefits the current `minPxPerSec` and zoom value) without having to decode\nthe audio."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if the `url` argument is empty."
      }
    ]
  },
  {
    "__docId__": 679,
    "kind": "method",
    "name": "loadBuffer",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#loadBuffer",
    "access": "private",
    "description": "Loads audio using Web Audio buffer backend.",
    "lineNumber": 1356,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "URL of audio file"
      },
      {
        "nullable": null,
        "types": [
          "number[]",
          "Number.<Array[]>"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Peaks data"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "Optional duration of audio file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 680,
    "kind": "method",
    "name": "loadMediaElement",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#loadMediaElement",
    "access": "private",
    "description": "Either create a media element, or load an existing media element.",
    "lineNumber": 1385,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "HTMLMediaElement"
        ],
        "spread": false,
        "optional": false,
        "name": "urlOrElt",
        "description": "Either a path to a media file, or an\nexisting HTML5 Audio/Video Element"
      },
      {
        "nullable": null,
        "types": [
          "number[]",
          "Number.<Array[]>"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Array of peaks. Required to bypass web audio\ndependency"
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "preload",
        "description": "Set to true if the preload attribute of the\naudio element should be enabled"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "Optional duration of audio file"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 682,
    "kind": "method",
    "name": "decodeArrayBuffer",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#decodeArrayBuffer",
    "access": "private",
    "description": "Decode an array buffer and pass data to a callback",
    "lineNumber": 1440,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "arraybuffer",
        "description": "The array buffer to decode"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The function to call on complete"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 685,
    "kind": "method",
    "name": "getArrayBuffer",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#getArrayBuffer",
    "access": "private",
    "description": "Load an array buffer using fetch and pass the result to a callback",
    "lineNumber": 1464,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{util.fetchFile} fetch call"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The URL of the file object"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The function to call on complete"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "util.fetchFile"
      ],
      "spread": false,
      "description": "fetch call"
    },
    "ignore": true
  },
  {
    "__docId__": 689,
    "kind": "method",
    "name": "onProgress",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#onProgress",
    "access": "private",
    "description": "Called while the audio file is loading",
    "lineNumber": 1500,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "Progress event"
      }
    ],
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#loading"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 690,
    "kind": "method",
    "name": "exportPCM",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#exportPCM",
    "access": "public",
    "description": "Exports PCM data into a JSON array and opens in a new window.",
    "lineNumber": 1523,
    "todo": [
      "Update exportPCM to work with new getPeaks signature"
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "1024",
        "defaultRaw": 1024,
        "name": "length",
        "description": "The scale in which to export the peaks. (Integer)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "10000",
        "defaultRaw": 10000,
        "name": "accuracy",
        "description": "(Integer)"
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noWindow",
        "description": "Set to true to disable opening a new\nwindow with the JSON"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Start index"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "JSON of peaks"
    }
  },
  {
    "__docId__": 691,
    "kind": "method",
    "name": "exportImage",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#exportImage",
    "access": "public",
    "description": "Save waveform image as data URI.\n\nThe default format is `'image/png'`. Other supported types are\n`'image/jpeg'` and `'image/webp'`.",
    "lineNumber": 1561,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'image/png'",
        "defaultRaw": "'image/png'",
        "name": "format",
        "description": "A string indicating the image format.\nThe default format type is `'image/png'`."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "quality",
        "description": "A number between 0 and 1 indicating the image\nquality to use for image formats that use lossy compression such as\n`'image/jpeg'`` and `'image/webp'`."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Image data type to return. Either 'dataURL' (default)\nor 'blob'."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "string[]",
        "Promise"
      ],
      "spread": false,
      "description": "When using `'dataURL'` type this returns\na single data URL or an array of data URLs, one for each canvas. When using\n`'blob'` type this returns a `Promise` resolving with an array of `Blob`\ninstances, one for each canvas."
    }
  },
  {
    "__docId__": 692,
    "kind": "method",
    "name": "cancelAjax",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#cancelAjax",
    "access": "public",
    "description": "Cancel any fetch request currently in progress",
    "lineNumber": 1578,
    "params": [],
    "return": null
  },
  {
    "__docId__": 694,
    "kind": "method",
    "name": "clearTmpEvents",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#clearTmpEvents",
    "access": "private",
    "description": "",
    "lineNumber": 1588,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 695,
    "kind": "method",
    "name": "empty",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#empty",
    "access": "public",
    "description": "Display empty waveform.",
    "lineNumber": 1595,
    "params": [],
    "return": null
  },
  {
    "__docId__": 697,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/wavesurfer.js~WaveSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/wavesurfer.js~WaveSurfer#destroy",
    "access": "public",
    "description": "Remove events, elements and disconnect WebAudio nodes.",
    "lineNumber": 1615,
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "WaveSurfer#destroy"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 701,
    "kind": "file",
    "name": "src/webaudio.js",
    "content": "import * as util from './util';\n\n// using constants to prevent someone writing the string wrong\nconst PLAYING = 'playing';\nconst PAUSED = 'paused';\nconst FINISHED = 'finished';\n\n/**\n * WebAudio backend\n *\n * @extends {Observer}\n */\nexport default class WebAudio extends util.Observer {\n    /** scriptBufferSize: size of the processing buffer */\n    static scriptBufferSize = 256;\n    /** audioContext: allows to process audio with WebAudio API */\n    audioContext = null;\n    /** @private */\n    offlineAudioContext = null;\n    /** @private */\n    stateBehaviors = {\n        [PLAYING]: {\n            init() {\n                this.addOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition + this.getPlayedTime();\n            }\n        },\n        [PAUSED]: {\n            init() {\n                this.removeOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition;\n            }\n        },\n        [FINISHED]: {\n            init() {\n                this.removeOnAudioProcess();\n                this.fireEvent('finish');\n            },\n            getPlayedPercents() {\n                return 1;\n            },\n            getCurrentTime() {\n                return this.getDuration();\n            }\n        }\n    };\n\n    /**\n     * Does the browser support this backend\n     *\n     * @return {boolean} Whether or not this browser supports this backend\n     */\n    supportsWebAudio() {\n        return !!(window.AudioContext || window.webkitAudioContext);\n    }\n\n    /**\n     * Get the audio context used by this backend or create one\n     *\n     * @return {AudioContext} Existing audio context, or creates a new one\n     */\n    getAudioContext() {\n        if (!window.WaveSurferAudioContext) {\n            window.WaveSurferAudioContext = new (window.AudioContext ||\n                window.webkitAudioContext)();\n        }\n        return window.WaveSurferAudioContext;\n    }\n\n    /**\n     * Get the offline audio context used by this backend or create one\n     *\n     * @param {number} sampleRate The sample rate to use\n     * @return {OfflineAudioContext} Existing offline audio context, or creates\n     * a new one\n     */\n    getOfflineAudioContext(sampleRate) {\n        if (!window.WaveSurferOfflineAudioContext) {\n            window.WaveSurferOfflineAudioContext = new (window.OfflineAudioContext ||\n                window.webkitOfflineAudioContext)(1, 2, sampleRate);\n        }\n        return window.WaveSurferOfflineAudioContext;\n    }\n\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super();\n        /** @private */\n        this.params = params;\n        /** ac: Audio Context instance */\n        this.ac =\n            params.audioContext ||\n            (this.supportsWebAudio() ? this.getAudioContext() : {});\n        /**@private */\n        this.lastPlay = this.ac.currentTime;\n        /** @private */\n        this.startPosition = 0;\n        /** @private  */\n        this.scheduledPause = null;\n        /** @private */\n        this.states = {\n            [PLAYING]: Object.create(this.stateBehaviors[PLAYING]),\n            [PAUSED]: Object.create(this.stateBehaviors[PAUSED]),\n            [FINISHED]: Object.create(this.stateBehaviors[FINISHED])\n        };\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.filters = [];\n        /** gainNode: allows to control audio volume */\n        this.gainNode = null;\n        /** @private */\n        this.mergedPeaks = null;\n        /** @private */\n        this.offlineAc = null;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** analyser: provides audio analysis information */\n        this.analyser = null;\n        /** scriptNode: allows processing audio */\n        this.scriptNode = null;\n        /** @private */\n        this.source = null;\n        /** @private */\n        this.splitPeaks = [];\n        /** @private */\n        this.state = null;\n        /** @private */\n        this.explicitDuration = params.duration;\n        /**\n         * Boolean indicating if the backend was destroyed.\n         */\n        this.destroyed = false;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n\n        this.setState(PAUSED);\n        this.setPlaybackRate(this.params.audioRate);\n        this.setLength(0);\n    }\n\n    /** @private */\n    disconnectFilters() {\n        if (this.filters) {\n            this.filters.forEach(filter => {\n                filter && filter.disconnect();\n            });\n            this.filters = null;\n            // Reconnect direct path\n            this.analyser.connect(this.gainNode);\n        }\n    }\n\n    /**\n     * @private\n     *\n     * @param {string} state The new state\n     */\n    setState(state) {\n        if (this.state !== this.states[state]) {\n            this.state = this.states[state];\n            this.state.init.call(this);\n        }\n    }\n\n    /**\n     * Unpacked `setFilters()`\n     *\n     * @param {...AudioNode} filters One or more filters to set\n     */\n    setFilter(...filters) {\n        this.setFilters(filters);\n    }\n\n    /**\n     * Insert custom Web Audio nodes into the graph\n     *\n     * @param {AudioNode[]} filters Packed filters array\n     * @example\n     * const lowpass = wavesurfer.backend.ac.createBiquadFilter();\n     * wavesurfer.backend.setFilter(lowpass);\n     */\n    setFilters(filters) {\n        // Remove existing filters\n        this.disconnectFilters();\n\n        // Insert filters if filter array not empty\n        if (filters && filters.length) {\n            this.filters = filters;\n\n            // Disconnect direct path before inserting filters\n            this.analyser.disconnect();\n\n            // Connect each filter in turn\n            filters\n                .reduce((prev, curr) => {\n                    prev.connect(curr);\n                    return curr;\n                }, this.analyser)\n                .connect(this.gainNode);\n        }\n    }\n    /** Create ScriptProcessorNode to process audio */\n    createScriptNode() {\n        if (this.params.audioScriptProcessor) {\n            this.scriptNode = this.params.audioScriptProcessor;\n        } else {\n            if (this.ac.createScriptProcessor) {\n                this.scriptNode = this.ac.createScriptProcessor(\n                    WebAudio.scriptBufferSize\n                );\n            } else {\n                this.scriptNode = this.ac.createJavaScriptNode(\n                    WebAudio.scriptBufferSize\n                );\n            }\n        }\n        this.scriptNode.connect(this.ac.destination);\n    }\n\n    /** @private */\n    addOnAudioProcess() {\n        this.scriptNode.onaudioprocess = () => {\n            const time = this.getCurrentTime();\n\n            if (time >= this.getDuration()) {\n                this.setState(FINISHED);\n                this.fireEvent('pause');\n            } else if (time >= this.scheduledPause) {\n                this.pause();\n            } else if (this.state === this.states[PLAYING]) {\n                this.fireEvent('audioprocess', time);\n            }\n        };\n    }\n\n    /** @private */\n    removeOnAudioProcess() {\n        this.scriptNode.onaudioprocess = () => {};\n    }\n    /** Create analyser node to perform audio analysis */\n    createAnalyserNode() {\n        this.analyser = this.ac.createAnalyser();\n        this.analyser.connect(this.gainNode);\n    }\n\n    /**\n     * Create the gain node needed to control the playback volume.\n     *\n     */\n    createVolumeNode() {\n        // Create gain node using the AudioContext\n        if (this.ac.createGain) {\n            this.gainNode = this.ac.createGain();\n        } else {\n            this.gainNode = this.ac.createGainNode();\n        }\n        // Add the gain node to the graph\n        this.gainNode.connect(this.ac.destination);\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            /**\n             * The webaudio API doesn't currently support setting the device\n             * output. Here we create an HTMLAudioElement, connect the\n             * webaudio stream to that element and setSinkId there.\n             */\n            let audio = new window.Audio();\n            if (!audio.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            audio.autoplay = true;\n            var dest = this.ac.createMediaStreamDestination();\n            this.gainNode.disconnect();\n            this.gainNode.connect(dest);\n            audio.srcObject = dest.stream;\n\n            return audio.setSinkId(deviceId);\n        } else {\n            return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n        }\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.gainNode.gain.setValueAtTime(value, this.ac.currentTime);\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.gainNode.gain.value;\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete.\n     * @param {function} errback The function to call on error.\n     */\n    decodeArrayBuffer(arraybuffer, callback, errback) {\n        if (!this.offlineAc) {\n            this.offlineAc = this.getOfflineAudioContext(\n                this.ac && this.ac.sampleRate ? this.ac.sampleRate : 44100\n            );\n        }\n        this.offlineAc.decodeAudioData(\n            arraybuffer,\n            data => callback(data),\n            errback\n        );\n    }\n\n    /**\n     * Set pre-decoded peaks\n     *\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Explicit duration\n     */\n    setPeaks(peaks, duration) {\n        if (duration != null) {\n            this.explicitDuration = duration;\n        }\n        this.peaks = peaks;\n    }\n\n    /**\n     * Set the rendered length (different from the length of the audio)\n     *\n     * @param {number} length The rendered length\n     */\n    setLength(length) {\n        // No resize, we can preserve the cached peaks.\n        if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) {\n            return;\n        }\n\n        this.splitPeaks = [];\n        this.mergedPeaks = [];\n        // Set the last element of the sparse array so the peak arrays are\n        // appropriately sized for other calculations.\n        const channels = this.buffer ? this.buffer.numberOfChannels : 1;\n        let c;\n        for (c = 0; c < channels; c++) {\n            this.splitPeaks[c] = [];\n            this.splitPeaks[c][2 * (length - 1)] = 0;\n            this.splitPeaks[c][2 * (length - 1) + 1] = 0;\n        }\n        this.mergedPeaks[2 * (length - 1)] = 0;\n        this.mergedPeaks[2 * (length - 1) + 1] = 0;\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of arrays of\n     * peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.peaks) {\n            return this.peaks;\n        }\n        if (!this.buffer) {\n            return [];\n        }\n\n        first = first || 0;\n        last = last || length - 1;\n\n        this.setLength(length);\n\n        if (!this.buffer) {\n            return this.params.splitChannels\n                ? this.splitPeaks\n                : this.mergedPeaks;\n        }\n\n        /**\n         * The following snippet fixes a buffering data issue on the Safari\n         * browser which returned undefined It creates the missing buffer based\n         * on 1 channel, 4096 samples and the sampleRate from the current\n         * webaudio context 4096 samples seemed to be the best fit for rendering\n         * will review this code once a stable version of Safari TP is out\n         */\n        if (!this.buffer.length) {\n            const newBuffer = this.createBuffer(1, 4096, this.sampleRate);\n            this.buffer = newBuffer.buffer;\n        }\n\n        const sampleSize = this.buffer.length / length;\n        const sampleStep = ~~(sampleSize / 10) || 1;\n        const channels = this.buffer.numberOfChannels;\n        let c;\n\n        for (c = 0; c < channels; c++) {\n            const peaks = this.splitPeaks[c];\n            const chan = this.buffer.getChannelData(c);\n            let i;\n\n            for (i = first; i <= last; i++) {\n                const start = ~~(i * sampleSize);\n                const end = ~~(start + sampleSize);\n                let min = 0;\n                let max = 0;\n                let j;\n\n                for (j = start; j < end; j += sampleStep) {\n                    const value = chan[j];\n\n                    if (value > max) {\n                        max = value;\n                    }\n\n                    if (value < min) {\n                        min = value;\n                    }\n                }\n\n                peaks[2 * i] = max;\n                peaks[2 * i + 1] = min;\n\n                if (c == 0 || max > this.mergedPeaks[2 * i]) {\n                    this.mergedPeaks[2 * i] = max;\n                }\n\n                if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\n                    this.mergedPeaks[2 * i + 1] = min;\n                }\n            }\n        }\n\n        return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Position\n     */\n    getPlayedPercents() {\n        return this.state.getPlayedPercents.call(this);\n    }\n\n    /** @private */\n    disconnectSource() {\n        if (this.source) {\n            this.source.disconnect();\n        }\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        if (!this.isPaused()) {\n            this.pause();\n        }\n        this.unAll();\n        this.buffer = null;\n        this.destroyed = true;\n        this.disconnectFilters();\n        this.disconnectSource();\n        this.gainNode.disconnect();\n        this.scriptNode.disconnect();\n        this.analyser.disconnect();\n\n        // close the audioContext if closeAudioContext option is set to true\n        if (this.params.closeAudioContext) {\n            // check if browser supports AudioContext.close()\n            if (\n                typeof this.ac.close === 'function' &&\n                this.ac.state != 'closed'\n            ) {\n                this.ac.close();\n            }\n            // clear the reference to the audiocontext\n            this.ac = null;\n            // clear the actual audiocontext, either passed as param or the\n            // global singleton\n            if (!this.params.audioContext) {\n                window.WaveSurferAudioContext = null;\n            } else {\n                this.params.audioContext = null;\n            }\n            // clear the offlineAudioContext\n            window.WaveSurferOfflineAudioContext = null;\n        }\n    }\n\n    /**\n     * Loaded a decoded audio buffer\n     *\n     * @param {Object} buffer Decoded audio buffer to load\n     */\n    load(buffer) {\n        this.startPosition = 0;\n        this.lastPlay = this.ac.currentTime;\n        this.buffer = buffer;\n        this.createSource();\n    }\n\n    /** @private */\n    createSource() {\n        this.disconnectSource();\n        this.source = this.ac.createBufferSource();\n\n        // adjust for old browsers\n        this.source.start = this.source.start || this.source.noteGrainOn;\n        this.source.stop = this.source.stop || this.source.noteOff;\n\n        this.source.playbackRate.setValueAtTime(\n            this.playbackRate,\n            this.ac.currentTime\n        );\n        this.source.buffer = this.buffer;\n        this.source.connect(this.analyser);\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Whether or not this backend is currently paused\n     */\n    isPaused() {\n        return this.state !== this.states[PLAYING];\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration of loaded buffer\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        if (!this.buffer) {\n            return 0;\n        }\n        return this.buffer.duration;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     * @param {number} end Position to end at in seconds\n     * @return {{start: number, end: number}} Object containing start and end\n     * positions\n     */\n    seekTo(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        this.scheduledPause = null;\n\n        if (start == null) {\n            start = this.getCurrentTime();\n            if (start >= this.getDuration()) {\n                start = 0;\n            }\n        }\n        if (end == null) {\n            end = this.getDuration();\n        }\n\n        this.startPosition = start;\n        this.lastPlay = this.ac.currentTime;\n\n        if (this.state === this.states[FINISHED]) {\n            this.setState(PAUSED);\n        }\n\n        return {\n            start: start,\n            end: end\n        };\n    }\n\n    /**\n     * Get the playback position in seconds\n     *\n     * @return {number} The playback position in seconds\n     */\n    getPlayedTime() {\n        return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop relative to the beginning of a clip.\n     */\n    play(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        // need to re-create source on each playback\n        this.createSource();\n\n        const adjustedTime = this.seekTo(start, end);\n\n        start = adjustedTime.start;\n        end = adjustedTime.end;\n\n        this.scheduledPause = end;\n\n        this.source.start(0, start, end - start);\n\n        if (this.ac.state == 'suspended') {\n            this.ac.resume && this.ac.resume();\n        }\n\n        this.setState(PLAYING);\n\n        this.fireEvent('play');\n    }\n\n    /**\n     * Pauses the loaded audio.\n     */\n    pause() {\n        this.scheduledPause = null;\n\n        this.startPosition += this.getPlayedTime();\n        this.source && this.source.stop(0);\n\n        this.setState(PAUSED);\n\n        this.fireEvent('pause');\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} The current time in seconds\n     */\n    getCurrentTime() {\n        return this.state.getCurrentTime.call(this);\n    }\n\n    /**\n     * Returns the current playback rate. (0=no playback, 1=normal playback)\n     *\n     * @return {number} The current playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value The playback rate to use\n     */\n    setPlaybackRate(value) {\n        value = value || 1;\n        if (this.isPaused()) {\n            this.playbackRate = value;\n        } else {\n            this.pause();\n            this.playbackRate = value;\n            this.play();\n        }\n    }\n}\n",
    "static": true,
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/src/webaudio.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 702,
    "kind": "variable",
    "name": "PLAYING",
    "memberof": "src/webaudio.js",
    "static": true,
    "longname": "src/webaudio.js~PLAYING",
    "access": "public",
    "export": false,
    "importPath": "wavesurfer.js/src/webaudio.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 703,
    "kind": "variable",
    "name": "PAUSED",
    "memberof": "src/webaudio.js",
    "static": true,
    "longname": "src/webaudio.js~PAUSED",
    "access": "public",
    "export": false,
    "importPath": "wavesurfer.js/src/webaudio.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 704,
    "kind": "variable",
    "name": "FINISHED",
    "memberof": "src/webaudio.js",
    "static": true,
    "longname": "src/webaudio.js~FINISHED",
    "access": "public",
    "export": false,
    "importPath": "wavesurfer.js/src/webaudio.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 705,
    "kind": "class",
    "name": "WebAudio",
    "memberof": "src/webaudio.js",
    "static": true,
    "longname": "src/webaudio.js~WebAudio",
    "access": "public",
    "export": true,
    "importPath": "wavesurfer.js/src/webaudio.js",
    "importStyle": "WebAudio",
    "description": "WebAudio backend",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "Observer"
    ]
  },
  {
    "__docId__": 706,
    "kind": "member",
    "name": "scriptBufferSize",
    "memberof": "src/webaudio.js~WebAudio",
    "static": true,
    "longname": "src/webaudio.js~WebAudio.scriptBufferSize",
    "access": "public",
    "description": "scriptBufferSize: size of the processing buffer",
    "lineNumber": 15,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 707,
    "kind": "member",
    "name": "audioContext",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#audioContext",
    "access": "public",
    "description": "audioContext: allows to process audio with WebAudio API",
    "lineNumber": 17,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 708,
    "kind": "member",
    "name": "offlineAudioContext",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#offlineAudioContext",
    "access": "private",
    "description": null,
    "lineNumber": 19,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 709,
    "kind": "member",
    "name": "stateBehaviors",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#stateBehaviors",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 710,
    "kind": "method",
    "name": "supportsWebAudio",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#supportsWebAudio",
    "access": "public",
    "description": "Does the browser support this backend",
    "lineNumber": 65,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not this browser supports this backend"
    },
    "params": []
  },
  {
    "__docId__": 711,
    "kind": "method",
    "name": "getAudioContext",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#getAudioContext",
    "access": "public",
    "description": "Get the audio context used by this backend or create one",
    "lineNumber": 74,
    "return": {
      "nullable": null,
      "types": [
        "AudioContext"
      ],
      "spread": false,
      "description": "Existing audio context, or creates a new one"
    },
    "params": []
  },
  {
    "__docId__": 712,
    "kind": "method",
    "name": "getOfflineAudioContext",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#getOfflineAudioContext",
    "access": "public",
    "description": "Get the offline audio context used by this backend or create one",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sampleRate",
        "description": "The sample rate to use"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "OfflineAudioContext"
      ],
      "spread": false,
      "description": "Existing offline audio context, or creates\na new one"
    }
  },
  {
    "__docId__": 713,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#constructor",
    "access": "public",
    "description": "Construct the backend",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "WavesurferParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Wavesurfer parameters"
      }
    ]
  },
  {
    "__docId__": 714,
    "kind": "member",
    "name": "params",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#params",
    "access": "private",
    "description": null,
    "lineNumber": 105,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 715,
    "kind": "member",
    "name": "ac",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#ac",
    "access": "public",
    "description": "ac: Audio Context instance",
    "lineNumber": 107,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 716,
    "kind": "member",
    "name": "lastPlay",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#lastPlay",
    "access": "private",
    "description": null,
    "lineNumber": 111,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 717,
    "kind": "member",
    "name": "startPosition",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#startPosition",
    "access": "private",
    "description": null,
    "lineNumber": 113,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 718,
    "kind": "member",
    "name": "scheduledPause",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#scheduledPause",
    "access": "private",
    "description": null,
    "lineNumber": 115,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 719,
    "kind": "member",
    "name": "states",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#states",
    "access": "private",
    "description": null,
    "lineNumber": 117,
    "ignore": true,
    "type": {
      "types": [
        "{\"PLAYING\": *, \"PAUSED\": *, \"FINISHED\": *}"
      ]
    }
  },
  {
    "__docId__": 720,
    "kind": "member",
    "name": "buffer",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#buffer",
    "access": "private",
    "description": null,
    "lineNumber": 123,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 721,
    "kind": "member",
    "name": "filters",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#filters",
    "access": "private",
    "description": null,
    "lineNumber": 125,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 722,
    "kind": "member",
    "name": "gainNode",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#gainNode",
    "access": "public",
    "description": "gainNode: allows to control audio volume",
    "lineNumber": 127,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 723,
    "kind": "member",
    "name": "mergedPeaks",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#mergedPeaks",
    "access": "private",
    "description": null,
    "lineNumber": 129,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 724,
    "kind": "member",
    "name": "offlineAc",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#offlineAc",
    "access": "private",
    "description": null,
    "lineNumber": 131,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 725,
    "kind": "member",
    "name": "peaks",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#peaks",
    "access": "private",
    "description": null,
    "lineNumber": 133,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 726,
    "kind": "member",
    "name": "playbackRate",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#playbackRate",
    "access": "private",
    "description": null,
    "lineNumber": 135,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 727,
    "kind": "member",
    "name": "analyser",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#analyser",
    "access": "public",
    "description": "analyser: provides audio analysis information",
    "lineNumber": 137,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 728,
    "kind": "member",
    "name": "scriptNode",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#scriptNode",
    "access": "public",
    "description": "scriptNode: allows processing audio",
    "lineNumber": 139,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 729,
    "kind": "member",
    "name": "source",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#source",
    "access": "private",
    "description": null,
    "lineNumber": 141,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 730,
    "kind": "member",
    "name": "splitPeaks",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#splitPeaks",
    "access": "private",
    "description": null,
    "lineNumber": 143,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 731,
    "kind": "member",
    "name": "state",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#state",
    "access": "private",
    "description": null,
    "lineNumber": 145,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 732,
    "kind": "member",
    "name": "explicitDuration",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#explicitDuration",
    "access": "private",
    "description": null,
    "lineNumber": 147,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 733,
    "kind": "member",
    "name": "destroyed",
    "memberof": "src/webaudio.js~WebAudio",
    "static": false,
    "longname": "src/webaudio.js~WebAudio#destroyed",
    "access": "public",
    "description": "Boolean indicating if the backend was destroyed.",
    "lineNumber": 151,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 734,
    "kind": "method",
    "name": "init",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#init",
    "access": "public",
    "description": "Initialise the backend, called in `wavesurfer.createBackend()`",
    "lineNumber": 157,
    "params": [],
    "return": null
  },
  {
    "__docId__": 735,
    "kind": "method",
    "name": "disconnectFilters",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#disconnectFilters",
    "access": "private",
    "description": null,
    "lineNumber": 168,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 737,
    "kind": "method",
    "name": "setState",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#setState",
    "access": "private",
    "description": "",
    "lineNumber": 184,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "The new state"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 739,
    "kind": "method",
    "name": "setFilter",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#setFilter",
    "access": "public",
    "description": "Unpacked `setFilters()`",
    "lineNumber": 196,
    "params": [
      {
        "nullable": null,
        "types": [
          "...AudioNode"
        ],
        "spread": true,
        "optional": false,
        "name": "filters",
        "description": "One or more filters to set"
      }
    ],
    "return": null
  },
  {
    "__docId__": 740,
    "kind": "method",
    "name": "setFilters",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#setFilters",
    "access": "public",
    "description": "Insert custom Web Audio nodes into the graph",
    "examples": [
      "const lowpass = wavesurfer.backend.ac.createBiquadFilter();\nwavesurfer.backend.setFilter(lowpass);"
    ],
    "lineNumber": 208,
    "params": [
      {
        "nullable": null,
        "types": [
          "AudioNode[]"
        ],
        "spread": false,
        "optional": false,
        "name": "filters",
        "description": "Packed filters array"
      }
    ],
    "return": null
  },
  {
    "__docId__": 742,
    "kind": "method",
    "name": "createScriptNode",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#createScriptNode",
    "access": "public",
    "description": "Create ScriptProcessorNode to process audio",
    "lineNumber": 229,
    "params": [],
    "return": null
  },
  {
    "__docId__": 746,
    "kind": "method",
    "name": "addOnAudioProcess",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#addOnAudioProcess",
    "access": "private",
    "description": null,
    "lineNumber": 247,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 747,
    "kind": "method",
    "name": "removeOnAudioProcess",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#removeOnAudioProcess",
    "access": "private",
    "description": null,
    "lineNumber": 263,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 748,
    "kind": "method",
    "name": "createAnalyserNode",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#createAnalyserNode",
    "access": "public",
    "description": "Create analyser node to perform audio analysis",
    "lineNumber": 267,
    "params": [],
    "return": null
  },
  {
    "__docId__": 750,
    "kind": "method",
    "name": "createVolumeNode",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#createVolumeNode",
    "access": "public",
    "description": "Create the gain node needed to control the playback volume.",
    "lineNumber": 276,
    "params": [],
    "return": null
  },
  {
    "__docId__": 753,
    "kind": "method",
    "name": "setSinkId",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#setSinkId",
    "access": "public",
    "description": "Set the sink id for the media player",
    "lineNumber": 294,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} A Promise that resolves to `undefined` when there\nare no errors."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": "String value representing audio device id."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A Promise that resolves to `undefined` when there\nare no errors."
    }
  },
  {
    "__docId__": 754,
    "kind": "method",
    "name": "setVolume",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#setVolume",
    "access": "public",
    "description": "Set the audio volume",
    "lineNumber": 324,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "A floating point value between 0 and 1."
      }
    ],
    "return": null
  },
  {
    "__docId__": 755,
    "kind": "method",
    "name": "getVolume",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#getVolume",
    "access": "public",
    "description": "Get the current volume",
    "lineNumber": 333,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "value A floating point value between 0 and 1."
    },
    "params": []
  },
  {
    "__docId__": 756,
    "kind": "method",
    "name": "decodeArrayBuffer",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#decodeArrayBuffer",
    "access": "private",
    "description": "Decode an array buffer and pass data to a callback",
    "lineNumber": 345,
    "params": [
      {
        "nullable": null,
        "types": [
          "ArrayBuffer"
        ],
        "spread": false,
        "optional": false,
        "name": "arraybuffer",
        "description": "The array buffer to decode"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The function to call on complete."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "errback",
        "description": "The function to call on error."
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 758,
    "kind": "method",
    "name": "setPeaks",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#setPeaks",
    "access": "public",
    "description": "Set pre-decoded peaks",
    "lineNumber": 364,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]",
          "Number.<Array[]>"
        ],
        "spread": false,
        "optional": false,
        "name": "peaks",
        "description": "Peaks data"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "Explicit duration"
      }
    ],
    "return": null
  },
  {
    "__docId__": 761,
    "kind": "method",
    "name": "setLength",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#setLength",
    "access": "public",
    "description": "Set the rendered length (different from the length of the audio)",
    "lineNumber": 376,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "The rendered length"
      }
    ],
    "return": null
  },
  {
    "__docId__": 764,
    "kind": "method",
    "name": "getPeaks",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#getPeaks",
    "access": "public",
    "description": "Compute the max and min value of the waveform when broken into <length> subranges.",
    "lineNumber": 406,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "How many subranges to break the waveform into."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "first",
        "description": "First sample in the required range."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "last",
        "description": "Last sample in the required range."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]",
        "Number.<Array[]>"
      ],
      "spread": false,
      "description": "Array of 2*<length> peaks or array of arrays of\npeaks consisting of (max, min) values for each subrange."
    }
  },
  {
    "__docId__": 766,
    "kind": "method",
    "name": "getPlayedPercents",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#getPlayedPercents",
    "access": "public",
    "description": "Get the position from 0 to 1",
    "lineNumber": 487,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Position"
    },
    "params": []
  },
  {
    "__docId__": 767,
    "kind": "method",
    "name": "disconnectSource",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#disconnectSource",
    "access": "private",
    "description": null,
    "lineNumber": 492,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 768,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#destroy",
    "access": "public",
    "description": "This is called when wavesurfer is destroyed",
    "lineNumber": 501,
    "params": [],
    "return": null
  },
  {
    "__docId__": 772,
    "kind": "method",
    "name": "load",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#load",
    "access": "public",
    "description": "Loaded a decoded audio buffer",
    "lineNumber": 542,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "buffer",
        "description": "Decoded audio buffer to load"
      }
    ],
    "return": null
  },
  {
    "__docId__": 776,
    "kind": "method",
    "name": "createSource",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#createSource",
    "access": "private",
    "description": null,
    "lineNumber": 550,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 778,
    "kind": "method",
    "name": "isPaused",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#isPaused",
    "access": "public",
    "description": "Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`",
    "lineNumber": 571,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not this backend is currently paused"
    },
    "params": []
  },
  {
    "__docId__": 779,
    "kind": "method",
    "name": "getDuration",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#getDuration",
    "access": "public",
    "description": "Used by `wavesurfer.getDuration()`",
    "lineNumber": 580,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Duration of loaded buffer"
    },
    "params": []
  },
  {
    "__docId__": 780,
    "kind": "method",
    "name": "seekTo",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#seekTo",
    "access": "public",
    "description": "Used by `wavesurfer.seekTo()`",
    "lineNumber": 598,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Position to start at in seconds"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Position to end at in seconds"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{start: number, end: number}"
      ],
      "spread": false,
      "description": "Object containing start and end\npositions"
    }
  },
  {
    "__docId__": 784,
    "kind": "method",
    "name": "getPlayedTime",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#getPlayedTime",
    "access": "public",
    "description": "Get the playback position in seconds",
    "lineNumber": 633,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The playback position in seconds"
    },
    "params": []
  },
  {
    "__docId__": 785,
    "kind": "method",
    "name": "play",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#play",
    "access": "public",
    "description": "Plays the loaded audio region.",
    "lineNumber": 644,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Start offset in seconds, relative to the beginning\nof a clip."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "When to stop relative to the beginning of a clip."
      }
    ],
    "return": null
  },
  {
    "__docId__": 787,
    "kind": "method",
    "name": "pause",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#pause",
    "access": "public",
    "description": "Pauses the loaded audio.",
    "lineNumber": 673,
    "params": [],
    "return": null
  },
  {
    "__docId__": 791,
    "kind": "method",
    "name": "getCurrentTime",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#getCurrentTime",
    "access": "public",
    "description": "Returns the current time in seconds relative to the audio-clip's\nduration.",
    "lineNumber": 690,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The current time in seconds"
    },
    "params": []
  },
  {
    "__docId__": 792,
    "kind": "method",
    "name": "getPlaybackRate",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#getPlaybackRate",
    "access": "public",
    "description": "Returns the current playback rate. (0=no playback, 1=normal playback)",
    "lineNumber": 699,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The current playback rate"
    },
    "params": []
  },
  {
    "__docId__": 793,
    "kind": "method",
    "name": "setPlaybackRate",
    "memberof": "src/webaudio.js~WebAudio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/webaudio.js~WebAudio#setPlaybackRate",
    "access": "public",
    "description": "Set the audio source playback rate.",
    "lineNumber": 708,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The playback rate to use"
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# [wavesurfer.js](https://wavesurfer-js.org)\n\n[![npm version](https://img.shields.io/npm/v/wavesurfer.js.svg?style=flat)](https://www.npmjs.com/package/wavesurfer.js)\n![npm](https://img.shields.io/npm/dm/wavesurfer.js.svg) [![Join the chat at https://gitter.im/katspaugh/wavesurfer.js](https://badges.gitter.im/katspaugh/wavesurfer.js.svg)](https://gitter.im/katspaugh/wavesurfer.js?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nInteractive navigable audio visualization using Web Audio and Canvas.\n\n[![Screenshot](https://raw.githubusercontent.com/katspaugh/wavesurfer.js/gh-pages/example/screenshot.png \"Screenshot\")](https://wavesurfer-js.org)\n\nSee a [tutorial](https://wavesurfer-js.org/docs) and [examples](https://wavesurfer-js.org/examples) on [wavesurfer-js.org](https://wavesurfer-js.org).\n\n## Browser support\nwavesurfer.js works only in [modern browsers supporting Web Audio](http://caniuse.com/audio-api).\n\nIt will fallback to Audio Element in other browsers (without graphics). You can also try [wavesurfer.swf](https://github.com/laurentvd/wavesurfer.swf) which is a Flash-based fallback.\n\n## FAQ\n### Can the audio start playing before the waveform is drawn?\nYes, if you use the `backend: 'MediaElement'` option. See here: https://wavesurfer-js.org/example/audio-element/. The audio will start playing as you press play. A thin line will be displayed until the whole audio file is downloaded and decoded to draw the waveform.\n\n### Can drawing be done as file loads?\nNo. Web Audio needs the whole file to decode it in the browser. You can however load pre-decoded waveform data to draw the waveform immediately. See here: https://wavesurfer-js.org/example/audio-element/ (the \"Pre-recoded Peaks\" section).\n\n## API in examples\n\nChoose a container:\n```html\n<div id=\"waveform\"></div>\n```\nCreate an instance, passing the container selector and [options](https://wavesurfer-js.org/docs/options.html):\n\n```javascript\nvar wavesurfer = WaveSurfer.create({\n    container: '#waveform',\n    waveColor: 'violet',\n    progressColor: 'purple'\n});\n```\n\nSubscribe to some [events](https://wavesurfer-js.org/docs/events.html):\n\n```javascript\nwavesurfer.on('ready', function () {\n    wavesurfer.play();\n});\n```\n\nLoad an audio file from a URL:\n\n```javascript\nwavesurfer.load('example/media/demo.wav');\n```\n\n## Documentation\n\nSee the documentation on all available [methods](https://wavesurfer-js.org/docs/methods.html), [options](https://wavesurfer-js.org/docs/options.html) and [events](https://wavesurfer-js.org/docs/events.html) on the [homepage](https://wavesurfer-js.org/docs/).\n\n## Upgrade\n\nSee the [upgrade](https://github.com/katspaugh/wavesurfer.js/blob/master/UPGRADE.md) document if you're upgrading from a previous version of wavesurfer.js.\n\n## Using with a module bundler\n\nWavesurfer can be used with a module system like this:\n```javascript\n// import\nimport WaveSurfer from 'wavesurfer.js';\n\n// commonjs/requirejs\nvar WaveSurfer = require('wavesurfer.js');\n\n// amd\ndefine(['WaveSurfer'], function(WaveSurfer) {\n  // ... code\n});\n\n```\n\n## Related projects\n\nFor a list of  projects using wavesurfer.js, check out\n[the projects page](https://wavesurfer-js.org/projects/).\n\n## Development\n\n[![Build Status](https://travis-ci.org/katspaugh/wavesurfer.js.svg?branch=master)](https://travis-ci.org/katspaugh/wavesurfer.js)\n[![Coverage Status](https://coveralls.io/repos/github/katspaugh/wavesurfer.js/badge.svg)](https://coveralls.io/github/katspaugh/wavesurfer.js)\n![Size](https://img.shields.io/bundlephobia/minzip/wavesurfer.js.svg?style=flat)\n\nInstall development dependencies:\n\n```\nnpm install\n```\nDevelopment tasks automatically rebuild certain parts of the library when files are changed (`start` – wavesurfer, `start:plugins` – plugins). Start a dev task and go to `localhost:8080/example/` to test the current build.\n\nStart development server for core library:\n\n```\nnpm run start\n```\n\nStart development server for plugins:\n\n```\nnpm run start:plugins\n```\n\nBuild all the files. (generated files are placed in the `dist` directory.)\n\n```\nnpm run build\n```\n\nRunning tests only:\n\n```\nnpm run test\n```\n\nBuild documentation with esdoc (generated files are placed in the `doc` directory.)\n```\nnpm run doc\n```\n\nIf you want to use [the VS Code - Debugger for Chrome](https://github.com/Microsoft/vscode-chrome-debug), there is already a [launch.json](.vscode/launch.json) with a properly configured ``sourceMapPathOverrides`` for you.\n\n## Editing documentation\nThe homepage and documentation files are maintained in the [`gh-pages` branch](https://github.com/katspaugh/wavesurfer.js/tree/gh-pages). Contributions to the documentation are especially welcome.\n\n## Credits\n\nInitial idea by [Alex Khokhulin](https://github.com/xoxulin). Many\nthanks to\n[the awesome contributors](https://github.com/katspaugh/wavesurfer.js/contributors)!\n\n## License\n\n[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\n\nThis work is licensed under a\n[BSD 3-Clause License](https://opensource.org/licenses/BSD-3-Clause).\n",
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/README.md",
    "name": "./node_modules/wavesurfer.js/README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"_from\": \"wavesurfer.js@^3.2.0\",\n  \"_id\": \"wavesurfer.js@3.2.0\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-P75SSpYTpzpCKFKjxmHkdp2jGpcm4neaGncBGV/jzfI5FPSIfl5mXTTZlZFpJhs7To+NI34Dj5y661JI43HEzA==\",\n  \"_location\": \"/wavesurfer.js\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"wavesurfer.js@^3.2.0\",\n    \"name\": \"wavesurfer.js\",\n    \"escapedName\": \"wavesurfer.js\",\n    \"rawSpec\": \"^3.2.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^3.2.0\"\n  },\n  \"_requiredBy\": [\n    \"/\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/wavesurfer.js/-/wavesurfer.js-3.2.0.tgz\",\n  \"_shasum\": \"c316f3bd1b9f0f4d26188c6865a57e29a13efedc\",\n  \"_spec\": \"wavesurfer.js@^3.2.0\",\n  \"_where\": \"/home/thijs/projects/wavesurfer.js-pages\",\n  \"author\": \"\",\n  \"bugs\": {\n    \"url\": \"https://github.com/katspaugh/wavesurfer.js/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"deprecated\": false,\n  \"description\": \"Interactive navigable audio visualization using Web Audio and Canvas\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.6.4\",\n    \"@babel/preset-env\": \"^7.6.3\",\n    \"@babel/register\": \"^7.6.2\",\n    \"babel-eslint\": \"^10.0.3\",\n    \"babel-loader\": \"^8.0.6\",\n    \"babel-plugin-add-module-exports\": \"^1.0.2\",\n    \"babel-plugin-istanbul\": \"^5.2.0\",\n    \"babel-plugin-transform-class-properties\": \"^6.24.1\",\n    \"date-fns\": \"^2.5.0\",\n    \"debounce\": \"^1.2.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-accessor-plugin\": \"^1.0.0\",\n    \"esdoc-brand-plugin\": \"^1.0.1\",\n    \"esdoc-coverage-plugin\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-integrate-test-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^6.5.1\",\n    \"eslint-config-prettier\": \"^6.4.0\",\n    \"eslint-plugin-prettier\": \"^3.1.1\",\n    \"htmlhint\": \"^0.11.0\",\n    \"in-publish\": \"^2.0.0\",\n    \"jasmine-core\": \"^3.5.0\",\n    \"karma\": \"^4.4.0\",\n    \"karma-chrome-launcher\": \"3.1.0\",\n    \"karma-coverage\": \"^2.0.1\",\n    \"karma-coveralls\": \"^2.1.0\",\n    \"karma-firefox-launcher\": \"^1.2.0\",\n    \"karma-jasmine\": \"2.0.1\",\n    \"karma-jasmine-matchers\": \"4.0.2\",\n    \"karma-verbose-reporter\": \"0.0.6\",\n    \"karma-webpack\": \"^4.0.2\",\n    \"lint-staged\": \"^9.4.2\",\n    \"load-script\": \"^1.0.0\",\n    \"pre-commit\": \"^1.2.2\",\n    \"prettier\": \"^1.18.2\",\n    \"terser-webpack-plugin\": \"^2.1.3\",\n    \"webpack\": \"^4.41.2\",\n    \"webpack-cli\": \"^3.3.9\",\n    \"webpack-dev-server\": \"^3.8.2\",\n    \"webpack-merge\": \"^4.2.2\"\n  },\n  \"directories\": {\n    \"example\": \"example\"\n  },\n  \"files\": [\n    \"dist/\",\n    \"src/\"\n  ],\n  \"homepage\": \"https://github.com/katspaugh/wavesurfer.js\",\n  \"keywords\": [\n    \"waveform\",\n    \"audio\",\n    \"music\",\n    \"player\",\n    \"webaudio\",\n    \"microphone\",\n    \"visualization\"\n  ],\n  \"license\": \"BSD-3-Clause\",\n  \"lint-staged\": {\n    \"*.js\": [\n      \"prettier\",\n      \"eslint\"\n    ],\n    \"*.html\": [\n      \"htmlhint\"\n    ]\n  },\n  \"main\": \"dist/wavesurfer.js\",\n  \"name\": \"wavesurfer.js\",\n  \"pre-commit\": \"lint-and-format-staged\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/katspaugh/wavesurfer.js.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build:normal && npm run build:minified\",\n    \"build:htmlinit\": \"webpack --config ./build-config/webpack.prod.htmlinit.js\",\n    \"build:htmlinit:min\": \"webpack --config ./build-config/webpack.prod.htmlinit.min.js\",\n    \"build:main\": \"webpack --config ./build-config/webpack.prod.main.js\",\n    \"build:main:min\": \"webpack --config ./build-config/webpack.prod.main.min.js\",\n    \"build:minified\": \"npm run build:main:min && npm run build:plugins:min && npm run build:htmlinit:min\",\n    \"build:normal\": \"npm run build:main && npm run build:plugins && npm run build:htmlinit\",\n    \"build:plugins\": \"webpack --config ./build-config/webpack.prod.plugins.js\",\n    \"build:plugins:min\": \"webpack --config ./build-config/webpack.prod.plugins.min.js\",\n    \"doc\": \"esdoc\",\n    \"format\": \"prettier 'src/**/*.js*' 'example/**/*.js*' 'spec/**/*.js*' 'website/**/*.js*' 'build-config/**/*.js' karma.conf.js --write\",\n    \"lint\": \"npm run lint:js && npm run lint:html\",\n    \"lint-and-format-staged\": \"lint-staged\",\n    \"lint:html\": \"htmlhint example\",\n    \"lint:js\": \"eslint src example spec\",\n    \"prepare\": \"npm run build\",\n    \"prepublishOnly\": \"not-in-install && npm run build || in-install\",\n    \"start\": \"npm run build:plugins && npm run build:htmlinit && webpack-dev-server --config ./build-config/webpack.dev.main.js\",\n    \"start:htmlinit\": \"npm run build:main && npm run build:plugins && webpack-dev-server --config ./build-config/webpack.dev.htmlinit.js\",\n    \"start:plugins\": \"npm run build:main && npm run build:htmlinit && webpack-dev-server --config ./build-config/webpack.dev.plugins.js\",\n    \"test\": \"karma start karma.conf.js\"\n  },\n  \"version\": \"3.2.0\"\n}\n",
    "longname": "/home/thijs/projects/wavesurfer.js-pages/node_modules/wavesurfer.js/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]